/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 19 03:55:56 GMT 2016
 */

package org.objectweb.cjdbc.driver;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.stream.CJDBCInputStream;
import org.objectweb.cjdbc.common.stream.CJDBCOutputStream;
import org.objectweb.cjdbc.driver.Blob;
import org.objectweb.cjdbc.driver.Field;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Field_ESTest extends Field_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.isDefinitelyWritable()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      Field field0 = new Field("SpreadsheetDate: Year must be in range 1900 to 9999.", "SpreadsheetDate: Year must be in range 1900 to 9999.", 905, 812, "SpreadsheetDate: Year must be in range 1900 to 9999.", "SpreadsheetDate: Year must be in range 1900 to 9999.");
      boolean boolean0 = field0.isDefinitelyWritable();
      assertFalse(field0.isSigned());
      assertEquals(812, field0.getSqlType());
      assertFalse(field0.isSearchable());
      assertEquals(0, field0.getScale());
      assertTrue(field0.isCaseSensitive());
      assertEquals(905, field0.getColumnDisplaySize());
      assertEquals(1, field0.isNullable());
      assertFalse(field0.isCurrency());
      assertFalse(boolean0);
      assertEquals(0, field0.getPrecision());
      assertFalse(field0.isWritable());
      assertTrue(field0.isReadOnly());
      assertFalse(field0.isAutoIncrement());
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.isSigned()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      Field field0 = new Field("Az<% LzZZ{KKq/\"~}>h", "CaNw#mvQW", 59, (-2571), "CaNw#mvQW", "Az<% LzZZ{KKq/\"~}>h");
      boolean boolean0 = field0.isSigned();
      assertEquals(1, field0.isNullable());
      assertFalse(field0.isCurrency());
      assertTrue(field0.isCaseSensitive());
      assertEquals(-2571, field0.getSqlType());
      assertEquals("CaNw#mvQW", field0.getTypeName());
      assertFalse(field0.isSearchable());
      assertTrue(field0.isReadOnly());
      assertEquals("CaNw#mvQW", field0.getFieldName());
      assertFalse(field0.isDefinitelyWritable());
      assertFalse(boolean0);
      assertEquals(0, field0.getPrecision());
      assertEquals("Az<% LzZZ{KKq/\"~}>h", field0.getColumnClassName());
      assertFalse(field0.isAutoIncrement());
      assertEquals(59, field0.getColumnDisplaySize());
      assertEquals(0, field0.getScale());
      assertFalse(field0.isWritable());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.getSqlType()I: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      Field field0 = new Field("P7Q", "P7Q", 0, (-1509), "", (String) null, true, true, false, 3710, false, false, false, true, true, 181, 181);
      int int0 = field0.getSqlType();
      assertEquals("", field0.getTypeName());
      assertTrue(field0.isAutoIncrement());
      assertEquals(181, field0.getPrecision());
      assertTrue(field0.isCaseSensitive());
      assertEquals(3710, field0.isNullable());
      assertFalse(field0.isWritable());
      assertEquals("P7Q", field0.getFieldName());
      assertFalse(field0.isCurrency());
      assertTrue(field0.isSearchable());
      assertEquals((-1509), int0);
      assertEquals(0, field0.getColumnDisplaySize());
      assertTrue(field0.isSigned());
      assertEquals(181, field0.getScale());
      assertFalse(field0.isDefinitelyWritable());
      assertEquals("P7Q", field0.getTableName());
      assertFalse(field0.isReadOnly());
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.isAutoIncrement()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      Field field0 = new Field("SpreadsheetDate: Year must be in range 1900 to 9999.", "SpreadsheetDate: Year must be in range 1900 to 9999.", 905, 812, "SpreadsheetDate: Year must be in range 1900 to 9999.", "SpreadsheetDate: Year must be in range 1900 to 9999.");
      boolean boolean0 = field0.isAutoIncrement();
      assertTrue(field0.isCaseSensitive());
      assertEquals(1, field0.isNullable());
      assertFalse(field0.isWritable());
      assertEquals(0, field0.getScale());
      assertEquals(0, field0.getPrecision());
      assertTrue(field0.isReadOnly());
      assertFalse(field0.isDefinitelyWritable());
      assertFalse(field0.isSigned());
      assertEquals(905, field0.getColumnDisplaySize());
      assertFalse(field0.isSearchable());
      assertFalse(field0.isCurrency());
      assertFalse(boolean0);
      assertEquals(812, field0.getSqlType());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.isSearchable()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      Field field0 = new Field("P7Q", "P7Q", 0, (-1509), "", (String) null, true, true, false, 3710, false, false, false, true, true, 181, 181);
      boolean boolean0 = field0.isSearchable();
      assertEquals("P7Q", field0.getFieldName());
      assertEquals(3710, field0.isNullable());
      assertTrue(field0.isAutoIncrement());
      assertTrue(field0.isCaseSensitive());
      assertEquals(0, field0.getColumnDisplaySize());
      assertFalse(field0.isCurrency());
      assertFalse(field0.isDefinitelyWritable());
      assertEquals("P7Q", field0.getTableName());
      assertEquals(181, field0.getScale());
      assertFalse(field0.isWritable());
      assertTrue(field0.isSigned());
      assertFalse(field0.isReadOnly());
      assertEquals("", field0.getTypeName());
      assertEquals(181, field0.getPrecision());
      assertEquals(-1509, field0.getSqlType());
      assertTrue(boolean0);
  }

  //Test case number: 5
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.getFullName()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.toString()Ljava/lang/String;: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;)V: root-Branch
   * Goal 4. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      Field field0 = new Field("SpreadsheetDate: Year must be in range 1900 to 9999.", "SpreadsheetDate: Year must be in range 1900 to 9999.", 905, 812, "SpreadsheetDate: Year must be in range 1900 to 9999.", "SpreadsheetDate: Year must be in range 1900 to 9999.");
      String string0 = field0.toString();
      assertFalse(field0.isWritable());
      assertTrue(field0.isReadOnly());
      assertFalse(field0.isDefinitelyWritable());
      assertEquals(0, field0.getPrecision());
      assertEquals("SpreadsheetDate: Year must be in range 1900 to 9999..SpreadsheetDate: Year must be in range 1900 to 9999.", string0);
      assertFalse(field0.isCurrency());
      assertEquals(812, field0.getSqlType());
      assertEquals(905, field0.getColumnDisplaySize());
      assertFalse(field0.isSigned());
      assertFalse(field0.isSearchable());
      assertEquals(1, field0.isNullable());
      assertTrue(field0.isCaseSensitive());
      assertEquals(0, field0.getScale());
      assertFalse(field0.isAutoIncrement());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.isReadOnly()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      Field field0 = new Field("vO6ZTrQBDICS6", "OFi??EpHZA2", 1917, 1917, "", (String) null, false, false, false, (-1), false, false, false, false, false, 2115, 0);
      boolean boolean0 = field0.isReadOnly();
      assertEquals("", field0.getTypeName());
      assertFalse(field0.isCaseSensitive());
      assertFalse(field0.isAutoIncrement());
      assertFalse(field0.isWritable());
      assertEquals(1917, field0.getSqlType());
      assertEquals(-1, field0.isNullable());
      assertEquals(1917, field0.getColumnDisplaySize());
      assertFalse(field0.isCurrency());
      assertFalse(field0.isSigned());
      assertEquals(2115, field0.getPrecision());
      assertEquals("vO6ZTrQBDICS6", field0.getTableName());
      assertEquals("OFi??EpHZA2", field0.getFieldName());
      assertEquals(0, field0.getScale());
      assertFalse(boolean0);
      assertFalse(field0.isDefinitelyWritable());
      assertFalse(field0.isSearchable());
  }

  //Test case number: 7
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.getTypeName()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      Field field0 = new Field("SpreadsheetDate: Year must be in range 1900 to 9999.", "SpreadsheetDate: Year must be in range 1900 to 9999.", 905, 812, "SpreadsheetDate: Year must be in range 1900 to 9999.", "SpreadsheetDate: Year must be in range 1900 to 9999.");
      field0.getTypeName();
      assertEquals(812, field0.getSqlType());
      assertEquals(905, field0.getColumnDisplaySize());
      assertEquals(0, field0.getScale());
      assertTrue(field0.isCaseSensitive());
      assertEquals(1, field0.isNullable());
      assertFalse(field0.isCurrency());
      assertEquals(0, field0.getPrecision());
      assertFalse(field0.isSigned());
      assertFalse(field0.isAutoIncrement());
      assertFalse(field0.isWritable());
      assertFalse(field0.isSearchable());
      assertTrue(field0.isReadOnly());
      assertFalse(field0.isDefinitelyWritable());
  }

  //Test case number: 8
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.isWritable()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      Field field0 = new Field("SpreadsheetDate: Year must be in range 1900 to 9999.", "SpreadsheetDate: Year must be in range 1900 to 9999.", 905, 812, "SpreadsheetDate: Year must be in range 1900 to 9999.", "SpreadsheetDate: Year must be in range 1900 to 9999.");
      boolean boolean0 = field0.isWritable();
      assertFalse(field0.isSearchable());
      assertEquals(905, field0.getColumnDisplaySize());
      assertEquals(812, field0.getSqlType());
      assertFalse(field0.isSigned());
      assertEquals(1, field0.isNullable());
      assertTrue(field0.isCaseSensitive());
      assertFalse(field0.isCurrency());
      assertFalse(boolean0);
      assertEquals(0, field0.getPrecision());
      assertFalse(field0.isDefinitelyWritable());
      assertTrue(field0.isReadOnly());
      assertEquals(0, field0.getScale());
      assertFalse(field0.isAutoIncrement());
  }

  //Test case number: 9
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.getFieldName()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      Field field0 = new Field("", "", 0, 0, "B&Pg[k(", "");
      String string0 = field0.getFieldName();
      assertEquals(0, field0.getScale());
      assertEquals("", field0.getColumnClassName());
      assertEquals(0, field0.getPrecision());
      assertEquals(0, field0.getColumnDisplaySize());
      assertFalse(field0.isSigned());
      assertFalse(field0.isWritable());
      assertEquals(0, field0.getSqlType());
      assertEquals("B&Pg[k(", field0.getTypeName());
      assertEquals("", string0);
      assertTrue(field0.isCaseSensitive());
      assertEquals(1, field0.isNullable());
      assertFalse(field0.isAutoIncrement());
      assertFalse(field0.isCurrency());
      assertFalse(field0.isSearchable());
      assertEquals("", field0.getTableName());
      assertTrue(field0.isReadOnly());
      assertFalse(field0.isDefinitelyWritable());
  }

  //Test case number: 10
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.isNullable()I: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      Field field0 = new Field("GuQ*tuRRy1", "GuQ*tuRRy1", 0, 0, "GuQ*tuRRy1", "GuQ*tuRRy1");
      int int0 = field0.isNullable();
      assertFalse(field0.isSearchable());
      assertTrue(field0.isCaseSensitive());
      assertFalse(field0.isSigned());
      assertEquals(0, field0.getScale());
      assertFalse(field0.isAutoIncrement());
      assertFalse(field0.isWritable());
      assertEquals(0, field0.getSqlType());
      assertTrue(field0.isReadOnly());
      assertFalse(field0.isDefinitelyWritable());
      assertEquals(0, field0.getColumnDisplaySize());
      assertEquals(1, int0);
      assertEquals(0, field0.getPrecision());
      assertFalse(field0.isCurrency());
  }

  //Test case number: 11
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.getColumnDisplaySize()I: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   */

	@Test(timeout=300000)
  public void test11()  throws Throwable  {
      Field field0 = new Field("Az<% LzZZ{KKq/\"~}>h", "CaNw#mvQW", 59, (-2571), "CaNw#mvQW", "Az<% LzZZ{KKq/\"~}>h");
      int int0 = field0.getColumnDisplaySize();
      assertEquals(0, field0.getPrecision());
      assertEquals("CaNw#mvQW", field0.getFieldName());
      assertEquals(0, field0.getScale());
      assertTrue(field0.isReadOnly());
      assertEquals(59, int0);
      assertFalse(field0.isDefinitelyWritable());
      assertFalse(field0.isSigned());
      assertEquals("CaNw#mvQW", field0.getTypeName());
      assertFalse(field0.isSearchable());
      assertFalse(field0.isCurrency());
      assertEquals(-2571, field0.getSqlType());
      assertEquals("Az<% LzZZ{KKq/\"~}>h", field0.getTableName());
      assertTrue(field0.isCaseSensitive());
      assertEquals(1, field0.isNullable());
      assertFalse(field0.isWritable());
      assertFalse(field0.isAutoIncrement());
      assertEquals("Az<% LzZZ{KKq/\"~}>h", field0.getColumnClassName());
  }

  //Test case number: 12
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.isCurrency()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   */

	@Test(timeout=300000)
  public void test12()  throws Throwable  {
      Field field0 = new Field("SpreadsheetDate: Year must be in range 1900 to 9999.", "SpreadsheetDate: Year must be in range 1900 to 9999.", 905, 812, "SpreadsheetDate: Year must be in range 1900 to 9999.", "SpreadsheetDate: Year must be in range 1900 to 9999.");
      boolean boolean0 = field0.isCurrency();
      assertEquals(0, field0.getScale());
      assertEquals(0, field0.getPrecision());
      assertFalse(field0.isSigned());
      assertFalse(field0.isDefinitelyWritable());
      assertTrue(field0.isCaseSensitive());
      assertFalse(field0.isWritable());
      assertFalse(field0.isAutoIncrement());
      assertEquals(1, field0.isNullable());
      assertFalse(field0.isSearchable());
      assertEquals(905, field0.getColumnDisplaySize());
      assertTrue(field0.isReadOnly());
      assertEquals(812, field0.getSqlType());
      assertFalse(boolean0);
  }

  //Test case number: 13
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.getTableName()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - false
   */

	@Test(timeout=300000)
  public void test13()  throws Throwable  {
      Field field0 = new Field((String) null, "\"Y6,`dUuzFvV-W>;#N", (-143), (-143), "", "", false, false, false, (-143), false, false, true, false, false, (-143), (-1));
      field0.getTableName();
      assertFalse(field0.isSearchable());
      assertFalse(field0.isSigned());
      assertEquals(-143, field0.getSqlType());
      assertFalse(field0.isReadOnly());
      assertEquals(-1, field0.getScale());
      assertEquals(-143, field0.getPrecision());
      assertEquals("\"Y6,`dUuzFvV-W>;#N", field0.getFieldName());
      assertEquals(-143, field0.getColumnDisplaySize());
      assertFalse(field0.isAutoIncrement());
      assertTrue(field0.isDefinitelyWritable());
      assertEquals(-143, field0.isNullable());
      assertFalse(field0.isWritable());
      assertFalse(field0.isCaseSensitive());
      assertEquals("", field0.getColumnClassName());
      assertFalse(field0.isCurrency());
  }

  //Test case number: 14
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.isCaseSensitive()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   */

	@Test(timeout=300000)
  public void test14()  throws Throwable  {
      Field field0 = new Field(".", "iHxy1NR,[1-:FO(Y", 1865, 1865, "", ".");
      boolean boolean0 = field0.isCaseSensitive();
      assertFalse(field0.isSigned());
      assertEquals(1865, field0.getSqlType());
      assertEquals(1865, field0.getColumnDisplaySize());
      assertFalse(field0.isSearchable());
      assertEquals(".", field0.getColumnClassName());
      assertTrue(field0.isReadOnly());
      assertEquals(0, field0.getPrecision());
      assertEquals("iHxy1NR,[1-:FO(Y", field0.getFieldName());
      assertTrue(boolean0);
      assertFalse(field0.isCurrency());
      assertFalse(field0.isWritable());
      assertFalse(field0.isAutoIncrement());
      assertFalse(field0.isDefinitelyWritable());
      assertEquals(1, field0.isNullable());
      assertEquals(".", field0.getTableName());
      assertEquals(0, field0.getScale());
      assertEquals("", field0.getTypeName());
  }

  //Test case number: 15
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.setFieldName(Ljava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   */

	@Test(timeout=300000)
  public void test15()  throws Throwable  {
      Field field0 = new Field("P7Q", "P7Q", 0, (-1509), "", (String) null, true, true, false, 3710, false, false, false, true, true, 181, 181);
      assertEquals("P7Q", field0.getFieldName());
      
      field0.setFieldName((String) null);
      assertEquals(3710, field0.isNullable());
      assertTrue(field0.isCaseSensitive());
      assertFalse(field0.isCurrency());
      assertTrue(field0.isSearchable());
      assertEquals(181, field0.getPrecision());
      assertTrue(field0.isSigned());
      assertFalse(field0.isDefinitelyWritable());
      assertEquals("P7Q", field0.getTableName());
      assertEquals(0, field0.getColumnDisplaySize());
      assertFalse(field0.isWritable());
      assertEquals(-1509, field0.getSqlType());
      assertEquals("", field0.getTypeName());
      assertFalse(field0.isReadOnly());
      assertTrue(field0.isAutoIncrement());
      assertEquals(181, field0.getScale());
  }

  //Test case number: 16
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.getPrecision()I: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   */

	@Test(timeout=300000)
  public void test16()  throws Throwable  {
      Field field0 = new Field("Az<% LzZZ{KKq/\"~}>h", "CaNw#mvQW", 59, (-2571), "CaNw#mvQW", "Az<% LzZZ{KKq/\"~}>h");
      int int0 = field0.getPrecision();
      assertEquals("Az<% LzZZ{KKq/\"~}>h", field0.getColumnClassName());
      assertEquals(0, field0.getScale());
      assertFalse(field0.isSearchable());
      assertTrue(field0.isReadOnly());
      assertFalse(field0.isDefinitelyWritable());
      assertEquals(0, int0);
      assertEquals(-2571, field0.getSqlType());
      assertEquals("Az<% LzZZ{KKq/\"~}>h", field0.getTableName());
      assertFalse(field0.isAutoIncrement());
      assertFalse(field0.isWritable());
      assertEquals("CaNw#mvQW", field0.getTypeName());
      assertTrue(field0.isCaseSensitive());
      assertEquals(59, field0.getColumnDisplaySize());
      assertEquals(1, field0.isNullable());
      assertFalse(field0.isCurrency());
      assertFalse(field0.isSigned());
  }

  //Test case number: 17
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.getScale()I: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   */

	@Test(timeout=300000)
  public void test17()  throws Throwable  {
      Field field0 = new Field("XspgRL>/bIf]-t|ql", "XspgRL>/bIf]-t|ql", 2368, 2368, "", "xmB*S?N%JaI!N");
      int int0 = field0.getScale();
      assertEquals(0, field0.getPrecision());
      assertEquals(2368, field0.getColumnDisplaySize());
      assertFalse(field0.isSigned());
      assertFalse(field0.isDefinitelyWritable());
      assertFalse(field0.isSearchable());
      assertEquals("XspgRL>/bIf]-t|ql", field0.getFieldName());
      assertTrue(field0.isReadOnly());
      assertFalse(field0.isCurrency());
      assertEquals("", field0.getTypeName());
      assertFalse(field0.isAutoIncrement());
      assertEquals("xmB*S?N%JaI!N", field0.getColumnClassName());
      assertEquals(1, field0.isNullable());
      assertEquals(0, int0);
      assertTrue(field0.isCaseSensitive());
      assertEquals(2368, field0.getSqlType());
      assertFalse(field0.isWritable());
      assertEquals("XspgRL>/bIf]-t|ql", field0.getTableName());
  }

  //Test case number: 18
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.getColumnClassName()Ljava/lang/String;: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   */

	@Test(timeout=300000)
  public void test18()  throws Throwable  {
      Field field0 = new Field("Failed to reconnect to other controller: ", "\"dn|", 274, 274, "s7lWIwRa)/_eom", "Failed to reconnect to other controller: ");
      String string0 = field0.getColumnClassName();
      assertTrue(field0.isReadOnly());
      assertEquals(0, field0.getPrecision());
      assertEquals("s7lWIwRa)/_eom", field0.getTypeName());
      assertEquals(0, field0.getScale());
      assertEquals("\"dn|", field0.getFieldName());
      assertFalse(field0.isSigned());
      assertFalse(field0.isWritable());
      assertTrue(field0.isCaseSensitive());
      assertEquals(1, field0.isNullable());
      assertEquals(274, field0.getColumnDisplaySize());
      assertFalse(field0.isCurrency());
      assertEquals("Failed to reconnect to other controller: ", string0);
      assertFalse(field0.isAutoIncrement());
      assertEquals("Failed to reconnect to other controller: ", field0.getTableName());
      assertFalse(field0.isSearchable());
      assertEquals(274, field0.getSqlType());
      assertFalse(field0.isDefinitelyWritable());
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. org.objectweb.cjdbc.driver.Field.<init>(Lorg/objectweb/cjdbc/common/stream/CJDBCInputStream;)V: I8 Branch 2 IFEQ L155 - true
   */

	@Test(timeout=300000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Blob blob0 = new Blob(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = (ByteArrayInputStream)blob0.getBinaryStream();
      CJDBCInputStream cJDBCInputStream0 = new CJDBCInputStream((InputStream) byteArrayInputStream0);
      Field field0 = null;
      try {
        field0 = new Field(cJDBCInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.io.DataInputStream", e);
      }
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. org.objectweb.cjdbc.driver.Field.<init>(Lorg/objectweb/cjdbc/common/stream/CJDBCInputStream;)V: I8 Branch 2 IFEQ L155 - false
   */

	@Test(timeout=300000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      Blob blob0 = new Blob(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = (ByteArrayInputStream)blob0.getBinaryStream();
      CJDBCInputStream cJDBCInputStream0 = new CJDBCInputStream((InputStream) byteArrayInputStream0);
      Field field0 = null;
      try {
        field0 = new Field(cJDBCInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.io.DataInputStream", e);
      }
  }

  //Test case number: 21
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - true
   * Goal 3. org.objectweb.cjdbc.driver.Field.sendToStream(Lorg/objectweb/cjdbc/common/stream/CJDBCOutputStream;)V: I5 Branch 3 IF_ACMPNE L188 - true
   */

	@Test(timeout=300000)
  public void test21()  throws Throwable  {
      Field field0 = new Field("4f[ll}c^O8j^LBqtp", "4f[ll}c^O8j^LBqtp", (-2535), (-2535), "", "r?&cG\"EgH|4?Lat0h");
      // Undeclared exception!
      try { 
        field0.sendToStream((CJDBCOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Field", e);
      }
  }

  //Test case number: 22
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Field.<init>(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZZZIZZZZZII)V: I7 Branch 1 IFNONNULL L124 - false
   * Goal 2. org.objectweb.cjdbc.driver.Field.sendToStream(Lorg/objectweb/cjdbc/common/stream/CJDBCOutputStream;)V: I5 Branch 3 IF_ACMPNE L188 - false
   */

	@Test(timeout=300000)
  public void test22()  throws Throwable  {
      Field field0 = new Field((String) null, "P7Q", 3710, 0, "", "P7Q", false, false, false, (-1509), false, true, true, true, false, 1814, 3710);
      // Undeclared exception!
      try { 
        field0.sendToStream((CJDBCOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Field", e);
      }
  }
}
