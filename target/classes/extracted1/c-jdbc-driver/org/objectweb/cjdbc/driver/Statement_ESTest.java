/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 19 03:48:48 GMT 2016
 */

package org.objectweb.cjdbc.driver;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import java.awt.Panel;
import java.sql.BatchUpdateException;
import java.sql.SQLException;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.exceptions.NotImplementedException;
import org.objectweb.cjdbc.driver.Connection;
import org.objectweb.cjdbc.driver.Statement;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Statement_ESTest extends Statement_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;[Ljava/lang/String;)Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      String[] stringArray0 = new String[5];
      try { 
        statement0.execute(") y4UY+s<k)", stringArray0);
        fail("Expecting exception: NotImplementedException");
      
      } catch(NotImplementedException e) {
         //
         // execute not implemented
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.getUpdateCount()I: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      int int0 = statement0.getUpdateCount();
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(0, statement0.getFetchSize());
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(0, statement0.getMaxRows());
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals((-1), int0);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.setCursorName(Ljava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.setCursorName(" (");
      assertEquals(0, statement0.getFetchSize());
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(0, statement0.getMaxRows());
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(0, statement0.getMaxFieldSize());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.getResultSetHoldability()I: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      try { 
        statement0.getResultSetHoldability();
        fail("Expecting exception: NotImplementedException");
      
      } catch(NotImplementedException e) {
         //
         // getResultSetHoldability not implemented
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 4
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.executeUpdate(Ljava/lang/String;I)I: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.executeUpdate(Ljava/lang/String;)I: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 4. org.objectweb.cjdbc.driver.Statement.executeUpdateWithSkeleton(Ljava/lang/String;Ljava/lang/String;)I: I4 Branch 19 IFEQ L361 - false
   * Goal 5. org.objectweb.cjdbc.driver.Statement.isClosed()Z: I4 Branch 57 IFNONNULL L1016 - false
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      try { 
        statement0.executeUpdate("&8c0t''k9e((HLTSZ2", 0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Unable to execute query on a closed statement
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.getMaxRows()I: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      int int0 = statement0.getMaxRows();
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(0, int0);
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(0, statement0.getFetchSize());
      assertEquals(1000, statement0.getFetchDirection());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.getMaxFieldSize()I: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      int int0 = statement0.getMaxFieldSize();
      assertEquals(0, statement0.getFetchSize());
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(0, int0);
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(0, statement0.getMaxRows());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(-1, statement0.getUpdateCount());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.getWarnings()Ljava/sql/SQLWarning;: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.getWarnings();
      assertEquals(0, statement0.getFetchSize());
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(0, statement0.getMaxRows());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(1000, statement0.getFetchDirection());
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.getMoreResults(I)Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      try { 
        statement0.getMoreResults((-21));
        fail("Expecting exception: NotImplementedException");
      
      } catch(NotImplementedException e) {
         //
         // getMoreResults not implemented
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.getGeneratedKeys()Ljava/sql/ResultSet;: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.getGeneratedKeys();
      assertEquals(0, statement0.getFetchSize());
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals(0, statement0.getMaxRows());
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(0, statement0.getQueryTimeout());
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.getResultSetConcurrency()I: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      int int0 = statement0.getResultSetConcurrency();
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(0, statement0.getFetchSize());
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(0, statement0.getMaxRows());
      assertEquals(1007, int0);
  }

  //Test case number: 11
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.getResultSetType()I: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test11()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      int int0 = statement0.getResultSetType();
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(0, statement0.getFetchSize());
      assertEquals(1003, int0);
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(0, statement0.getMaxRows());
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals(1000, statement0.getFetchDirection());
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.clearWarnings()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test12()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.clearWarnings();
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(0, statement0.getMaxRows());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(0, statement0.getFetchSize());
  }

  //Test case number: 13
  /*
   * 8 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;)Z: I10 Branch 7 IF_ICMPNE L247 - true
   * Goal 4. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;)Z: I34 Branch 8 IFGT L257 - false
   * Goal 5. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;)Z: I42 Branch 9 IFGT L257 - false
   * Goal 6. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;)Z: I50 Branch 10 IFLE L257 - false
   * Goal 7. org.objectweb.cjdbc.driver.Statement.executeQuery(Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;: I4 Branch 11 IFEQ L296 - false
   * Goal 8. org.objectweb.cjdbc.driver.Statement.isClosed()Z: I4 Branch 57 IFNONNULL L1016 - false
   */

	@Test(timeout=300000)
  public void test13()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      try { 
        statement0.execute("values");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Unable to execute query on a closed statement
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 14
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;[I)Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test14()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      int[] intArray0 = new int[6];
      try { 
        statement0.execute("_(:v3P\"wb<", intArray0);
        fail("Expecting exception: NotImplementedException");
      
      } catch(NotImplementedException e) {
         //
         // execute not implemented
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 15
  /*
   * 9 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;I)Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.executeUpdate(Ljava/lang/String;)I: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 4. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;)Z: I10 Branch 7 IF_ICMPNE L247 - true
   * Goal 5. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;)Z: I34 Branch 8 IFGT L257 - false
   * Goal 6. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;)Z: I42 Branch 9 IFGT L257 - false
   * Goal 7. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;)Z: I50 Branch 10 IFLE L257 - true
   * Goal 8. org.objectweb.cjdbc.driver.Statement.executeUpdateWithSkeleton(Ljava/lang/String;Ljava/lang/String;)I: I4 Branch 19 IFEQ L361 - false
   * Goal 9. org.objectweb.cjdbc.driver.Statement.isClosed()Z: I4 Branch 57 IFNONNULL L1016 - false
   */

	@Test(timeout=300000)
  public void test15()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      try { 
        statement0.execute("e", 1027);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Unable to execute query on a closed statement
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.setEscapeProcessing(Z)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test16()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.setEscapeProcessing(false);
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(0, statement0.getFetchSize());
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(0, statement0.getMaxRows());
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.getResultSet()Ljava/sql/ResultSet;: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test17()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.getResultSet();
      assertEquals(0, statement0.getMaxRows());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(0, statement0.getFetchSize());
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(0, statement0.getMaxFieldSize());
  }

  //Test case number: 18
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.executeUpdate(Ljava/lang/String;[Ljava/lang/String;)I: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test18()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      String[] stringArray0 = new String[2];
      try { 
        statement0.executeUpdate("drop", stringArray0);
        fail("Expecting exception: NotImplementedException");
      
      } catch(NotImplementedException e) {
         //
         // executeUpdate not implemented
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 19
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.getFetchSize()I: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test19()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      int int0 = statement0.getFetchSize();
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(0, statement0.getMaxRows());
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(0, int0);
      assertEquals(1007, statement0.getResultSetConcurrency());
  }

  //Test case number: 20
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.cancel()V: root-Branch
   */

	@Test(timeout=300000)
  public void test20()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      try { 
        statement0.cancel();
        fail("Expecting exception: NotImplementedException");
      
      } catch(NotImplementedException e) {
         //
         // cancel() not implemented
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 21
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.getFetchDirection()I: root-Branch
   */

	@Test(timeout=300000)
  public void test21()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      int int0 = statement0.getFetchDirection();
      assertEquals(1000, int0);
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(0, statement0.getFetchSize());
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(0, statement0.getMaxRows());
      assertEquals(-1, statement0.getUpdateCount());
  }

  //Test case number: 22
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.getQueryTimeout()I: root-Branch
   */

	@Test(timeout=300000)
  public void test22()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      int int0 = statement0.getQueryTimeout();
      assertEquals(0, statement0.getFetchSize());
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(0, int0);
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(0, statement0.getMaxRows());
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(0, statement0.getMaxFieldSize());
  }

  //Test case number: 23
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.executeUpdate(Ljava/lang/String;[I)I: root-Branch
   */

	@Test(timeout=300000)
  public void test23()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      int[] intArray0 = new int[8];
      try { 
        statement0.executeUpdate("IC5{|^", intArray0);
        fail("Expecting exception: NotImplementedException");
      
      } catch(NotImplementedException e) {
         //
         // executeUpdate not implemented
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 24
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.getConnection()Ljava/sql/Connection;: root-Branch
   */

	@Test(timeout=300000)
  public void test24()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.getConnection();
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(0, statement0.getMaxRows());
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals(0, statement0.getFetchSize());
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.addBatch(Ljava/lang/String;)V: I4 Branch 1 IFNONNULL L133 - true
   * Goal 3. org.objectweb.cjdbc.driver.Statement.addBatch(Ljava/lang/String;)V: I4 Branch 1 IFNONNULL L133 - false
   */

	@Test(timeout=300000)
  public void test25()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.addBatch("e");
      statement0.addBatch("e");
      assertEquals(0, statement0.getFetchSize());
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals(0, statement0.getMaxRows());
      assertEquals(1000, statement0.getFetchDirection());
  }

  //Test case number: 26
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.clearBatch()V: I4 Branch 2 IFNULL L156 - true
   */

	@Test(timeout=300000)
  public void test26()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.clearBatch();
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(0, statement0.getFetchSize());
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(0, statement0.getMaxRows());
      assertEquals(0, statement0.getMaxFieldSize());
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.clearBatch()V: I4 Branch 2 IFNULL L156 - false
   */

	@Test(timeout=300000)
  public void test27()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      Vector<Panel> vector0 = new Vector<Panel>();
      statement0.batch = vector0;
      statement0.clearBatch();
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(0, statement0.getMaxRows());
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(0, statement0.getFetchSize());
      assertEquals(1007, statement0.getResultSetConcurrency());
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.executeBatch()[I: I4 Branch 3 IFNULL L183 - true
   */

	@Test(timeout=300000)
  public void test28()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      int[] intArray0 = statement0.executeBatch();
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(0, statement0.getFetchSize());
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(0, statement0.getMaxRows());
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(1003, statement0.getResultSetType());
      assertArrayEquals(new int[] {}, intArray0);
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.executeBatch()[I: I4 Branch 3 IFNULL L183 - false
   * Goal 3. org.objectweb.cjdbc.driver.Statement.executeBatch()[I: I8 Branch 4 IFEQ L183 - false
   */

	@Test(timeout=300000)
  public void test29()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      Vector<Panel> vector0 = new Vector<Panel>();
      statement0.batch = vector0;
      int[] intArray0 = statement0.executeBatch();
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(0, statement0.getFetchSize());
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(0, statement0.getMaxRows());
      assertArrayEquals(new int[] {}, intArray0);
  }

  //Test case number: 30
  /*
   * 8 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.executeUpdate(Ljava/lang/String;)I: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Statement.addBatch(Ljava/lang/String;)V: I4 Branch 1 IFNONNULL L133 - false
   * Goal 4. org.objectweb.cjdbc.driver.Statement.executeBatch()[I: I4 Branch 3 IFNULL L183 - false
   * Goal 5. org.objectweb.cjdbc.driver.Statement.executeBatch()[I: I8 Branch 4 IFEQ L183 - true
   * Goal 6. org.objectweb.cjdbc.driver.Statement.executeBatch()[I: I36 Branch 5 IF_ICMPGE L192 - false
   * Goal 7. org.objectweb.cjdbc.driver.Statement.executeUpdateWithSkeleton(Ljava/lang/String;Ljava/lang/String;)I: I4 Branch 19 IFEQ L361 - false
   * Goal 8. org.objectweb.cjdbc.driver.Statement.isClosed()Z: I4 Branch 57 IFNONNULL L1016 - false
   */

	@Test(timeout=300000)
  public void test30()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.addBatch("v)\"c.q");
      try { 
        statement0.executeBatch();
        fail("Expecting exception: BatchUpdateException");
      
      } catch(BatchUpdateException e) {
         //
         // Batch failed for request 0: v)\"c.q (java.sql.SQLException: Unable to execute query on a closed statement)
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.close()V: I4 Branch 6 IFNULL L226 - true
   */

	@Test(timeout=300000)
  public void test31()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.close();
      assertEquals(0, statement0.getMaxRows());
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(0, statement0.getFetchSize());
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(0, statement0.getMaxFieldSize());
  }

  //Test case number: 32
  /*
   * 9 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.executeUpdate(Ljava/lang/String;)I: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;)Z: I10 Branch 7 IF_ICMPNE L247 - true
   * Goal 4. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;)Z: I10 Branch 7 IF_ICMPNE L247 - false
   * Goal 5. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;)Z: I34 Branch 8 IFGT L257 - false
   * Goal 6. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;)Z: I42 Branch 9 IFGT L257 - false
   * Goal 7. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;)Z: I50 Branch 10 IFLE L257 - true
   * Goal 8. org.objectweb.cjdbc.driver.Statement.executeUpdateWithSkeleton(Ljava/lang/String;Ljava/lang/String;)I: I4 Branch 19 IFEQ L361 - false
   * Goal 9. org.objectweb.cjdbc.driver.Statement.isClosed()Z: I4 Branch 57 IFNONNULL L1016 - false
   */

	@Test(timeout=300000)
  public void test32()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      try { 
        statement0.execute("(]LUEg+-}5dw");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Unable to execute query on a closed statement
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 33
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;)Z: I10 Branch 7 IF_ICMPNE L247 - true
   * Goal 4. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;)Z: I34 Branch 8 IFGT L257 - true
   * Goal 5. org.objectweb.cjdbc.driver.Statement.executeQuery(Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;: I4 Branch 11 IFEQ L296 - false
   * Goal 6. org.objectweb.cjdbc.driver.Statement.isClosed()Z: I4 Branch 57 IFNONNULL L1016 - false
   */

	@Test(timeout=300000)
  public void test33()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      try { 
        statement0.execute("select6em +u>sc");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Unable to execute query on a closed statement
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 34
  /*
   * 7 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;)Z: I10 Branch 7 IF_ICMPNE L247 - true
   * Goal 4. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;)Z: I34 Branch 8 IFGT L257 - false
   * Goal 5. org.objectweb.cjdbc.driver.Statement.execute(Ljava/lang/String;)Z: I42 Branch 9 IFGT L257 - true
   * Goal 6. org.objectweb.cjdbc.driver.Statement.executeQuery(Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;: I4 Branch 11 IFEQ L296 - false
   * Goal 7. org.objectweb.cjdbc.driver.Statement.isClosed()Z: I4 Branch 57 IFNONNULL L1016 - false
   */

	@Test(timeout=300000)
  public void test34()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      try { 
        statement0.execute("{call failed for request ");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Unable to execute query on a closed statement
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 35
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.getMoreResults()Z: I4 Branch 40 IFNULL L509 - true
   */

	@Test(timeout=300000)
  public void test35()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      boolean boolean0 = statement0.getMoreResults();
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(-1, statement0.getUpdateCount());
      assertFalse(boolean0);
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(0, statement0.getFetchSize());
      assertEquals(0, statement0.getMaxRows());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(1000, statement0.getFetchDirection());
  }

  //Test case number: 36
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setFetchDirection(I)V: I4 Branch 41 IF_ICMPEQ L628 - true
   */

	@Test(timeout=300000)
  public void test36()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.setFetchDirection(1000);
      assertEquals(0, statement0.getFetchSize());
      assertEquals(0, statement0.getMaxRows());
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals(-1, statement0.getUpdateCount());
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(1007, statement0.getResultSetConcurrency());
  }

  //Test case number: 37
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setFetchDirection(I)V: I4 Branch 41 IF_ICMPEQ L628 - false
   * Goal 3. org.objectweb.cjdbc.driver.Statement.setFetchDirection(I)V: I7 Branch 42 IF_ICMPEQ L628 - false
   * Goal 4. org.objectweb.cjdbc.driver.Statement.setFetchDirection(I)V: I10 Branch 43 IF_ICMPNE L628 - false
   */

	@Test(timeout=300000)
  public void test37()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.setFetchDirection(1002);
      assertEquals(1002, statement0.getFetchDirection());
  }

  //Test case number: 38
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setFetchDirection(I)V: I4 Branch 41 IF_ICMPEQ L628 - false
   * Goal 3. org.objectweb.cjdbc.driver.Statement.setFetchDirection(I)V: I7 Branch 42 IF_ICMPEQ L628 - true
   */

	@Test(timeout=300000)
  public void test38()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      assertEquals(1000, statement0.getFetchDirection());
      
      statement0.setFetchDirection(1001);
      assertEquals(1001, statement0.getFetchDirection());
  }

  //Test case number: 39
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setFetchDirection(I)V: I4 Branch 41 IF_ICMPEQ L628 - false
   * Goal 3. org.objectweb.cjdbc.driver.Statement.setFetchDirection(I)V: I7 Branch 42 IF_ICMPEQ L628 - false
   * Goal 4. org.objectweb.cjdbc.driver.Statement.setFetchDirection(I)V: I10 Branch 43 IF_ICMPNE L628 - true
   */

	@Test(timeout=300000)
  public void test39()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      try { 
        statement0.setFetchDirection(1004);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Unsupported direction 1004 in setFetchDirection
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 40
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setFetchSize(I)V: I3 Branch 44 IFLT L646 - true
   */

	@Test(timeout=300000)
  public void test40()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      try { 
        statement0.setFetchSize((-3));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid fetch size value: -3
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 41
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setFetchSize(I)V: I3 Branch 44 IFLT L646 - false
   * Goal 3. org.objectweb.cjdbc.driver.Statement.setFetchSize(I)V: I7 Branch 45 IF_ICMPGE L646 - true
   */

	@Test(timeout=300000)
  public void test41()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.setFetchSize(1002);
      assertEquals(1002, statement0.getFetchSize());
  }

  //Test case number: 42
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setFetchSize(I)V: I3 Branch 44 IFLT L646 - false
   * Goal 3. org.objectweb.cjdbc.driver.Statement.setFetchSize(I)V: I7 Branch 45 IF_ICMPGE L646 - false
   * Goal 4. org.objectweb.cjdbc.driver.Statement.setFetchSize(I)V: I11 Branch 46 IF_ICMPGE L646 - false
   * Goal 5. org.objectweb.cjdbc.driver.Statement.setMaxRows(I)V: I3 Branch 48 IFGE L684 - true
   */

	@Test(timeout=300000)
  public void test42()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.setMaxRows(1002);
      try { 
        statement0.setFetchSize(1003);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid fetch size value: 1003
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 43
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setFetchSize(I)V: I3 Branch 44 IFLT L646 - false
   * Goal 3. org.objectweb.cjdbc.driver.Statement.setFetchSize(I)V: I7 Branch 45 IF_ICMPGE L646 - false
   * Goal 4. org.objectweb.cjdbc.driver.Statement.setFetchSize(I)V: I11 Branch 46 IF_ICMPGE L646 - true
   * Goal 5. org.objectweb.cjdbc.driver.Statement.setMaxRows(I)V: I3 Branch 48 IFGE L684 - true
   */

	@Test(timeout=300000)
  public void test43()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.setMaxRows(1002);
      statement0.setFetchSize(55);
      assertEquals(1002, statement0.getMaxRows());
  }

  //Test case number: 44
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setMaxFieldSize(I)V: I3 Branch 47 IFGE L667 - true
   */

	@Test(timeout=300000)
  public void test44()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.setMaxFieldSize(553);
      assertEquals(553, statement0.getMaxFieldSize());
  }

  //Test case number: 45
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setMaxFieldSize(I)V: I3 Branch 47 IFGE L667 - false
   */

	@Test(timeout=300000)
  public void test45()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      try { 
        statement0.setMaxFieldSize((-1909));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid max field size value: -1909
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 46
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setMaxRows(I)V: I3 Branch 48 IFGE L684 - false
   */

	@Test(timeout=300000)
  public void test46()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      try { 
        statement0.setMaxRows((-553));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid max rows limit: -553
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 47
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setQueryTimeout(I)V: I3 Branch 49 IFGE L702 - true
   */

	@Test(timeout=300000)
  public void test47()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.setQueryTimeout(975);
      assertEquals(975, statement0.getQueryTimeout());
  }

  //Test case number: 48
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setQueryTimeout(I)V: I3 Branch 49 IFGE L702 - false
   */

	@Test(timeout=300000)
  public void test48()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      try { 
        statement0.setQueryTimeout((-2154));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid query timeout value: -2154
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 49
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setResultSetConcurrency(I)V: I3 Branch 50 LOOKUPSWITCH L715 Case 1007 - true
   * Goal 3. org.objectweb.cjdbc.driver.Statement.setResultSetConcurrency(I)V: I3 Branch 51 LOOKUPSWITCH L715 Case 1008 - false
   * Goal 4. org.objectweb.cjdbc.driver.Statement.setResultSetConcurrency(I)V: I3 Branch 52 LOOKUPSWITCH L715 Default-Case - false
   */

	@Test(timeout=300000)
  public void test49()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.setResultSetConcurrency(1007);
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(0, statement0.getFetchSize());
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(-1, statement0.getUpdateCount());
  }

  //Test case number: 50
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setResultSetConcurrency(I)V: I3 Branch 50 LOOKUPSWITCH L715 Case 1007 - false
   * Goal 3. org.objectweb.cjdbc.driver.Statement.setResultSetConcurrency(I)V: I3 Branch 51 LOOKUPSWITCH L715 Case 1008 - true
   * Goal 4. org.objectweb.cjdbc.driver.Statement.setResultSetConcurrency(I)V: I3 Branch 52 LOOKUPSWITCH L715 Default-Case - false
   */

	@Test(timeout=300000)
  public void test50()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      assertEquals(1007, statement0.getResultSetConcurrency());
      
      statement0.setResultSetConcurrency(1008);
      assertEquals(1008, statement0.getResultSetConcurrency());
  }

  //Test case number: 51
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setResultSetConcurrency(I)V: I3 Branch 50 LOOKUPSWITCH L715 Case 1007 - false
   * Goal 3. org.objectweb.cjdbc.driver.Statement.setResultSetConcurrency(I)V: I3 Branch 51 LOOKUPSWITCH L715 Case 1008 - false
   * Goal 4. org.objectweb.cjdbc.driver.Statement.setResultSetConcurrency(I)V: I3 Branch 52 LOOKUPSWITCH L715 Default-Case - true
   */

	@Test(timeout=300000)
  public void test51()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      try { 
        statement0.setResultSetConcurrency(0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid ResultSet concurrency mode: 0
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 52
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setResultSetType(I)V: I3 Branch 53 TABLESWITCH L733 Case 1003 - true
   * Goal 3. org.objectweb.cjdbc.driver.Statement.setResultSetType(I)V: I3 Branch 54 TABLESWITCH L733 Case 1004 - false
   * Goal 4. org.objectweb.cjdbc.driver.Statement.setResultSetType(I)V: I3 Branch 55 TABLESWITCH L733 Case 1005 - false
   * Goal 5. org.objectweb.cjdbc.driver.Statement.setResultSetType(I)V: I3 Branch 56 TABLESWITCH L733 Default-Case - false
   */

	@Test(timeout=300000)
  public void test52()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      statement0.setResultSetType(1003);
      assertEquals(1000, statement0.getFetchDirection());
      assertEquals(1007, statement0.getResultSetConcurrency());
      assertEquals(0, statement0.getQueryTimeout());
      assertEquals(1003, statement0.getResultSetType());
      assertEquals(0, statement0.getFetchSize());
      assertEquals(0, statement0.getMaxFieldSize());
      assertEquals(-1, statement0.getUpdateCount());
  }

  //Test case number: 53
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setResultSetType(I)V: I3 Branch 53 TABLESWITCH L733 Case 1003 - false
   * Goal 3. org.objectweb.cjdbc.driver.Statement.setResultSetType(I)V: I3 Branch 54 TABLESWITCH L733 Case 1004 - false
   * Goal 4. org.objectweb.cjdbc.driver.Statement.setResultSetType(I)V: I3 Branch 55 TABLESWITCH L733 Case 1005 - true
   * Goal 5. org.objectweb.cjdbc.driver.Statement.setResultSetType(I)V: I3 Branch 56 TABLESWITCH L733 Default-Case - false
   */

	@Test(timeout=300000)
  public void test53()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      try { 
        statement0.setResultSetType(1005);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // TYPE_SCROLL_SENSITIVE is not a supported ResultSet type
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }

  //Test case number: 54
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setResultSetType(I)V: I3 Branch 53 TABLESWITCH L733 Case 1003 - false
   * Goal 3. org.objectweb.cjdbc.driver.Statement.setResultSetType(I)V: I3 Branch 54 TABLESWITCH L733 Case 1004 - true
   * Goal 4. org.objectweb.cjdbc.driver.Statement.setResultSetType(I)V: I3 Branch 55 TABLESWITCH L733 Case 1005 - false
   * Goal 5. org.objectweb.cjdbc.driver.Statement.setResultSetType(I)V: I3 Branch 56 TABLESWITCH L733 Default-Case - false
   */

	@Test(timeout=300000)
  public void test54()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      assertEquals(1003, statement0.getResultSetType());
      
      statement0.setResultSetType(1004);
      assertEquals(1004, statement0.getResultSetType());
  }

  //Test case number: 55
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.driver.Statement.<init>(Lorg/objectweb/cjdbc/driver/Connection;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.driver.Statement.setResultSetType(I)V: I3 Branch 53 TABLESWITCH L733 Case 1003 - false
   * Goal 3. org.objectweb.cjdbc.driver.Statement.setResultSetType(I)V: I3 Branch 54 TABLESWITCH L733 Case 1004 - false
   * Goal 4. org.objectweb.cjdbc.driver.Statement.setResultSetType(I)V: I3 Branch 55 TABLESWITCH L733 Case 1005 - false
   * Goal 5. org.objectweb.cjdbc.driver.Statement.setResultSetType(I)V: I3 Branch 56 TABLESWITCH L733 Default-Case - true
   */

	@Test(timeout=300000)
  public void test55()  throws Throwable  {
      Statement statement0 = new Statement((Connection) null);
      try { 
        statement0.setResultSetType(1001);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid ResultSet type
         //
         assertThrownBy("org.objectweb.cjdbc.driver.Statement", e);
      }
  }
}
