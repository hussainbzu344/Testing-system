/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 19 02:09:32 GMT 2016
 */

package org.objectweb.cjdbc.controller.scheduler.raidb1;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.AbstractWriteRequest;
import org.objectweb.cjdbc.common.sql.InsertRequest;
import org.objectweb.cjdbc.common.sql.SelectRequest;
import org.objectweb.cjdbc.common.sql.StoredProcedure;
import org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RAIDb1QueryLevelScheduler_ESTest extends RAIDb1QueryLevelScheduler_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.setSavepointTransaction(JLjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      rAIDb1QueryLevelScheduler0.setSavepointTransaction(1746L, " scheduled for write (");
      assertFalse(rAIDb1QueryLevelScheduler0.isSuspendedWrites());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.rollbackTransaction(J)V: root-Branch
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      rAIDb1QueryLevelScheduler0.rollbackTransaction(0L);
      assertEquals(0, rAIDb1QueryLevelScheduler0.getNumberRead());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.rollbackTransaction(JLjava/lang/String;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      rAIDb1QueryLevelScheduler0.rollbackTransaction(0L, "fw` )UWW&OvH{Jn<Or:");
      assertEquals(0, rAIDb1QueryLevelScheduler0.getNumberWrite());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.releaseSavepointTransaction(JLjava/lang/String;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      rAIDb1QueryLevelScheduler0.releaseSavepointTransaction(0L, "T<3-jNJuC$*zKGV");
      assertEquals(0, rAIDb1QueryLevelScheduler0.getParsingGranularity());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.getXmlImpl()Ljava/lang/String;: root-Branch
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      String string0 = rAIDb1QueryLevelScheduler0.getXml();
      assertEquals("<RequestScheduler><RAIDb-1Scheduler level=\"query\"/></RequestScheduler>", string0);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.commitTransaction(J)V: root-Branch
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      rAIDb1QueryLevelScheduler0.commitTransaction(0L);
      assertEquals(0, rAIDb1QueryLevelScheduler0.getParsingGranularity());
  }

  //Test case number: 6
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I11 Branch 1 IFNE L99 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I101 Branch 4 IFEQ L118 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.scheduleNonSuspendedStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I18 Branch 18 IFNE L248 - false
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.scheduleNonSuspendedStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I34 Branch 19 IFEQ L251 - true
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure((String) null, true, (-3), (String) null, false);
      rAIDb1QueryLevelScheduler0.scheduleStoredProcedure(storedProcedure0);
      // Undeclared exception!
      try { 
        rAIDb1QueryLevelScheduler0.scheduleReadRequest((SelectRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler", e);
      }
  }

  //Test case number: 7
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I11 Branch 1 IFNE L99 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I42 Branch 2 IFEQ L105 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.readCompletedNotify(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I19 Branch 9 IFEQ L174 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.readCompletedNotify(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I44 Branch 10 IFNE L177 - false
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.readCompletedNotify(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I49 Branch 11 IFEQ L179 - true
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      SelectRequest selectRequest0 = new SelectRequest("fw` )UWW&OvH{Jn<Or:", true, 3731, (String) null);
      rAIDb1QueryLevelScheduler0.scheduleReadRequest(selectRequest0);
      rAIDb1QueryLevelScheduler0.readCompletedNotify(selectRequest0);
      assertEquals(0L, selectRequest0.getId());
  }

  //Test case number: 8
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.readCompletedNotify(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I19 Branch 9 IFEQ L174 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.readCompletedNotify(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I44 Branch 10 IFNE L177 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I18 Branch 12 IFNE L198 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.waitForReadCompletion(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)V: I11 Branch 24 IFEQ L299 - true
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      SelectRequest selectRequest0 = new SelectRequest("", false, 2708, "");
      rAIDb1QueryLevelScheduler0.readCompletedNotify(selectRequest0);
      // Undeclared exception!
      try { 
        rAIDb1QueryLevelScheduler0.scheduleNonSuspendedWriteRequest((AbstractWriteRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler", e);
      }
  }

  //Test case number: 9
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I18 Branch 12 IFNE L198 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I34 Branch 13 IFEQ L201 - true
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      InsertRequest insertRequest0 = new InsertRequest("", false, (int) (byte)0, "", false);
      rAIDb1QueryLevelScheduler0.scheduleNonSuspendedWriteRequest(insertRequest0);
      assertEquals(0L, insertRequest0.getId());
  }

  //Test case number: 10
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I11 Branch 15 IFEQ L224 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I36 Branch 16 IFNE L227 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I41 Branch 17 IFEQ L229 - true
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      InsertRequest insertRequest0 = new InsertRequest("", false, (int) (byte)0, "", false);
      rAIDb1QueryLevelScheduler0.notifyWriteCompleted(insertRequest0);
      assertEquals(0, insertRequest0.getFetchSize());
  }

  //Test case number: 11
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I11 Branch 15 IFEQ L224 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I36 Branch 16 IFNE L227 - true
   */

	@Test(timeout=300000)
  public void test11()  throws Throwable  {
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      rAIDb1QueryLevelScheduler0.commitCompleted((-1L));
      InsertRequest insertRequest0 = new InsertRequest("", false, (int) (byte)0, "", false);
      rAIDb1QueryLevelScheduler0.notifyWriteCompleted(insertRequest0);
      assertNull(insertRequest0.getPk());
  }

  //Test case number: 12
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.readCompletedNotify(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I19 Branch 9 IFEQ L174 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.readCompletedNotify(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I44 Branch 10 IFNE L177 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.scheduleNonSuspendedStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I18 Branch 18 IFNE L248 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.waitForReadCompletion(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)V: I11 Branch 24 IFEQ L299 - true
   */

	@Test(timeout=300000)
  public void test12()  throws Throwable  {
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      SelectRequest selectRequest0 = new SelectRequest("", false, 2708, "");
      rAIDb1QueryLevelScheduler0.readCompletedNotify(selectRequest0);
      // Undeclared exception!
      try { 
        rAIDb1QueryLevelScheduler0.scheduleNonSuspendedStoredProcedure((StoredProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler", e);
      }
  }

  //Test case number: 13
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I11 Branch 21 IFEQ L273 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I36 Branch 22 IFNE L276 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I41 Branch 23 IFEQ L278 - true
   */

	@Test(timeout=300000)
  public void test13()  throws Throwable  {
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure("n{'Ljuzi1T", true, 3731, "Q7=", true);
      rAIDb1QueryLevelScheduler0.notifyStoredProcedureCompleted(storedProcedure0);
      assertTrue(storedProcedure0.mightBlock());
  }

  //Test case number: 14
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I11 Branch 21 IFEQ L273 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I36 Branch 22 IFNE L276 - true
   */

	@Test(timeout=300000)
  public void test14()  throws Throwable  {
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      rAIDb1QueryLevelScheduler0.commitCompleted((-1L));
      StoredProcedure storedProcedure0 = new StoredProcedure("", true, 0, " pending writes", false);
      rAIDb1QueryLevelScheduler0.notifyStoredProcedureCompleted(storedProcedure0);
      assertEquals(-1, rAIDb1QueryLevelScheduler0.getPendingTransactions());
  }
}
