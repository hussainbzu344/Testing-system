/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 18 20:07:47 GMT 2016
 */

package org.objectweb.cjdbc.controller.recoverylog;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.controller.recoverylog.LoggerThread;
import org.objectweb.cjdbc.controller.recoverylog.RecoveryLog;
import org.objectweb.cjdbc.controller.recoverylog.events.LogEntry;
import org.objectweb.cjdbc.controller.recoverylog.events.StoreDumpCheckpointEvent;
import org.objectweb.cjdbc.controller.recoverylog.events.UnlogRequestEvent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class LoggerThread_ESTest extends LoggerThread_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.shutdown()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.invalidateLogStatements()V: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.<init>(Lorg/objectweb/cjdbc/controller/recoverylog/RecoveryLog;)V: root-Branch
   * Goal 4. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.run()V: I4 Branch 23 IFNE L425 - true
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      LoggerThread loggerThread0 = new LoggerThread((RecoveryLog) null);
      loggerThread0.shutdown();
      // Undeclared exception!
      try { 
        loggerThread0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.recoverylog.LoggerThread", e);
      }
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.getLogger()Lorg/objectweb/cjdbc/common/log/Trace;: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.<init>(Lorg/objectweb/cjdbc/controller/recoverylog/RecoveryLog;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.getUnlogPreparedStatement()Ljava/sql/PreparedStatement;: I4 Branch 3 IFNONNULL L133 - false
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      LoggerThread loggerThread0 = new LoggerThread((RecoveryLog) null);
      LogEntry logEntry0 = new LogEntry((-702L), "Value is out of range for min/max", "Q'c.{@", (-2566L), true);
      UnlogRequestEvent unlogRequestEvent0 = new UnlogRequestEvent(logEntry0);
      // Undeclared exception!
      try { 
        unlogRequestEvent0.execute(loggerThread0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.recoverylog.LoggerThread", e);
      }
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.getRecoveryLog()Lorg/objectweb/cjdbc/controller/recoverylog/RecoveryLog;: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.<init>(Lorg/objectweb/cjdbc/controller/recoverylog/RecoveryLog;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      LoggerThread loggerThread0 = new LoggerThread((RecoveryLog) null);
      RecoveryLog recoveryLog0 = loggerThread0.getRecoveryLog();
      assertNull(recoveryLog0);
  }

  //Test case number: 3
  /*
   * 8 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.<init>(Lorg/objectweb/cjdbc/controller/recoverylog/RecoveryLog;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.log(Lorg/objectweb/cjdbc/controller/recoverylog/events/LogEvent;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.getLogQueueIsEmpty()Z: I5 Branch 1 IFEQ L82 - true
   * Goal 4. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.storeCheckpoint(Ljava/lang/String;J)V: I9 Branch 13 IFEQ L312 - true
   * Goal 5. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.storeCheckpoint(Ljava/lang/String;J)V: I107 Branch 16 IFNULL L333 - true
   * Goal 6. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.run()V: I4 Branch 23 IFNE L425 - false
   * Goal 7. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.run()V: I15 Branch 24 IFEQ L429 - true
   * Goal 8. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.run()V: I44 Branch 26 IFEQ L440 - true
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      LoggerThread loggerThread0 = new LoggerThread((RecoveryLog) null);
      StoreDumpCheckpointEvent storeDumpCheckpointEvent0 = new StoreDumpCheckpointEvent("Invalid number of controllers (", 0L);
      loggerThread0.log(storeDumpCheckpointEvent0);
      // Undeclared exception!
      try { 
        loggerThread0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.recoverylog.LoggerThread", e);
      }
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.<init>(Lorg/objectweb/cjdbc/controller/recoverylog/RecoveryLog;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.putBackAtHeadOfQueue(Lorg/objectweb/cjdbc/controller/recoverylog/events/LogEvent;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      LoggerThread loggerThread0 = new LoggerThread((RecoveryLog) null);
      LogEntry logEntry0 = new LogEntry((-1018L), "INSERT INTO ", "INSERT INTO ", (-1231L), false);
      UnlogRequestEvent unlogRequestEvent0 = new UnlogRequestEvent(logEntry0);
      loggerThread0.putBackAtHeadOfQueue(unlogRequestEvent0);
      assertFalse(loggerThread0.isDaemon());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.<init>(Lorg/objectweb/cjdbc/controller/recoverylog/RecoveryLog;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.getLogQueueIsEmpty()Z: I5 Branch 1 IFEQ L82 - false
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      LoggerThread loggerThread0 = new LoggerThread((RecoveryLog) null);
      boolean boolean0 = loggerThread0.getLogQueueIsEmpty();
      assertTrue(boolean0);
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.<init>(Lorg/objectweb/cjdbc/controller/recoverylog/RecoveryLog;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.getLogPreparedStatement()Ljava/sql/PreparedStatement;: I4 Branch 2 IFNONNULL L104 - false
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      LoggerThread loggerThread0 = new LoggerThread((RecoveryLog) null);
      // Undeclared exception!
      try { 
        loggerThread0.getLogPreparedStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.recoverylog.LoggerThread", e);
      }
  }

  //Test case number: 7
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.<init>(Lorg/objectweb/cjdbc/controller/recoverylog/RecoveryLog;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.log(Lorg/objectweb/cjdbc/controller/recoverylog/events/LogEvent;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.removeQueriesOfTransactionFromQueue(J)V: I5 Branch 4 IFEQ L205 - true
   * Goal 4. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.removeQueriesOfTransactionFromQueue(J)V: I23 Branch 5 IF_ICMPGE L208 - true
   * Goal 5. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.removeQueriesOfTransactionFromQueue(J)V: I23 Branch 5 IF_ICMPGE L208 - false
   * Goal 6. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.removeQueriesOfTransactionFromQueue(J)V: I37 Branch 6 IFEQ L211 - true
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      LoggerThread loggerThread0 = new LoggerThread((RecoveryLog) null);
      StoreDumpCheckpointEvent storeDumpCheckpointEvent0 = new StoreDumpCheckpointEvent("Invalid number of controllers (", 0L);
      loggerThread0.log(storeDumpCheckpointEvent0);
      loggerThread0.removeQueriesOfTransactionFromQueue(0L);
      assertFalse(loggerThread0.isInterrupted());
  }

  //Test case number: 8
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.<init>(Lorg/objectweb/cjdbc/controller/recoverylog/RecoveryLog;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.removeQueriesOfTransactionFromQueue(J)V: I5 Branch 4 IFEQ L205 - true
   * Goal 3. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.removeQueriesOfTransactionFromQueue(J)V: I23 Branch 5 IF_ICMPGE L208 - true
   * Goal 4. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.removeRollbackedTransaction(J)V: I80 Branch 9 IFNULL L251 - true
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      LoggerThread loggerThread0 = new LoggerThread((RecoveryLog) null);
      // Undeclared exception!
      try { 
        loggerThread0.removeRollbackedTransaction((-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.recoverylog.LoggerThread", e);
      }
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.<init>(Lorg/objectweb/cjdbc/controller/recoverylog/RecoveryLog;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.deleteCheckpointTable()V: I65 Branch 12 IFNULL L285 - true
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      LoggerThread loggerThread0 = new LoggerThread((RecoveryLog) null);
      // Undeclared exception!
      try { 
        loggerThread0.deleteCheckpointTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.recoverylog.LoggerThread", e);
      }
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.<init>(Lorg/objectweb/cjdbc/controller/recoverylog/RecoveryLog;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.deleteLogEntriesBeforeId(J)V: I75 Branch 19 IFNULL L371 - true
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      LoggerThread loggerThread0 = new LoggerThread((RecoveryLog) null);
      // Undeclared exception!
      try { 
        loggerThread0.deleteLogEntriesBeforeId(3591L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.recoverylog.LoggerThread", e);
      }
  }

  //Test case number: 11
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.<init>(Lorg/objectweb/cjdbc/controller/recoverylog/RecoveryLog;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.recoverylog.LoggerThread.shiftLogEntriesIds(J)V: I75 Branch 22 IFNULL L408 - true
   */

	@Test(timeout=300000)
  public void test11()  throws Throwable  {
      LoggerThread loggerThread0 = new LoggerThread((RecoveryLog) null);
      // Undeclared exception!
      try { 
        loggerThread0.shiftLogEntriesIds(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.recoverylog.LoggerThread", e);
      }
  }
}
