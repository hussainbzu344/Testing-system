/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 19 02:03:29 GMT 2016
 */

package org.objectweb.cjdbc.controller.scheduler.raidb1;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.CreateRequest;
import org.objectweb.cjdbc.common.sql.DeleteRequest;
import org.objectweb.cjdbc.common.sql.DropRequest;
import org.objectweb.cjdbc.common.sql.SelectRequest;
import org.objectweb.cjdbc.common.sql.StoredProcedure;
import org.objectweb.cjdbc.common.sql.schema.DatabaseSchema;
import org.objectweb.cjdbc.controller.requestmanager.TransactionMarkerMetaData;
import org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RAIDb1PessimisticTransactionLevelScheduler_ESTest extends RAIDb1PessimisticTransactionLevelScheduler_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.getXmlImpl()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      String string0 = rAIDb1PessimisticTransactionLevelScheduler0.getXmlImpl();
      assertEquals("<RAIDb-1Scheduler level=\"pessimisticTransaction\"/>", string0);
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.releaseSavepointTransaction(JLjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      rAIDb1PessimisticTransactionLevelScheduler0.releaseSavepointTransaction(4235L, "org.jfree.data.XYDataPair");
      assertFalse(rAIDb1PessimisticTransactionLevelScheduler0.isSuspendedWrites());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      SelectRequest selectRequest0 = new SelectRequest("LP.PS=Vc", true, 0, "<RAIDb-1Scheduler level=\"pessimisticTransaction\"/>", (DatabaseSchema) null, 0, true);
      rAIDb1PessimisticTransactionLevelScheduler0.scheduleReadRequest(selectRequest0);
      assertEquals(0, rAIDb1PessimisticTransactionLevelScheduler0.getNumberWrite());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.readCompletedNotify(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      SelectRequest selectRequest0 = new SelectRequest("JD<0S)< NzEN}M", true, 151, "JD<0S)< NzEN}M");
      rAIDb1PessimisticTransactionLevelScheduler0.readCompletedNotify(selectRequest0);
      assertNull(selectRequest0.getCursorName());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.setSavepointTransaction(JLjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      rAIDb1PessimisticTransactionLevelScheduler0.setSavepointTransaction(1013L, "] is not a subclass of org.apache.log4j.Level");
      assertEquals(0, rAIDb1PessimisticTransactionLevelScheduler0.getPendingTransactions());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.rollbackTransaction(JLjava/lang/String;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      rAIDb1PessimisticTransactionLevelScheduler0.rollbackTransaction(2812L, ">c(]p%IqYcV#srw");
      assertFalse(rAIDb1PessimisticTransactionLevelScheduler0.isSuspendedWrites());
  }

  //Test case number: 6
  /*
   * 8 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 1 IFEQ L114 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I44 Branch 2 IFEQ L123 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I79 Branch 3 IFEQ L129 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.rollbackTransaction(J)V: I5 Branch 13 IFEQ L214 - false
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.releaseLock(J)V: I5 Branch 14 IFEQ L253 - false
   * Goal 7. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.releaseLock(J)V: I13 Branch 15 IFNE L255 - true
   * Goal 8. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.releaseLock(J)V: I24 Branch 16 IFEQ L261 - true
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      DropRequest dropRequest0 = new DropRequest("<RAIDb-1Scheduler level=\"pessimisticTransaction\"/>", false, 0, "<RAIDb-1Scheduler level=\"pessimisticTransaction\"/>");
      rAIDb1PessimisticTransactionLevelScheduler0.scheduleNonSuspendedWriteRequest(dropRequest0);
      rAIDb1PessimisticTransactionLevelScheduler0.rollbackTransaction(1775L);
      assertEquals(0, rAIDb1PessimisticTransactionLevelScheduler0.getNumberRead());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 1 IFEQ L114 - false
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      CreateRequest createRequest0 = new CreateRequest("}q%.TXnB%", false, 509, "}q%.TXnB%", (DatabaseSchema) null, 0, true);
      rAIDb1PessimisticTransactionLevelScheduler0.scheduleNonSuspendedWriteRequest(createRequest0);
      assertFalse(createRequest0.isReadOnly());
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 5 IFEQ L152 - true
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      DropRequest dropRequest0 = new DropRequest("", true, (-4), "");
      rAIDb1PessimisticTransactionLevelScheduler0.notifyWriteCompleted(dropRequest0);
      assertNull(dropRequest0.getSqlSkeleton());
  }

  //Test case number: 9
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 5 IFEQ L152 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I7 Branch 6 IFNE L152 - true
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      CreateRequest createRequest0 = new CreateRequest("fG~|4H}ENcds", true, (-1047), "\u0006SQ%@wH/");
      createRequest0.setIsAutoCommit(true);
      rAIDb1PessimisticTransactionLevelScheduler0.notifyWriteCompleted(createRequest0);
      assertEquals(1, rAIDb1PessimisticTransactionLevelScheduler0.getRAIDbLevel());
  }

  //Test case number: 10
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 5 IFEQ L152 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I7 Branch 6 IFNE L152 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.releaseLock(J)V: I5 Branch 14 IFEQ L253 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.releaseLock(J)V: I48 Branch 17 IFEQ L266 - true
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      DropRequest dropRequest0 = new DropRequest("CimvYut(", true, 1357, "CimvYut(");
      dropRequest0.setIsAutoCommit(true);
      rAIDb1PessimisticTransactionLevelScheduler0.notifyWriteCompleted(dropRequest0);
      assertEquals(0, rAIDb1PessimisticTransactionLevelScheduler0.getParsingGranularity());
  }

  //Test case number: 11
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.scheduleNonSuspendedStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I6 Branch 7 IFEQ L162 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.scheduleNonSuspendedStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I41 Branch 8 IFEQ L168 - true
   */

	@Test(timeout=300000)
  public void test11()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure("/)9.8!6EVJ3", true, (-1087), "/)9.8!6EVJ3", true);
      rAIDb1PessimisticTransactionLevelScheduler0.scheduleStoredProcedure(storedProcedure0);
      assertFalse(storedProcedure0.isAutoCommit());
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I4 Branch 10 IFEQ L191 - true
   */

	@Test(timeout=300000)
  public void test12()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure("", false, (-3975), "kCl", false);
      rAIDb1PessimisticTransactionLevelScheduler0.notifyStoredProcedureCompleted(storedProcedure0);
      assertEquals(0, rAIDb1PessimisticTransactionLevelScheduler0.getNumberRead());
  }

  //Test case number: 13
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I4 Branch 10 IFEQ L191 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I7 Branch 11 IFNE L191 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.releaseLock(J)V: I5 Branch 14 IFEQ L253 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.releaseLock(J)V: I48 Branch 17 IFEQ L266 - true
   */

	@Test(timeout=300000)
  public void test13()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure("/)9.8!6EVJ3", true, (-1087), "/)9.8!6EVJ3", true);
      storedProcedure0.setIsAutoCommit(true);
      rAIDb1PessimisticTransactionLevelScheduler0.notifyStoredProcedureCompleted(storedProcedure0);
      assertTrue(storedProcedure0.mightBlock());
  }

  //Test case number: 14
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.commitTransaction(J)V: I5 Branch 12 IFEQ L204 - true
   */

	@Test(timeout=300000)
  public void test14()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData(4052L, 4052L, "column value ");
      rAIDb1PessimisticTransactionLevelScheduler0.commit(transactionMarkerMetaData0);
      assertEquals("<RAIDb-1Scheduler level=\"pessimisticTransaction\"/>", rAIDb1PessimisticTransactionLevelScheduler0.getXmlImpl());
  }

  //Test case number: 15
  /*
   * 8 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 1 IFEQ L114 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I44 Branch 2 IFEQ L123 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I79 Branch 3 IFEQ L129 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.commitTransaction(J)V: I5 Branch 12 IFEQ L204 - false
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.releaseLock(J)V: I5 Branch 14 IFEQ L253 - false
   * Goal 7. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.releaseLock(J)V: I13 Branch 15 IFNE L255 - true
   * Goal 8. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.releaseLock(J)V: I24 Branch 16 IFEQ L261 - true
   */

	@Test(timeout=300000)
  public void test15()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      DeleteRequest deleteRequest0 = new DeleteRequest("/)9.8!6EVJ3", true, (-1087), "/)9.8!6EVJ3");
      rAIDb1PessimisticTransactionLevelScheduler0.scheduleNonSuspendedWriteRequest(deleteRequest0);
      rAIDb1PessimisticTransactionLevelScheduler0.commitTransaction((-1921L));
      assertFalse(rAIDb1PessimisticTransactionLevelScheduler0.isSuspendedWrites());
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.rollbackTransaction(J)V: I5 Branch 13 IFEQ L214 - true
   */

	@Test(timeout=300000)
  public void test16()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      rAIDb1PessimisticTransactionLevelScheduler0.rollbackTransaction((-8L));
      assertFalse(rAIDb1PessimisticTransactionLevelScheduler0.isSuspendedWrites());
  }

  //Test case number: 17
  /*
   * 8 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 1 IFEQ L114 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I44 Branch 2 IFEQ L123 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I79 Branch 3 IFEQ L129 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I4 Branch 10 IFEQ L191 - false
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I7 Branch 11 IFNE L191 - false
   * Goal 7. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.releaseLock(J)V: I5 Branch 14 IFEQ L253 - false
   * Goal 8. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler.releaseLock(J)V: I13 Branch 15 IFNE L255 - false
   */

	@Test(timeout=300000)
  public void test17()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      DeleteRequest deleteRequest0 = new DeleteRequest("/)9.8!6EVJ3", true, (-1087), "/)9.8!6EVJ3");
      rAIDb1PessimisticTransactionLevelScheduler0.scheduleNonSuspendedWriteRequest(deleteRequest0);
      StoredProcedure storedProcedure0 = new StoredProcedure("/)9.8!6EVJ3", true, (-1087), "/)9.8!6EVJ3", true);
      storedProcedure0.setIsAutoCommit(true);
      rAIDb1PessimisticTransactionLevelScheduler0.notifyStoredProcedureCompleted(storedProcedure0);
      assertEquals(0, rAIDb1PessimisticTransactionLevelScheduler0.getNumberWrite());
  }
}
