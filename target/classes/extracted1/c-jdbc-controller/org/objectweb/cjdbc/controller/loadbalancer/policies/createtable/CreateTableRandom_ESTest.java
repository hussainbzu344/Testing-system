/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 18 21:15:35 GMT 2016
 */

package org.objectweb.cjdbc.controller.loadbalancer.policies.createtable;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTableRandom;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CreateTableRandom_ESTest extends CreateTableRandom_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTableRandom.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTableRandom.<init>(Ljava/util/ArrayList;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test0()  throws Throwable  {
      CreateTableRandom createTableRandom0 = new CreateTableRandom();
      ArrayList arrayList0 = createTableRandom0.backendList;
      CreateTableRandom createTableRandom1 = new CreateTableRandom(arrayList0);
      assertEquals(0, createTableRandom1.getPolicy());
  }

  //Test case number: 1
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTableRandom.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTableRandom.getBackends(Ljava/util/ArrayList;)Ljava/util/ArrayList;: I4 Branch 1 IFNE L65 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTableRandom.getBackends(Ljava/util/ArrayList;)Ljava/util/ArrayList;: I25 Branch 2 IF_ICMPNE L72 - true
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTableRandom.getBackends(Ljava/util/ArrayList;)Ljava/util/ArrayList;: I35 Branch 3 IF_ICMPLE L74 - false
   */

	@Test(timeout=300000)
  public void test1()  throws Throwable  {
      CreateTableRandom createTableRandom0 = new CreateTableRandom();
      createTableRandom0.nbOfNodes = 256;
      try { 
        createTableRandom0.getBackends(createTableRandom0.backendList);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Asking for more backends (256) than available (0)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTableRandom", e);
      }
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTableRandom.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTableRandom.getBackends(Ljava/util/ArrayList;)Ljava/util/ArrayList;: I4 Branch 1 IFNE L65 - false
   */

	@Test(timeout=300000)
  public void test2()  throws Throwable  {
      CreateTableRandom createTableRandom0 = new CreateTableRandom();
      ArrayList arrayList0 = createTableRandom0.backendList;
      ArrayList arrayList1 = createTableRandom0.getBackends(arrayList0);
      assertNull(arrayList1);
  }

  //Test case number: 3
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTableRandom.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTableRandom.getBackends(Ljava/util/ArrayList;)Ljava/util/ArrayList;: I4 Branch 1 IFNE L65 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTableRandom.getBackends(Ljava/util/ArrayList;)Ljava/util/ArrayList;: I25 Branch 2 IF_ICMPNE L72 - true
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTableRandom.getBackends(Ljava/util/ArrayList;)Ljava/util/ArrayList;: I35 Branch 3 IF_ICMPLE L74 - true
   */

	@Test(timeout=300000)
  public void test3()  throws Throwable  {
      CreateTableRandom createTableRandom0 = new CreateTableRandom();
      createTableRandom0.nbOfNodes = (-1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        createTableRandom0.getBackends(arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTableRandom.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTableRandom.getInformation()Ljava/lang/String;: I4 Branch 5 IFNONNULL L96 - true
   */

	@Test(timeout=300000)
  public void test4()  throws Throwable  {
      CreateTableRandom createTableRandom0 = new CreateTableRandom();
      createTableRandom0.tableName = "%U";
      String string0 = createTableRandom0.getInformation();
      assertEquals("Rule for table %U create table on 0 node(s) randomly from []", string0);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTableRandom.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTableRandom.getInformation()Ljava/lang/String;: I4 Branch 5 IFNONNULL L96 - false
   */

	@Test(timeout=300000)
  public void test5()  throws Throwable  {
      CreateTableRandom createTableRandom0 = new CreateTableRandom();
      String string0 = createTableRandom0.getInformation();
      assertEquals("Default rule create table on 0 node(s) randomly from []", string0);
  }
}
