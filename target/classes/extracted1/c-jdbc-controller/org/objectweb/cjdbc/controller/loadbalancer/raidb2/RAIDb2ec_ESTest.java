/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 18 22:57:44 GMT 2016
 */

package org.objectweb.cjdbc.controller.loadbalancer.raidb2;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter;
import org.objectweb.cjdbc.common.sql.filters.Base64Filter;
import org.objectweb.cjdbc.common.sql.filters.NoneBlobFilter;
import org.objectweb.cjdbc.controller.backend.DatabaseBackend;
import org.objectweb.cjdbc.controller.connection.VariablePoolConnectionManager;
import org.objectweb.cjdbc.controller.core.Controller;
import org.objectweb.cjdbc.controller.loadbalancer.policies.WaitForCompletionPolicy;
import org.objectweb.cjdbc.controller.loadbalancer.policies.createtable.CreateTablePolicy;
import org.objectweb.cjdbc.controller.loadbalancer.policies.errorchecking.ErrorCheckingPolicy;
import org.objectweb.cjdbc.controller.loadbalancer.policies.errorchecking.ErrorCheckingRandom;
import org.objectweb.cjdbc.controller.loadbalancer.policies.errorchecking.ErrorCheckingRoundRobin;
import org.objectweb.cjdbc.controller.loadbalancer.raidb2.RAIDb2ec_RR;
import org.objectweb.cjdbc.controller.loadbalancer.raidb2.RAIDb2ec_WRR;
import org.objectweb.cjdbc.controller.virtualdatabase.VirtualDatabase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RAIDb2ec_ESTest extends RAIDb2ec_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.raidb2.RAIDb2ec.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;Lorg/objectweb/cjdbc/controller/loadbalancer/policies/WaitForCompletionPolicy;Lorg/objectweb/cjdbc/controller/loadbalancer/policies/createtable/CreateTablePolicy;Lorg/objectweb/cjdbc/controller/loadbalancer/policies/errorchecking/ErrorCheckingPolicy;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.raidb2.RAIDb2ec.disableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;)V: I13 Branch 3 IF_ICMPGE L177 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.raidb2.RAIDb2ec.disableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;)V: I127 Branch 5 IF_ICMPGE L213 - true
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.raidb2.RAIDb2ec.disableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;)V: I236 Branch 7 IFEQ L249 - true
   */

	@Test(timeout=300000)
  public void test0()  throws Throwable  {
      NoneBlobFilter noneBlobFilter0 = new NoneBlobFilter();
      WaitForCompletionPolicy waitForCompletionPolicy0 = new WaitForCompletionPolicy();
      CreateTablePolicy createTablePolicy0 = new CreateTablePolicy();
      ErrorCheckingRoundRobin errorCheckingRoundRobin0 = new ErrorCheckingRoundRobin(2053);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("L Q|Kk]]iA3$](", "L Q|Kk]]iA3$](", "L Q|Kk]]iA3$](", "L Q|Kk]]iA3$](", "L Q|Kk]]iA3$](", false, "L`PFd4/nJ'}");
      Controller controller0 = new Controller("L`PFd4/nJ'}", 2053, 2053);
      VariablePoolConnectionManager variablePoolConnectionManager0 = new VariablePoolConnectionManager("E j-JNUI", "L`PFd4/nJ'}", "TVOt=rxZ]W!{", "TVOt=rxZ]W!{", "L Q|Kk]]iA3$](", "s}pzRr", 789, 789, (-2358), (-840));
      databaseBackend0.addConnectionManager("L`PFd4/nJ'}", variablePoolConnectionManager0);
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "~%ZK'~XrvDlZyUVUq7", (-2358), false, 0, (-2492), (long) (-2358), 3954, (AbstractBlobFilter) noneBlobFilter0);
      RAIDb2ec_RR rAIDb2ec_RR0 = new RAIDb2ec_RR(virtualDatabase0, waitForCompletionPolicy0, createTablePolicy0, (ErrorCheckingPolicy) errorCheckingRoundRobin0, 0);
      rAIDb2ec_RR0.disableBackend(databaseBackend0);
      assertEquals("L Q|Kk]]iA3$](", databaseBackend0.getURL());
  }

  //Test case number: 1
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.raidb2.RAIDb2ec.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;Lorg/objectweb/cjdbc/controller/loadbalancer/policies/WaitForCompletionPolicy;Lorg/objectweb/cjdbc/controller/loadbalancer/policies/createtable/CreateTablePolicy;Lorg/objectweb/cjdbc/controller/loadbalancer/policies/errorchecking/ErrorCheckingPolicy;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.raidb2.RAIDb2ec.disableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;)V: I13 Branch 3 IF_ICMPGE L177 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.raidb2.RAIDb2ec.disableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;)V: I127 Branch 5 IF_ICMPGE L213 - true
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.raidb2.RAIDb2ec.disableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;)V: I236 Branch 7 IFEQ L249 - false
   */

	@Test(timeout=300000)
  public void test1()  throws Throwable  {
      NoneBlobFilter noneBlobFilter0 = new NoneBlobFilter();
      WaitForCompletionPolicy waitForCompletionPolicy0 = new WaitForCompletionPolicy();
      CreateTablePolicy createTablePolicy0 = new CreateTablePolicy();
      ErrorCheckingRoundRobin errorCheckingRoundRobin0 = new ErrorCheckingRoundRobin(2053);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("L Q|Kk]]iA3$](", "L Q|Kk]]iA3$](", "L Q|Kk]]iA3$](", "L Q|Kk]]iA3$](", "L Q|Kk]]iA3$](", false, "L Q|Kk]]iA3$](");
      Controller controller0 = new Controller("L Q|Kk]]iA3$](", 2053, 2053);
      VariablePoolConnectionManager variablePoolConnectionManager0 = new VariablePoolConnectionManager("L Q|Kk]]iA3$](", "L Q|Kk]]iA3$](", "L Q|Kk]]iA3$](", "L Q|Kk]]iA3$](", "L Q|Kk]]iA3$](", "L Q|Kk]]iA3$](", 2053, 2053, 2053, 2053);
      variablePoolConnectionManager0.initializeConnections(2053);
      databaseBackend0.addConnectionManager("L Q|Kk]]iA3$](", variablePoolConnectionManager0);
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "L Q|Kk]]iA3$](", 2053, false, 2053, 2053, (long) 2053, 2053, (AbstractBlobFilter) noneBlobFilter0);
      RAIDb2ec_RR rAIDb2ec_RR0 = new RAIDb2ec_RR(virtualDatabase0, waitForCompletionPolicy0, createTablePolicy0, (ErrorCheckingPolicy) errorCheckingRoundRobin0, 2053);
      rAIDb2ec_RR0.disableBackend(databaseBackend0);
      assertEquals("backend", databaseBackend0.getAssociatedString());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.raidb2.RAIDb2ec.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;Lorg/objectweb/cjdbc/controller/loadbalancer/policies/WaitForCompletionPolicy;Lorg/objectweb/cjdbc/controller/loadbalancer/policies/createtable/CreateTablePolicy;Lorg/objectweb/cjdbc/controller/loadbalancer/policies/errorchecking/ErrorCheckingPolicy;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.raidb2.RAIDb2ec.getXmlImpl()Ljava/lang/String;: I31 Branch 8 IFNULL L263 - true
   */

	@Test(timeout=300000)
  public void test2()  throws Throwable  {
      Controller controller0 = new Controller("", 507, 507);
      Base64Filter base64Filter0 = new Base64Filter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "$}5s", 507, true, 53, 507, (long) 507, 53, (AbstractBlobFilter) base64Filter0);
      CreateTablePolicy createTablePolicy0 = new CreateTablePolicy();
      ErrorCheckingRandom errorCheckingRandom0 = new ErrorCheckingRandom(507);
      RAIDb2ec_WRR rAIDb2ec_WRR0 = new RAIDb2ec_WRR(virtualDatabase0, (WaitForCompletionPolicy) null, createTablePolicy0, (ErrorCheckingPolicy) errorCheckingRandom0, (-1));
      String string0 = rAIDb2ec_WRR0.getXmlImpl();
      assertEquals("<RAIDb-2ec nbOfConcurrentReads=\"-1\"></RAIDb-2ec>", string0);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.raidb2.RAIDb2ec.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;Lorg/objectweb/cjdbc/controller/loadbalancer/policies/WaitForCompletionPolicy;Lorg/objectweb/cjdbc/controller/loadbalancer/policies/createtable/CreateTablePolicy;Lorg/objectweb/cjdbc/controller/loadbalancer/policies/errorchecking/ErrorCheckingPolicy;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.raidb2.RAIDb2ec.getXmlImpl()Ljava/lang/String;: I31 Branch 8 IFNULL L263 - false
   */

	@Test(timeout=300000)
  public void test3()  throws Throwable  {
      Controller controller0 = new Controller("@oKYU{bnzF#", 407, 407);
      Base64Filter base64Filter0 = new Base64Filter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "@oKYU{bnzF#", 407, true, 407, 407, (long) 407, 407, (AbstractBlobFilter) base64Filter0);
      WaitForCompletionPolicy waitForCompletionPolicy0 = new WaitForCompletionPolicy();
      CreateTablePolicy createTablePolicy0 = new CreateTablePolicy();
      ErrorCheckingRandom errorCheckingRandom0 = new ErrorCheckingRandom(407);
      RAIDb2ec_RR rAIDb2ec_RR0 = new RAIDb2ec_RR(virtualDatabase0, waitForCompletionPolicy0, createTablePolicy0, (ErrorCheckingPolicy) errorCheckingRandom0, 407);
      String string0 = rAIDb2ec_RR0.getXmlImpl();
      assertEquals("<RAIDb-2ec nbOfConcurrentReads=\"407\"><WaitForCompletion policy=\"first\"/></RAIDb-2ec>", string0);
  }
}
