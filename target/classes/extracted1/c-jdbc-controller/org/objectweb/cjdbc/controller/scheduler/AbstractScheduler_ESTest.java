/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 19 03:02:22 GMT 2016
 */

package org.objectweb.cjdbc.controller.scheduler;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.DropRequest;
import org.objectweb.cjdbc.common.sql.SelectRequest;
import org.objectweb.cjdbc.common.sql.StoredProcedure;
import org.objectweb.cjdbc.common.sql.schema.DatabaseSchema;
import org.objectweb.cjdbc.controller.requestmanager.TransactionMarkerMetaData;
import org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PassThroughLevelScheduler;
import org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler;
import org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticQueryLevelScheduler;
import org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler;
import org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PessimisticTransactionLevelScheduler;
import org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1QueryLevelScheduler;
import org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler;
import org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler;
import org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler;
import org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractScheduler_ESTest extends AbstractScheduler_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.isSuspendedTransactions()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      SingleDBPassThroughScheduler singleDBPassThroughScheduler0 = new SingleDBPassThroughScheduler();
      boolean boolean0 = singleDBPassThroughScheduler0.isSuspendedTransactions();
      assertEquals(-1, singleDBPassThroughScheduler0.getRAIDbLevel());
      assertEquals(0, singleDBPassThroughScheduler0.getPendingTransactions());
      assertEquals(0, singleDBPassThroughScheduler0.getNumberWrite());
      assertEquals(0, singleDBPassThroughScheduler0.getParsingGranularity());
      assertEquals(0, singleDBPassThroughScheduler0.getPendingWrites());
      assertEquals(0, singleDBPassThroughScheduler0.getNumberRead());
      assertFalse(singleDBPassThroughScheduler0.isSuspendedWrites());
      assertFalse(boolean0);
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.isSuspendedWrites()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      boolean boolean0 = rAIDb2QueryLevelScheduler0.isSuspendedWrites();
      assertEquals(0, rAIDb2QueryLevelScheduler0.getPendingWrites());
      assertEquals(0, rAIDb2QueryLevelScheduler0.getParsingGranularity());
      assertEquals(0, rAIDb2QueryLevelScheduler0.getNumberWrite());
      assertFalse(boolean0);
      assertFalse(rAIDb2QueryLevelScheduler0.isSuspendedTransactions());
      assertEquals(0, rAIDb2QueryLevelScheduler0.getPendingTransactions());
      assertEquals(0, rAIDb2QueryLevelScheduler0.getNumberRead());
      assertEquals(2, rAIDb2QueryLevelScheduler0.getRAIDbLevel());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.getNumberRead()I: root-Branch
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      RAIDb0PassThroughLevelScheduler rAIDb0PassThroughLevelScheduler0 = new RAIDb0PassThroughLevelScheduler();
      int int0 = rAIDb0PassThroughLevelScheduler0.getNumberRead();
      assertEquals(0, rAIDb0PassThroughLevelScheduler0.getPendingTransactions());
      assertEquals(0, rAIDb0PassThroughLevelScheduler0.getRAIDbLevel());
      assertFalse(rAIDb0PassThroughLevelScheduler0.isSuspendedWrites());
      assertFalse(rAIDb0PassThroughLevelScheduler0.isSuspendedTransactions());
      assertEquals(0, int0);
      assertEquals(0, rAIDb0PassThroughLevelScheduler0.getPendingWrites());
      assertEquals(0, rAIDb0PassThroughLevelScheduler0.getParsingGranularity());
      assertEquals(0, rAIDb0PassThroughLevelScheduler0.getNumberWrite());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.setParsingGranularity(I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      rAIDb1QueryLevelScheduler0.setParsingGranularity(2600);
      assertEquals(2600, rAIDb1QueryLevelScheduler0.getParsingGranularity());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.getPendingTransactions()I: root-Branch
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      int int0 = singleDBPessimisticTransactionLevelScheduler0.getPendingTransactions();
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getParsingGranularity());
      assertEquals(0, int0);
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getPendingWrites());
      assertFalse(singleDBPessimisticTransactionLevelScheduler0.isSuspendedWrites());
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getNumberRead());
      assertFalse(singleDBPessimisticTransactionLevelScheduler0.isSuspendedTransactions());
      assertEquals(-1, singleDBPessimisticTransactionLevelScheduler0.getRAIDbLevel());
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getNumberWrite());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.getParsingGranularity()I: root-Branch
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      RAIDb0PassThroughLevelScheduler rAIDb0PassThroughLevelScheduler0 = new RAIDb0PassThroughLevelScheduler();
      int int0 = rAIDb0PassThroughLevelScheduler0.getParsingGranularity();
      assertFalse(rAIDb0PassThroughLevelScheduler0.isSuspendedWrites());
      assertEquals(0, rAIDb0PassThroughLevelScheduler0.getNumberWrite());
      assertEquals(0, rAIDb0PassThroughLevelScheduler0.getPendingTransactions());
      assertEquals(0, int0);
      assertEquals(0, rAIDb0PassThroughLevelScheduler0.getRAIDbLevel());
      assertFalse(rAIDb0PassThroughLevelScheduler0.isSuspendedTransactions());
      assertEquals(0, rAIDb0PassThroughLevelScheduler0.getPendingWrites());
      assertEquals(0, rAIDb0PassThroughLevelScheduler0.getNumberRead());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.getPendingWrites()I: root-Branch
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("j", false, 767, "");
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      assertEquals(0, rAIDb1QueryLevelScheduler0.getPendingWrites());
      
      rAIDb1QueryLevelScheduler0.scheduleReadRequest(selectRequest0);
      assertEquals(0, rAIDb1QueryLevelScheduler0.getParsingGranularity());
      assertEquals(1, rAIDb1QueryLevelScheduler0.getRAIDbLevel());
      assertEquals(0, rAIDb1QueryLevelScheduler0.getNumberRead());
      assertFalse(rAIDb1QueryLevelScheduler0.isSuspendedTransactions());
      assertFalse(rAIDb1QueryLevelScheduler0.isSuspendedWrites());
      assertEquals(0, rAIDb1QueryLevelScheduler0.getNumberWrite());
      assertEquals(0, rAIDb1QueryLevelScheduler0.getPendingTransactions());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.getRAIDbLevel()I: root-Branch
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      int int0 = singleDBPessimisticTransactionLevelScheduler0.getRAIDbLevel();
      assertEquals((-1), int0);
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getNumberRead());
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getNumberWrite());
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getPendingTransactions());
      assertFalse(singleDBPessimisticTransactionLevelScheduler0.isSuspendedWrites());
      assertFalse(singleDBPessimisticTransactionLevelScheduler0.isSuspendedTransactions());
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getParsingGranularity());
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getPendingWrites());
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.resumeNewTransactions()V: root-Branch
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      rAIDb2QueryLevelScheduler0.resumeNewTransactions();
      assertFalse(rAIDb2QueryLevelScheduler0.isSuspendedWrites());
      assertFalse(rAIDb2QueryLevelScheduler0.isSuspendedTransactions());
      assertEquals(0, rAIDb2QueryLevelScheduler0.getPendingWrites());
      assertEquals(0, rAIDb2QueryLevelScheduler0.getNumberRead());
      assertEquals(2, rAIDb2QueryLevelScheduler0.getRAIDbLevel());
      assertEquals(0, rAIDb2QueryLevelScheduler0.getParsingGranularity());
      assertEquals(0, rAIDb2QueryLevelScheduler0.getPendingTransactions());
      assertEquals(0, rAIDb2QueryLevelScheduler0.getNumberWrite());
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.initializeTransactionId(J)V: root-Branch
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      RAIDb0PessimisticTransactionLevelScheduler rAIDb0PessimisticTransactionLevelScheduler0 = new RAIDb0PessimisticTransactionLevelScheduler();
      rAIDb0PessimisticTransactionLevelScheduler0.initializeTransactionId((-1L));
      assertEquals(0, rAIDb0PessimisticTransactionLevelScheduler0.getRAIDbLevel());
      assertEquals(0, rAIDb0PessimisticTransactionLevelScheduler0.getNumberWrite());
      assertFalse(rAIDb0PessimisticTransactionLevelScheduler0.isSuspendedTransactions());
      assertEquals(0, rAIDb0PessimisticTransactionLevelScheduler0.getPendingWrites());
      assertEquals(0, rAIDb0PessimisticTransactionLevelScheduler0.getNumberRead());
      assertEquals(0, rAIDb0PessimisticTransactionLevelScheduler0.getParsingGranularity());
      assertFalse(rAIDb0PessimisticTransactionLevelScheduler0.isSuspendedWrites());
      assertEquals(0, rAIDb0PessimisticTransactionLevelScheduler0.getPendingTransactions());
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.mergeDatabaseSchema(Lorg/objectweb/cjdbc/common/sql/schema/DatabaseSchema;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      rAIDb2PessimisticTransactionLevelScheduler0.mergeDatabaseSchema((DatabaseSchema) null);
      assertEquals(0, rAIDb2PessimisticTransactionLevelScheduler0.getParsingGranularity());
      assertEquals(0, rAIDb2PessimisticTransactionLevelScheduler0.getPendingWrites());
      assertEquals(0, rAIDb2PessimisticTransactionLevelScheduler0.getNumberRead());
      assertFalse(rAIDb2PessimisticTransactionLevelScheduler0.isSuspendedWrites());
      assertFalse(rAIDb2PessimisticTransactionLevelScheduler0.isSuspendedTransactions());
      assertEquals(2, rAIDb2PessimisticTransactionLevelScheduler0.getRAIDbLevel());
      assertEquals(0, rAIDb2PessimisticTransactionLevelScheduler0.getNumberWrite());
      assertEquals(0, rAIDb2PessimisticTransactionLevelScheduler0.getPendingTransactions());
  }

  //Test case number: 11
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.scheduleStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.suspendWriteIfNeeded(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)V: I11 Branch 8 IFEQ L412 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.suspendWriteIfNeeded(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)V: I151 Branch 11 IFEQ L448 - true
   */

	@Test(timeout=300000)
  public void test11()  throws Throwable  {
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure("__m(|", false, 5, "__m(|", false);
      rAIDb1QueryLevelScheduler0.scheduleStoredProcedure(storedProcedure0);
      assertEquals(1, rAIDb1QueryLevelScheduler0.getPendingWrites());
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.getNumberWrite()I: root-Branch
   */

	@Test(timeout=300000)
  public void test12()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      int int0 = rAIDb2PessimisticTransactionLevelScheduler0.getNumberWrite();
      assertEquals(2, rAIDb2PessimisticTransactionLevelScheduler0.getRAIDbLevel());
      assertFalse(rAIDb2PessimisticTransactionLevelScheduler0.isSuspendedTransactions());
      assertEquals(0, rAIDb2PessimisticTransactionLevelScheduler0.getPendingWrites());
      assertEquals(0, rAIDb2PessimisticTransactionLevelScheduler0.getNumberRead());
      assertEquals(0, int0);
      assertEquals(0, rAIDb2PessimisticTransactionLevelScheduler0.getParsingGranularity());
      assertFalse(rAIDb2PessimisticTransactionLevelScheduler0.isSuspendedWrites());
      assertEquals(0, rAIDb2PessimisticTransactionLevelScheduler0.getPendingTransactions());
  }

  //Test case number: 13
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.resumeWrites()V: root-Branch
   */

	@Test(timeout=300000)
  public void test13()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      singleDBPessimisticTransactionLevelScheduler0.resumeWrites();
      assertFalse(singleDBPessimisticTransactionLevelScheduler0.isSuspendedWrites());
      assertFalse(singleDBPessimisticTransactionLevelScheduler0.isSuspendedTransactions());
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getPendingTransactions());
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getNumberWrite());
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getNumberRead());
      assertEquals(-1, singleDBPessimisticTransactionLevelScheduler0.getRAIDbLevel());
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getPendingWrites());
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getParsingGranularity());
  }

  //Test case number: 14
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.readCompleted(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test14()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("j", false, 767, "");
      RAIDb1QueryLevelScheduler rAIDb1QueryLevelScheduler0 = new RAIDb1QueryLevelScheduler();
      rAIDb1QueryLevelScheduler0.readCompleted(selectRequest0);
      assertEquals(1, rAIDb1QueryLevelScheduler0.getNumberRead());
  }

  //Test case number: 15
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.setRAIDbLevel(I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test15()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      rAIDb2QueryLevelScheduler0.setRAIDbLevel(3799);
      assertEquals(3799, rAIDb2QueryLevelScheduler0.getRAIDbLevel());
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.getXml()Ljava/lang/String;: root-Branch
   */

	@Test(timeout=300000)
  public void test16()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      String string0 = singleDBPessimisticTransactionLevelScheduler0.getXml();
      assertFalse(singleDBPessimisticTransactionLevelScheduler0.isSuspendedTransactions());
      assertFalse(singleDBPessimisticTransactionLevelScheduler0.isSuspendedWrites());
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getNumberWrite());
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getPendingTransactions());
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getNumberRead());
      assertEquals(-1, singleDBPessimisticTransactionLevelScheduler0.getRAIDbLevel());
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getPendingWrites());
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getParsingGranularity());
      assertEquals("<RequestScheduler><SingleDBScheduler level=\"pessimisticTransaction\"/></RequestScheduler>", string0);
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.scheduleWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.suspendWriteIfNeeded(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)V: I11 Branch 8 IFEQ L412 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.suspendWriteIfNeeded(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)V: I151 Branch 11 IFEQ L448 - true
   */

	@Test(timeout=300000)
  public void test17()  throws Throwable  {
      RAIDb0PassThroughLevelScheduler rAIDb0PassThroughLevelScheduler0 = new RAIDb0PassThroughLevelScheduler();
      DropRequest dropRequest0 = new DropRequest("..`#mrU\u0006FTJj", false, 1370, "..`#mrU\u0006FTJj");
      rAIDb0PassThroughLevelScheduler0.scheduleWriteRequest(dropRequest0);
      assertEquals(1, rAIDb0PassThroughLevelScheduler0.getPendingWrites());
  }

  //Test case number: 18
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.setDatabaseSchema(Lorg/objectweb/cjdbc/common/sql/schema/DatabaseSchema;)V: I4 Branch 1 IFEQ L188 - true
   */

	@Test(timeout=300000)
  public void test18()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      rAIDb1PessimisticTransactionLevelScheduler0.setDatabaseSchema((DatabaseSchema) null);
      assertEquals(0, rAIDb1PessimisticTransactionLevelScheduler0.getNumberRead());
      assertEquals(0, rAIDb1PessimisticTransactionLevelScheduler0.getPendingWrites());
      assertEquals(0, rAIDb1PessimisticTransactionLevelScheduler0.getNumberWrite());
      assertEquals(0, rAIDb1PessimisticTransactionLevelScheduler0.getParsingGranularity());
      assertEquals(0, rAIDb1PessimisticTransactionLevelScheduler0.getPendingTransactions());
      assertEquals(1, rAIDb1PessimisticTransactionLevelScheduler0.getRAIDbLevel());
      assertFalse(rAIDb1PessimisticTransactionLevelScheduler0.isSuspendedTransactions());
      assertFalse(rAIDb1PessimisticTransactionLevelScheduler0.isSuspendedWrites());
  }

  //Test case number: 19
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.writeCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I19 Branch 2 IFEQ L296 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.writeCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I42 Branch 3 IFEQ L304 - true
   */

	@Test(timeout=300000)
  public void test19()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      DropRequest dropRequest0 = new DropRequest("fetching static metadata for backend:", false, 1, "");
      rAIDb2PessimisticTransactionLevelScheduler0.writeCompleted(dropRequest0);
      assertEquals(1, rAIDb2PessimisticTransactionLevelScheduler0.getNumberWrite());
  }

  //Test case number: 20
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.writeCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I19 Branch 2 IFEQ L296 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.writeCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I42 Branch 3 IFEQ L304 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.writeCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I45 Branch 4 IFNE L304 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.suspendWrites()V: I16 Branch 64 IFNE L1166 - false
   */

	@Test(timeout=300000)
  public void test20()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      rAIDb2PessimisticTransactionLevelScheduler0.suspendWrites();
      DropRequest dropRequest0 = new DropRequest("WMY5j@z=EcYJ", false, 1, "");
      rAIDb2PessimisticTransactionLevelScheduler0.writeCompleted(dropRequest0);
      assertEquals(1, rAIDb2PessimisticTransactionLevelScheduler0.getNumberWrite());
  }

  //Test case number: 21
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.storedProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I19 Branch 5 IFEQ L372 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.storedProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I42 Branch 6 IFEQ L380 - true
   */

	@Test(timeout=300000)
  public void test21()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure("<RAIDb-1Scheduler level=\"optimisticTransaction\"/>", false, (int) (byte)1, "ResultSet.updateNull(String) unsupported", false);
      singleDBPessimisticTransactionLevelScheduler0.storedProcedureCompleted(storedProcedure0);
      assertEquals(1, singleDBPessimisticTransactionLevelScheduler0.getNumberWrite());
  }

  //Test case number: 22
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.storedProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I19 Branch 5 IFEQ L372 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.storedProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I42 Branch 6 IFEQ L380 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.storedProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I45 Branch 7 IFNE L380 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.suspendWrites()V: I16 Branch 64 IFNE L1166 - false
   */

	@Test(timeout=300000)
  public void test22()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      singleDBPessimisticTransactionLevelScheduler0.suspendWrites();
      StoredProcedure storedProcedure0 = new StoredProcedure("<RAIDb-1Scheduler level=\"optimisticTransaction\"/>", false, (int) (byte)1, "ResultSet.updateNull(String) unsupported", false);
      singleDBPessimisticTransactionLevelScheduler0.storedProcedureCompleted(storedProcedure0);
      assertEquals(-1, singleDBPessimisticTransactionLevelScheduler0.getPendingWrites());
  }

  //Test case number: 23
  /*
   * 11 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.storedProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I19 Branch 5 IFEQ L372 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.storedProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I42 Branch 6 IFEQ L380 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.storedProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I45 Branch 7 IFNE L380 - false
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.begin(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)J: I11 Branch 12 IFEQ L472 - false
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.begin(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)J: I22 Branch 13 IFLE L478 - false
   * Goal 7. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.begin(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)J: I66 Branch 14 IFLE L484 - false
   * Goal 8. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.begin(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)J: I143 Branch 15 IFEQ L506 - true
   * Goal 9. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.begin(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)J: I181 Branch 16 IFEQ L514 - true
   * Goal 10. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.begin(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)J: I321 Branch 19 IFEQ L548 - true
   * Goal 11. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.suspendWrites()V: I16 Branch 64 IFNE L1166 - false
   */

	@Test(timeout=300000)
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
          singleDBPessimisticTransactionLevelScheduler0.suspendWrites();
          TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData((long) (byte)7, 912L, "<RAIDb-1Scheduler level=\"optimisticTransaction\"/>");
          singleDBPessimisticTransactionLevelScheduler0.begin(transactionMarkerMetaData0);
          StoredProcedure storedProcedure0 = new StoredProcedure("<RAIDb-1Scheduler level=\"optimisticTransaction\"/>", false, (int) (byte)1, "ResultSet.updateNull(String) unsupported", false);
          singleDBPessimisticTransactionLevelScheduler0.storedProcedureCompleted(storedProcedure0);
          assertEquals(1, singleDBPessimisticTransactionLevelScheduler0.getNumberWrite());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  //Test case number: 24
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.begin(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)J: I11 Branch 12 IFEQ L472 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.begin(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)J: I143 Branch 15 IFEQ L506 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.begin(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)J: I181 Branch 16 IFEQ L514 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.begin(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)J: I321 Branch 19 IFEQ L548 - true
   */

	@Test(timeout=300000)
  public void test24()  throws Throwable  {
      RAIDb0PessimisticTransactionLevelScheduler rAIDb0PessimisticTransactionLevelScheduler0 = new RAIDb0PessimisticTransactionLevelScheduler();
      rAIDb0PessimisticTransactionLevelScheduler0.begin((TransactionMarkerMetaData) null);
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.beginCompleted(J)V: I19 Branch 20 IFEQ L567 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.beginCompleted(J)V: I37 Branch 21 IFEQ L573 - true
   */

	@Test(timeout=300000)
  public void test25()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      rAIDb1OptimisticTransactionLevelScheduler0.beginCompleted(1L);
  }

  //Test case number: 26
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.beginCompleted(J)V: I19 Branch 20 IFEQ L567 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.beginCompleted(J)V: I37 Branch 21 IFEQ L573 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.beginCompleted(J)V: I40 Branch 22 IFNE L573 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.suspendWrites()V: I16 Branch 64 IFNE L1166 - false
   */

	@Test(timeout=300000)
  public void test26()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      rAIDb1OptimisticTransactionLevelScheduler0.suspendWrites();
      rAIDb1OptimisticTransactionLevelScheduler0.beginCompleted(1L);
  }

  //Test case number: 27
  /*
   * 9 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.beginCompleted(J)V: I19 Branch 20 IFEQ L567 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.beginCompleted(J)V: I37 Branch 21 IFEQ L573 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.beginCompleted(J)V: I40 Branch 22 IFNE L573 - false
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.releaseSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I11 Branch 55 IFEQ L1011 - false
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.releaseSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I22 Branch 56 IFLE L1016 - false
   * Goal 7. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.releaseSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I66 Branch 57 IFLE L1022 - false
   * Goal 8. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.releaseSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I143 Branch 58 IFEQ L1045 - true
   * Goal 9. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.suspendWrites()V: I16 Branch 64 IFNE L1166 - false
   */

	@Test(timeout=300000)
  public void test27()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      rAIDb1OptimisticTransactionLevelScheduler0.suspendWrites();
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData(1822L, 1L, "~<&'*F");
      rAIDb1OptimisticTransactionLevelScheduler0.releaseSavepoint(transactionMarkerMetaData0, "~<&'*F");
      rAIDb1OptimisticTransactionLevelScheduler0.beginCompleted(1L);
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.commit(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)V: I11 Branch 23 IFEQ L597 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.commit(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)V: I143 Branch 26 IFEQ L631 - true
   */

	@Test(timeout=300000)
  public void test28()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData((long) 1908, (long) 1908, "#(*D(#ZEK20fp?4");
      rAIDb2QueryLevelScheduler0.commit(transactionMarkerMetaData0);
  }

  //Test case number: 29
  /*
   * 7 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.commitCompleted(J)V: I19 Branch 27 IFEQ L657 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.commitCompleted(J)V: I37 Branch 28 IFEQ L664 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.commitCompleted(J)V: I40 Branch 29 IFNE L664 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.commitCompleted(J)V: I98 Branch 30 IFEQ L677 - true
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.commitCompleted(J)V: I116 Branch 31 IFEQ L683 - true
   * Goal 7. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.suspendNewTransactionsForCheckpoint()V: I16 Branch 62 IFNE L1108 - false
   */

	@Test(timeout=300000)
  public void test29()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      rAIDb1PessimisticTransactionLevelScheduler0.suspendNewTransactionsForCheckpoint();
      rAIDb1PessimisticTransactionLevelScheduler0.commitCompleted(334);
  }

  //Test case number: 30
  /*
   * 7 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.commitCompleted(J)V: I19 Branch 27 IFEQ L657 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.commitCompleted(J)V: I37 Branch 28 IFEQ L664 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.commitCompleted(J)V: I98 Branch 30 IFEQ L677 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.commitCompleted(J)V: I116 Branch 31 IFEQ L683 - false
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.commitCompleted(J)V: I119 Branch 32 IFNE L683 - true
   * Goal 7. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.suspendWrites()V: I16 Branch 64 IFNE L1166 - false
   */

	@Test(timeout=300000)
  public void test30()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      singleDBPessimisticTransactionLevelScheduler0.suspendWrites();
      singleDBPessimisticTransactionLevelScheduler0.commitCompleted(1173L);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollback(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)V: I11 Branch 33 IFEQ L707 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollback(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)V: I143 Branch 36 IFEQ L742 - true
   */

	@Test(timeout=300000)
  public void test31()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData(0L, 0L, "");
      rAIDb1PessimisticTransactionLevelScheduler0.rollback(transactionMarkerMetaData0);
  }

  //Test case number: 32
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollback(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I11 Branch 37 IFEQ L764 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollback(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I143 Branch 40 IFEQ L798 - true
   */

	@Test(timeout=300000)
  public void test32()  throws Throwable  {
      RAIDb1OptimisticQueryLevelScheduler rAIDb1OptimisticQueryLevelScheduler0 = new RAIDb1OptimisticQueryLevelScheduler();
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData(0L, 0L, "N%5V7ex");
      rAIDb1OptimisticQueryLevelScheduler0.rollback(transactionMarkerMetaData0, "N%5V7ex");
  }

  //Test case number: 33
  /*
   * 7 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollbackCompleted(J)V: I19 Branch 41 IFEQ L834 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollbackCompleted(J)V: I37 Branch 42 IFEQ L841 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollbackCompleted(J)V: I40 Branch 43 IFNE L841 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollbackCompleted(J)V: I98 Branch 44 IFEQ L854 - true
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollbackCompleted(J)V: I116 Branch 45 IFEQ L860 - true
   * Goal 7. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.suspendNewTransactionsForCheckpoint()V: I16 Branch 62 IFNE L1108 - false
   */

	@Test(timeout=300000)
  public void test33()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      rAIDb1PessimisticTransactionLevelScheduler0.suspendNewTransactionsForCheckpoint();
      rAIDb1PessimisticTransactionLevelScheduler0.rollbackCompleted((-49L));
  }

  //Test case number: 34
  /*
   * 7 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollbackCompleted(J)V: I19 Branch 41 IFEQ L834 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollbackCompleted(J)V: I37 Branch 42 IFEQ L841 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollbackCompleted(J)V: I98 Branch 44 IFEQ L854 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollbackCompleted(J)V: I116 Branch 45 IFEQ L860 - false
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollbackCompleted(J)V: I119 Branch 46 IFNE L860 - true
   * Goal 7. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.suspendWrites()V: I16 Branch 64 IFNE L1166 - false
   */

	@Test(timeout=300000)
  public void test34()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      singleDBPessimisticTransactionLevelScheduler0.suspendWrites();
      singleDBPessimisticTransactionLevelScheduler0.rollbackCompleted((-137L));
  }

  //Test case number: 35
  /*
   * 11 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollbackCompleted(J)V: I19 Branch 41 IFEQ L834 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollbackCompleted(J)V: I37 Branch 42 IFEQ L841 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollbackCompleted(J)V: I98 Branch 44 IFEQ L854 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollbackCompleted(J)V: I116 Branch 45 IFEQ L860 - false
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.rollbackCompleted(J)V: I119 Branch 46 IFNE L860 - false
   * Goal 7. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.setSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I11 Branch 51 IFEQ L945 - false
   * Goal 8. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.setSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I22 Branch 52 IFLE L950 - false
   * Goal 9. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.setSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I66 Branch 53 IFLE L956 - false
   * Goal 10. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.setSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I143 Branch 54 IFEQ L979 - true
   * Goal 11. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.suspendWrites()V: I16 Branch 64 IFNE L1166 - false
   */

	@Test(timeout=300000)
  public void test35()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      rAIDb1OptimisticTransactionLevelScheduler0.suspendWrites();
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData(1822L, 1L, "~<&'*F");
      rAIDb1OptimisticTransactionLevelScheduler0.setSavepoint(transactionMarkerMetaData0, "~<&'*F");
      rAIDb1OptimisticTransactionLevelScheduler0.rollbackCompleted(281474976710655L);
  }

  //Test case number: 36
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.incrementSavepointId()I: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.setSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)I: I11 Branch 47 IFEQ L885 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.setSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)I: I143 Branch 50 IFEQ L919 - true
   */

	@Test(timeout=300000)
  public void test36()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData((long) 1908, (long) 1908, "#(*D(#ZEK20fp?4");
      rAIDb2QueryLevelScheduler0.setSavepoint(transactionMarkerMetaData0);
  }

  //Test case number: 37
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.setSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I11 Branch 51 IFEQ L945 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.setSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I143 Branch 54 IFEQ L979 - true
   */

	@Test(timeout=300000)
  public void test37()  throws Throwable  {
      RAIDb0PassThroughLevelScheduler rAIDb0PassThroughLevelScheduler0 = new RAIDb0PassThroughLevelScheduler();
      // Undeclared exception!
      try { 
        rAIDb0PassThroughLevelScheduler0.setSavepoint((TransactionMarkerMetaData) null, "_P5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.scheduler.AbstractScheduler", e);
      }
  }

  //Test case number: 38
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.releaseSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I11 Branch 55 IFEQ L1011 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.releaseSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I143 Branch 58 IFEQ L1045 - true
   */

	@Test(timeout=300000)
  public void test38()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      // Undeclared exception!
      try { 
        rAIDb1OptimisticTransactionLevelScheduler0.releaseSavepoint((TransactionMarkerMetaData) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.scheduler.AbstractScheduler", e);
      }
  }

  //Test case number: 39
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.savepointCompleted(J)V: I19 Branch 59 IFEQ L1073 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.savepointCompleted(J)V: I37 Branch 60 IFEQ L1079 - true
   */

	@Test(timeout=300000)
  public void test39()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      rAIDb2QueryLevelScheduler0.savepointCompleted((byte)116);
  }

  //Test case number: 40
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.savepointCompleted(J)V: I19 Branch 59 IFEQ L1073 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.savepointCompleted(J)V: I37 Branch 60 IFEQ L1079 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.savepointCompleted(J)V: I40 Branch 61 IFNE L1079 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.suspendWrites()V: I16 Branch 64 IFNE L1166 - false
   */

	@Test(timeout=300000)
  public void test40()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      rAIDb2QueryLevelScheduler0.suspendWrites();
      rAIDb2QueryLevelScheduler0.savepointCompleted((byte)116);
  }

  //Test case number: 41
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.getSchedulerData()[Ljava/lang/String;: I84 Branch 66 IFEQ L1243 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.getSchedulerData()[Ljava/lang/String;: I97 Branch 67 IFEQ L1244 - true
   */

	@Test(timeout=300000)
  public void test41()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      rAIDb1PessimisticTransactionLevelScheduler0.getSchedulerData();
  }

  //Test case number: 42
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.suspendNewTransactionsForCheckpoint()V: I16 Branch 62 IFNE L1108 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.getSchedulerData()[Ljava/lang/String;: I84 Branch 66 IFEQ L1243 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.AbstractScheduler.getSchedulerData()[Ljava/lang/String;: I97 Branch 67 IFEQ L1244 - true
   */

	@Test(timeout=300000)
  public void test42()  throws Throwable  {
      RAIDb1PessimisticTransactionLevelScheduler rAIDb1PessimisticTransactionLevelScheduler0 = new RAIDb1PessimisticTransactionLevelScheduler();
      rAIDb1PessimisticTransactionLevelScheduler0.suspendNewTransactionsForCheckpoint();
      rAIDb1PessimisticTransactionLevelScheduler0.getSchedulerData();
  }
}
