/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 18 19:13:31 GMT 2016
 */

package org.objectweb.cjdbc.controller.backend;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import java.net.ConnectException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.log.Trace;
import org.objectweb.cjdbc.controller.backend.DriverCompliance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DriverCompliance_ESTest extends DriverCompliance_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.backend.DriverCompliance.supportGetGeneratedKeys()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.backend.DriverCompliance.<init>(Lorg/objectweb/cjdbc/common/log/Trace;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      Trace trace0 = Trace.getLogger("BsgTZZpq+#Kmu5fv");
      DriverCompliance driverCompliance0 = new DriverCompliance(trace0);
      boolean boolean0 = driverCompliance0.supportGetGeneratedKeys();
      assertFalse(driverCompliance0.supportGetColumnCount());
      assertFalse(driverCompliance0.supportSetCursorName());
      assertFalse(driverCompliance0.supportSetMaxRows());
      assertFalse(driverCompliance0.supportSetFetchSize());
      assertFalse(driverCompliance0.supportGetColumnType());
      assertEquals("C-JDBC", driverCompliance0.getDatabaseProductName());
      assertFalse(driverCompliance0.supportGetColumnClassName());
      assertFalse(driverCompliance0.supportGetTableName());
      assertFalse(driverCompliance0.supportGetColumnDisplaySize());
      assertFalse(boolean0);
      assertFalse(driverCompliance0.supportGetColumnTypeName());
      assertFalse(driverCompliance0.isCompliant());
      assertFalse(driverCompliance0.supportSetQueryTimeout());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.backend.DriverCompliance.isCompliant()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.backend.DriverCompliance.<init>(Lorg/objectweb/cjdbc/common/log/Trace;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      Trace trace0 = Trace.getLogger("loading driver with name ");
      DriverCompliance driverCompliance0 = new DriverCompliance(trace0);
      boolean boolean0 = driverCompliance0.isCompliant();
      assertFalse(driverCompliance0.supportGetColumnTypeName());
      assertFalse(driverCompliance0.supportSetQueryTimeout());
      assertFalse(driverCompliance0.supportGetColumnCount());
      assertFalse(driverCompliance0.supportGetColumnType());
      assertFalse(driverCompliance0.supportGetTableName());
      assertFalse(driverCompliance0.supportGetColumnDisplaySize());
      assertFalse(boolean0);
      assertFalse(driverCompliance0.supportSetCursorName());
      assertFalse(driverCompliance0.supportGetGeneratedKeys());
      assertFalse(driverCompliance0.supportSetFetchSize());
      assertEquals("C-JDBC", driverCompliance0.getDatabaseProductName());
      assertFalse(driverCompliance0.supportGetColumnClassName());
      assertFalse(driverCompliance0.supportSetMaxRows());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.backend.DriverCompliance.supportGetColumnType()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.backend.DriverCompliance.<init>(Lorg/objectweb/cjdbc/common/log/Trace;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      Trace trace0 = Trace.getLogger("(amb_y`67}MIY4MF>");
      DriverCompliance driverCompliance0 = new DriverCompliance(trace0);
      boolean boolean0 = driverCompliance0.supportGetColumnType();
      assertFalse(driverCompliance0.supportSetCursorName());
      assertFalse(driverCompliance0.supportGetGeneratedKeys());
      assertFalse(driverCompliance0.supportSetFetchSize());
      assertFalse(driverCompliance0.supportGetColumnCount());
      assertFalse(driverCompliance0.supportGetColumnTypeName());
      assertFalse(driverCompliance0.isCompliant());
      assertFalse(boolean0);
      assertFalse(driverCompliance0.supportSetQueryTimeout());
      assertFalse(driverCompliance0.supportGetColumnClassName());
      assertFalse(driverCompliance0.supportGetTableName());
      assertFalse(driverCompliance0.supportGetColumnDisplaySize());
      assertFalse(driverCompliance0.supportSetMaxRows());
      assertEquals("C-JDBC", driverCompliance0.getDatabaseProductName());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.backend.DriverCompliance.<init>(Lorg/objectweb/cjdbc/common/log/Trace;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.backend.DriverCompliance.supportSetFetchSize()Z: root-Branch
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      Trace trace0 = Trace.getLogger("PTJ3CN~");
      DriverCompliance driverCompliance0 = new DriverCompliance(trace0);
      boolean boolean0 = driverCompliance0.supportSetFetchSize();
      assertFalse(driverCompliance0.supportSetMaxRows());
      assertFalse(driverCompliance0.supportSetCursorName());
      assertFalse(driverCompliance0.supportGetColumnCount());
      assertFalse(driverCompliance0.supportGetGeneratedKeys());
      assertFalse(driverCompliance0.isCompliant());
      assertEquals("C-JDBC", driverCompliance0.getDatabaseProductName());
      assertFalse(driverCompliance0.supportGetColumnTypeName());
      assertFalse(driverCompliance0.supportGetColumnDisplaySize());
      assertFalse(driverCompliance0.supportGetColumnType());
      assertFalse(driverCompliance0.supportGetTableName());
      assertFalse(driverCompliance0.supportGetColumnClassName());
      assertFalse(boolean0);
      assertFalse(driverCompliance0.supportSetQueryTimeout());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.backend.DriverCompliance.<init>(Lorg/objectweb/cjdbc/common/log/Trace;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.backend.DriverCompliance.supportGetColumnCount()Z: root-Branch
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      Trace trace0 = Trace.getLogger("IjrDDv#Tic\",Gj");
      DriverCompliance driverCompliance0 = new DriverCompliance(trace0);
      boolean boolean0 = driverCompliance0.supportGetColumnCount();
      assertFalse(driverCompliance0.supportSetFetchSize());
      assertFalse(driverCompliance0.supportGetGeneratedKeys());
      assertFalse(driverCompliance0.supportSetCursorName());
      assertFalse(driverCompliance0.supportSetMaxRows());
      assertEquals("C-JDBC", driverCompliance0.getDatabaseProductName());
      assertFalse(driverCompliance0.supportGetColumnTypeName());
      assertFalse(driverCompliance0.supportGetColumnDisplaySize());
      assertFalse(driverCompliance0.supportGetColumnType());
      assertFalse(driverCompliance0.supportSetQueryTimeout());
      assertFalse(driverCompliance0.supportGetColumnClassName());
      assertFalse(driverCompliance0.supportGetTableName());
      assertFalse(driverCompliance0.isCompliant());
      assertFalse(boolean0);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.backend.DriverCompliance.<init>(Lorg/objectweb/cjdbc/common/log/Trace;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.backend.DriverCompliance.supportSetMaxRows()Z: root-Branch
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      Trace trace0 = Trace.getLogger("PU:PNbj9");
      DriverCompliance driverCompliance0 = new DriverCompliance(trace0);
      boolean boolean0 = driverCompliance0.supportSetMaxRows();
      assertFalse(driverCompliance0.supportGetColumnDisplaySize());
      assertFalse(driverCompliance0.supportGetColumnType());
      assertFalse(driverCompliance0.supportGetGeneratedKeys());
      assertFalse(driverCompliance0.supportGetTableName());
      assertFalse(driverCompliance0.supportGetColumnClassName());
      assertEquals("C-JDBC", driverCompliance0.getDatabaseProductName());
      assertFalse(driverCompliance0.supportGetColumnCount());
      assertFalse(driverCompliance0.supportSetFetchSize());
      assertFalse(boolean0);
      assertFalse(driverCompliance0.supportSetCursorName());
      assertFalse(driverCompliance0.isCompliant());
      assertFalse(driverCompliance0.supportSetQueryTimeout());
      assertFalse(driverCompliance0.supportGetColumnTypeName());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.backend.DriverCompliance.<init>(Lorg/objectweb/cjdbc/common/log/Trace;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.backend.DriverCompliance.supportGetColumnDisplaySize()Z: root-Branch
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      Trace trace0 = Trace.getLogger("loading driver with name ");
      DriverCompliance driverCompliance0 = new DriverCompliance(trace0);
      boolean boolean0 = driverCompliance0.supportGetColumnDisplaySize();
      assertFalse(driverCompliance0.supportGetColumnClassName());
      assertFalse(driverCompliance0.supportSetQueryTimeout());
      assertFalse(driverCompliance0.supportGetTableName());
      assertEquals("C-JDBC", driverCompliance0.getDatabaseProductName());
      assertFalse(driverCompliance0.supportGetColumnType());
      assertFalse(boolean0);
      assertFalse(driverCompliance0.supportSetCursorName());
      assertFalse(driverCompliance0.supportGetGeneratedKeys());
      assertFalse(driverCompliance0.supportGetColumnCount());
      assertFalse(driverCompliance0.supportSetMaxRows());
      assertFalse(driverCompliance0.supportSetFetchSize());
      assertFalse(driverCompliance0.isCompliant());
      assertFalse(driverCompliance0.supportGetColumnTypeName());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.backend.DriverCompliance.<init>(Lorg/objectweb/cjdbc/common/log/Trace;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.backend.DriverCompliance.supportGetColumnTypeName()Z: root-Branch
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      Trace trace0 = Trace.getLogger("loading driver with name ");
      DriverCompliance driverCompliance0 = new DriverCompliance(trace0);
      boolean boolean0 = driverCompliance0.supportGetColumnTypeName();
      assertEquals("C-JDBC", driverCompliance0.getDatabaseProductName());
      assertFalse(driverCompliance0.supportSetMaxRows());
      assertFalse(driverCompliance0.supportSetFetchSize());
      assertFalse(driverCompliance0.supportGetColumnCount());
      assertFalse(boolean0);
      assertFalse(driverCompliance0.supportGetColumnClassName());
      assertFalse(driverCompliance0.supportGetGeneratedKeys());
      assertFalse(driverCompliance0.supportGetTableName());
      assertFalse(driverCompliance0.supportGetColumnDisplaySize());
      assertFalse(driverCompliance0.supportGetColumnType());
      assertFalse(driverCompliance0.supportSetQueryTimeout());
      assertFalse(driverCompliance0.supportSetCursorName());
      assertFalse(driverCompliance0.isCompliant());
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.backend.DriverCompliance.<init>(Lorg/objectweb/cjdbc/common/log/Trace;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.backend.DriverCompliance.supportGetColumnClassName()Z: root-Branch
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      Trace trace0 = Trace.getLogger("loading driver with name ");
      DriverCompliance driverCompliance0 = new DriverCompliance(trace0);
      boolean boolean0 = driverCompliance0.supportGetColumnClassName();
      assertFalse(driverCompliance0.supportSetQueryTimeout());
      assertFalse(driverCompliance0.isCompliant());
      assertFalse(boolean0);
      assertFalse(driverCompliance0.supportSetMaxRows());
      assertFalse(driverCompliance0.supportGetTableName());
      assertFalse(driverCompliance0.supportSetFetchSize());
      assertEquals("C-JDBC", driverCompliance0.getDatabaseProductName());
      assertFalse(driverCompliance0.supportSetCursorName());
      assertFalse(driverCompliance0.supportGetGeneratedKeys());
      assertFalse(driverCompliance0.supportGetColumnType());
      assertFalse(driverCompliance0.supportGetColumnDisplaySize());
      assertFalse(driverCompliance0.supportGetColumnCount());
      assertFalse(driverCompliance0.supportGetColumnTypeName());
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.backend.DriverCompliance.<init>(Lorg/objectweb/cjdbc/common/log/Trace;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.backend.DriverCompliance.supportGetTableName()Z: root-Branch
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      Trace trace0 = Trace.getLogger("ORp8r}Ks~[D)p;>");
      DriverCompliance driverCompliance0 = new DriverCompliance(trace0);
      boolean boolean0 = driverCompliance0.supportGetTableName();
      assertFalse(driverCompliance0.supportGetColumnDisplaySize());
      assertFalse(driverCompliance0.supportGetColumnType());
      assertFalse(driverCompliance0.supportSetCursorName());
      assertFalse(driverCompliance0.isCompliant());
      assertFalse(driverCompliance0.supportGetColumnTypeName());
      assertFalse(driverCompliance0.supportSetQueryTimeout());
      assertEquals("C-JDBC", driverCompliance0.getDatabaseProductName());
      assertFalse(driverCompliance0.supportSetMaxRows());
      assertFalse(driverCompliance0.supportGetColumnCount());
      assertFalse(boolean0);
      assertFalse(driverCompliance0.supportGetColumnClassName());
      assertFalse(driverCompliance0.supportGetGeneratedKeys());
      assertFalse(driverCompliance0.supportSetFetchSize());
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.backend.DriverCompliance.<init>(Lorg/objectweb/cjdbc/common/log/Trace;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.backend.DriverCompliance.getDatabaseProductName()Ljava/lang/String;: root-Branch
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      Trace trace0 = Trace.getLogger("backend.driver.test.statement.failed");
      DriverCompliance driverCompliance0 = new DriverCompliance(trace0);
      String string0 = driverCompliance0.getDatabaseProductName();
      assertFalse(driverCompliance0.supportSetMaxRows());
      assertFalse(driverCompliance0.isCompliant());
      assertFalse(driverCompliance0.supportGetColumnCount());
      assertFalse(driverCompliance0.supportSetQueryTimeout());
      assertFalse(driverCompliance0.supportSetCursorName());
      assertEquals("C-JDBC", string0);
      assertFalse(driverCompliance0.supportGetColumnTypeName());
      assertFalse(driverCompliance0.supportGetColumnType());
      assertFalse(driverCompliance0.supportGetColumnDisplaySize());
      assertFalse(driverCompliance0.supportGetGeneratedKeys());
      assertFalse(driverCompliance0.supportSetFetchSize());
      assertFalse(driverCompliance0.supportGetTableName());
      assertFalse(driverCompliance0.supportGetColumnClassName());
  }

  //Test case number: 11
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.backend.DriverCompliance.<init>(Lorg/objectweb/cjdbc/common/log/Trace;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.backend.DriverCompliance.supportSetCursorName()Z: root-Branch
   */

	@Test(timeout=300000)
  public void test11()  throws Throwable  {
      Trace trace0 = Trace.getLogger("9zOg?7g+3p3MZe");
      DriverCompliance driverCompliance0 = new DriverCompliance(trace0);
      boolean boolean0 = driverCompliance0.supportSetCursorName();
      assertFalse(driverCompliance0.supportSetFetchSize());
      assertFalse(driverCompliance0.supportGetGeneratedKeys());
      assertFalse(driverCompliance0.supportGetTableName());
      assertFalse(driverCompliance0.supportSetMaxRows());
      assertEquals("C-JDBC", driverCompliance0.getDatabaseProductName());
      assertFalse(driverCompliance0.supportGetColumnClassName());
      assertFalse(boolean0);
      assertFalse(driverCompliance0.supportGetColumnDisplaySize());
      assertFalse(driverCompliance0.isCompliant());
      assertFalse(driverCompliance0.supportGetColumnTypeName());
      assertFalse(driverCompliance0.supportGetColumnType());
      assertFalse(driverCompliance0.supportSetQueryTimeout());
      assertFalse(driverCompliance0.supportGetColumnCount());
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.backend.DriverCompliance.<init>(Lorg/objectweb/cjdbc/common/log/Trace;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.backend.DriverCompliance.supportSetQueryTimeout()Z: root-Branch
   */

	@Test(timeout=300000)
  public void test12()  throws Throwable  {
      Trace trace0 = Trace.getLogger("");
      DriverCompliance driverCompliance0 = new DriverCompliance(trace0);
      boolean boolean0 = driverCompliance0.supportSetQueryTimeout();
      assertFalse(driverCompliance0.supportGetTableName());
      assertFalse(driverCompliance0.supportGetColumnDisplaySize());
      assertFalse(driverCompliance0.supportGetColumnType());
      assertFalse(driverCompliance0.supportGetGeneratedKeys());
      assertFalse(driverCompliance0.supportGetColumnClassName());
      assertFalse(boolean0);
      assertFalse(driverCompliance0.supportSetFetchSize());
      assertFalse(driverCompliance0.supportSetMaxRows());
      assertEquals("C-JDBC", driverCompliance0.getDatabaseProductName());
      assertFalse(driverCompliance0.isCompliant());
      assertFalse(driverCompliance0.supportGetColumnTypeName());
      assertFalse(driverCompliance0.supportSetCursorName());
      assertFalse(driverCompliance0.supportGetColumnCount());
  }

  //Test case number: 13
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.backend.DriverCompliance.<init>(Lorg/objectweb/cjdbc/common/log/Trace;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.backend.DriverCompliance.complianceTest(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z: I4 Branch 1 IFEQ L93 - true
   * Goal 3. org.objectweb.cjdbc.controller.backend.DriverCompliance.complianceTest(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z: I39 Branch 2 IFEQ L106 - true
   */

	@Test(timeout=300000)
  public void test13()  throws Throwable  {
      Trace trace0 = Trace.getLogger("z");
      DriverCompliance driverCompliance0 = new DriverCompliance(trace0);
      try { 
        driverCompliance0.complianceTest("z", "z", "z", "z", "z", "z");
        fail("Expecting exception: ConnectException");
      
      } catch(ConnectException e) {
         //
         // could not load driver for class name z and driverPath z
         //
         assertThrownBy("org.objectweb.cjdbc.controller.backend.DriverCompliance", e);
      }
  }
}
