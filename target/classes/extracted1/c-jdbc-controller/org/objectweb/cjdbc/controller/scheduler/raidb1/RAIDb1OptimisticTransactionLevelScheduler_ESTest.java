/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 19 01:58:11 GMT 2016
 */

package org.objectweb.cjdbc.controller.scheduler.raidb1;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import java.sql.SQLException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.CreateRequest;
import org.objectweb.cjdbc.common.sql.DeleteRequest;
import org.objectweb.cjdbc.common.sql.DropRequest;
import org.objectweb.cjdbc.common.sql.SelectRequest;
import org.objectweb.cjdbc.common.sql.StoredProcedure;
import org.objectweb.cjdbc.common.sql.schema.DatabaseSchema;
import org.objectweb.cjdbc.controller.requestmanager.TransactionMarkerMetaData;
import org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RAIDb1OptimisticTransactionLevelScheduler_ESTest extends RAIDb1OptimisticTransactionLevelScheduler_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.getXmlImpl()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      String string0 = rAIDb1OptimisticTransactionLevelScheduler0.getXmlImpl();
      assertEquals("<RAIDb-1Scheduler level=\"optimisticTransaction\"/>", string0);
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.rollbackTransaction(JLjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      rAIDb1OptimisticTransactionLevelScheduler0.rollbackTransaction(469L, "");
      assertEquals(1, rAIDb1OptimisticTransactionLevelScheduler0.getParsingGranularity());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.commitTransaction(J)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData(1L, 1L, "");
      // Undeclared exception!
      try { 
        rAIDb1OptimisticTransactionLevelScheduler0.commit(transactionMarkerMetaData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler", e);
      }
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.releaseSavepointTransaction(JLjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      rAIDb1OptimisticTransactionLevelScheduler0.releaseSavepointTransaction(1146L, "S)q]?etnvO");
      assertEquals(0, rAIDb1OptimisticTransactionLevelScheduler0.getPendingTransactions());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      // Undeclared exception!
      try { 
        rAIDb1OptimisticTransactionLevelScheduler0.scheduleReadRequest((SelectRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler", e);
      }
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.readCompletedNotify(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      SelectRequest selectRequest0 = new SelectRequest("Q72]", true, 30000, "aH");
      rAIDb1OptimisticTransactionLevelScheduler0.readCompletedNotify(selectRequest0);
      assertEquals(30000, selectRequest0.getTimeout());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.scheduleNonSuspendedStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure("Removing all tables.", false, 0, "d!fgr", true);
      try { 
        rAIDb1OptimisticTransactionLevelScheduler0.scheduleNonSuspendedStoredProcedure(storedProcedure0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Stored procedures are not supported by the RAIDb-1 optimistic transaction level scheduler.
         //
         assertThrownBy("org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler", e);
      }
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.mergeDatabaseSchema(Lorg/objectweb/cjdbc/common/sql/schema/DatabaseSchema;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      rAIDb1OptimisticTransactionLevelScheduler0.mergeDatabaseSchema((DatabaseSchema) null);
      assertEquals(0, rAIDb1OptimisticTransactionLevelScheduler0.getPendingWrites());
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      // Undeclared exception!
      try { 
        rAIDb1OptimisticTransactionLevelScheduler0.notifyStoredProcedureCompleted((StoredProcedure) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stored procedures are not supported by the RAIDb-1 optimistic transaction level scheduler.
         //
         assertThrownBy("org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler", e);
      }
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.setSavepointTransaction(JLjava/lang/String;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      rAIDb1OptimisticTransactionLevelScheduler0.setSavepointTransaction(469L, "");
      assertFalse(rAIDb1OptimisticTransactionLevelScheduler0.isSuspendedTransactions());
  }

  //Test case number: 10
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.setDatabaseSchema(Lorg/objectweb/cjdbc/common/sql/schema/DatabaseSchema;)V: I4 Branch 1 IFNONNULL L101 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.setDatabaseSchema(Lorg/objectweb/cjdbc/common/sql/schema/DatabaseSchema;)V: I4 Branch 1 IFNONNULL L101 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.setDatabaseSchema(Lorg/objectweb/cjdbc/common/sql/schema/DatabaseSchema;)V: I40 Branch 2 IFNONNULL L111 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.setDatabaseSchema(Lorg/objectweb/cjdbc/common/sql/schema/DatabaseSchema;)V: I62 Branch 3 IF_ICMPGE L119 - true
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.setDatabaseSchema(Lorg/objectweb/cjdbc/common/sql/schema/DatabaseSchema;)V: I117 Branch 6 IF_ICMPGE L132 - true
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      rAIDb1OptimisticTransactionLevelScheduler0.setDatabaseSchema((DatabaseSchema) null);
      rAIDb1OptimisticTransactionLevelScheduler0.setDatabaseSchema((DatabaseSchema) null);
      assertEquals(0, rAIDb1OptimisticTransactionLevelScheduler0.getNumberRead());
  }

  //Test case number: 11
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 9 IFEQ L195 - false
   */

	@Test(timeout=300000)
  public void test11()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      CreateRequest createRequest0 = new CreateRequest("cDkJ?ur{'0;'I<*", true, (-2025), "*w%jXEjWAb");
      rAIDb1OptimisticTransactionLevelScheduler0.scheduleNonSuspendedWriteRequest(createRequest0);
      assertEquals(0L, createRequest0.getId());
  }

  //Test case number: 12
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.setDatabaseSchema(Lorg/objectweb/cjdbc/common/sql/schema/DatabaseSchema;)V: I4 Branch 1 IFNONNULL L101 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 9 IFEQ L195 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I49 Branch 10 IFNONNULL L206 - false
   */

	@Test(timeout=300000)
  public void test12()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      DeleteRequest deleteRequest0 = new DeleteRequest("f", true, 52, "f", (DatabaseSchema) null, 0, true);
      rAIDb1OptimisticTransactionLevelScheduler0.setDatabaseSchema((DatabaseSchema) null);
      try { 
        rAIDb1OptimisticTransactionLevelScheduler0.scheduleNonSuspendedWriteRequest(deleteRequest0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No table found for request 0
         //
         assertThrownBy("org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler", e);
      }
  }

  //Test case number: 13
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 22 IFEQ L300 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I61 Branch 24 IFEQ L311 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I118 Branch 26 IFEQ L326 - true
   */

	@Test(timeout=300000)
  public void test13()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      DeleteRequest deleteRequest0 = new DeleteRequest("f", true, 52, "f", (DatabaseSchema) null, 0, true);
      rAIDb1OptimisticTransactionLevelScheduler0.notifyWriteCompleted(deleteRequest0);
      assertNull(deleteRequest0.getLogin());
  }

  //Test case number: 14
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 22 IFEQ L300 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I9 Branch 23 IFEQ L302 - true
   */

	@Test(timeout=300000)
  public void test14()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      CreateRequest createRequest0 = new CreateRequest("y?,(eZrs", true, 3993, "y?,(eZrs");
      // Undeclared exception!
      try { 
        rAIDb1OptimisticTransactionLevelScheduler0.notifyWriteCompleted(createRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal null database table name in DatabaseTable constructor
         //
         assertThrownBy("org.objectweb.cjdbc.common.sql.schema.DatabaseTable", e);
      }
  }

  //Test case number: 15
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 22 IFEQ L300 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I61 Branch 24 IFEQ L311 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I66 Branch 25 IFEQ L313 - true
   */

	@Test(timeout=300000)
  public void test15()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      DropRequest dropRequest0 = new DropRequest(",!", false, 0, ",!");
      // Undeclared exception!
      try { 
        rAIDb1OptimisticTransactionLevelScheduler0.writeCompleted(dropRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler", e);
      }
  }

  //Test case number: 16
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.setDatabaseSchema(Lorg/objectweb/cjdbc/common/sql/schema/DatabaseSchema;)V: I4 Branch 1 IFNONNULL L101 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 22 IFEQ L300 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I61 Branch 24 IFEQ L311 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I118 Branch 26 IFEQ L326 - false
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I130 Branch 27 IFNONNULL L330 - false
   */

	@Test(timeout=300000)
  public void test16()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      DeleteRequest deleteRequest0 = new DeleteRequest("f", true, 52, "f", (DatabaseSchema) null, 0, true);
      deleteRequest0.setIsAutoCommit(true);
      rAIDb1OptimisticTransactionLevelScheduler0.setDatabaseSchema((DatabaseSchema) null);
      rAIDb1OptimisticTransactionLevelScheduler0.notifyWriteCompleted(deleteRequest0);
      assertNull(deleteRequest0.getSqlSkeleton());
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.rollbackTransaction(J)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.setDatabaseSchema(Lorg/objectweb/cjdbc/common/sql/schema/DatabaseSchema;)V: I4 Branch 1 IFNONNULL L101 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1OptimisticTransactionLevelScheduler.releaseLocks(J)V: I18 Branch 28 IF_ICMPGE L417 - true
   */

	@Test(timeout=300000)
  public void test17()  throws Throwable  {
      RAIDb1OptimisticTransactionLevelScheduler rAIDb1OptimisticTransactionLevelScheduler0 = new RAIDb1OptimisticTransactionLevelScheduler();
      rAIDb1OptimisticTransactionLevelScheduler0.setDatabaseSchema((DatabaseSchema) null);
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData((-1841L), (-1841L), "w;?1vuu$>Gm");
      rAIDb1OptimisticTransactionLevelScheduler0.rollback(transactionMarkerMetaData0);
      assertEquals(1, rAIDb1OptimisticTransactionLevelScheduler0.getParsingGranularity());
  }
}
