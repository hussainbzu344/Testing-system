/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 19 00:11:44 GMT 2016
 */

package org.objectweb.cjdbc.controller.virtualdatabase.protocol;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.exceptions.NoMoreBackendException;
import org.objectweb.cjdbc.common.sql.AbstractWriteRequest;
import org.objectweb.cjdbc.common.sql.InsertRequest;
import org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter;
import org.objectweb.cjdbc.common.sql.filters.NoneBlobFilter;
import org.objectweb.cjdbc.controller.cache.result.AbstractResultCache;
import org.objectweb.cjdbc.controller.cache.result.ResultCacheColumnUnique;
import org.objectweb.cjdbc.controller.core.Controller;
import org.objectweb.cjdbc.controller.loadbalancer.AbstractLoadBalancer;
import org.objectweb.cjdbc.controller.loadbalancer.policies.WaitForCompletionPolicy;
import org.objectweb.cjdbc.controller.loadbalancer.raidb1.RAIDb1_WRR;
import org.objectweb.cjdbc.controller.recoverylog.RecoveryLog;
import org.objectweb.cjdbc.controller.requestmanager.distributed.DistributedRequestManager;
import org.objectweb.cjdbc.controller.requestmanager.distributed.RAIDb1DistributedRequestManager;
import org.objectweb.cjdbc.controller.scheduler.AbstractScheduler;
import org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PassThroughScheduler;
import org.objectweb.cjdbc.controller.virtualdatabase.DistributedVirtualDatabase;
import org.objectweb.cjdbc.controller.virtualdatabase.VirtualDatabase;
import org.objectweb.cjdbc.controller.virtualdatabase.protocol.ExecWriteRequest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ExecWriteRequest_ESTest extends ExecWriteRequest_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.virtualdatabase.protocol.ExecWriteRequest.<init>(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.virtualdatabase.protocol.ExecWriteRequest.scheduleRequest(Lorg/objectweb/cjdbc/controller/requestmanager/distributed/DistributedRequestManager;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test0()  throws Throwable  {
      InsertRequest insertRequest0 = new InsertRequest("", false, (-1), "", false);
      ExecWriteRequest execWriteRequest0 = new ExecWriteRequest((AbstractWriteRequest) insertRequest0);
      // Undeclared exception!
      try { 
        execWriteRequest0.scheduleRequest((DistributedRequestManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.virtualdatabase.protocol.ExecWriteRequest", e);
      }
  }

  //Test case number: 1
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.virtualdatabase.protocol.ExecWriteRequest.<init>(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.virtualdatabase.protocol.ExecWriteRequest.executeScheduledRequest(Lorg/objectweb/cjdbc/controller/requestmanager/distributed/DistributedRequestManager;)Ljava/lang/Object;: I15 Branch 1 IFNE L76 - false
   * Goal 3. org.objectweb.cjdbc.controller.virtualdatabase.protocol.ExecWriteRequest.executeScheduledRequest(Lorg/objectweb/cjdbc/controller/requestmanager/distributed/DistributedRequestManager;)Ljava/lang/Object;: I54 Branch 2 IFEQ L86 - true
   * Goal 4. org.objectweb.cjdbc.controller.virtualdatabase.protocol.ExecWriteRequest.executeScheduledRequest(Lorg/objectweb/cjdbc/controller/requestmanager/distributed/DistributedRequestManager;)Ljava/lang/Object;: I72 Branch 3 IFNULL L94 - true
   */

	@Test(timeout=300000)
  public void test1()  throws Throwable  {
      Controller controller0 = new Controller((String) null, 794, 794);
      NoneBlobFilter noneBlobFilter0 = new NoneBlobFilter();
      DistributedVirtualDatabase distributedVirtualDatabase0 = new DistributedVirtualDatabase(controller0, (String) null, (String) null, 794, false, 794, 794, (long) 794, 794, (AbstractBlobFilter) noneBlobFilter0);
      RAIDb1PassThroughScheduler rAIDb1PassThroughScheduler0 = new RAIDb1PassThroughScheduler((VirtualDatabase) distributedVirtualDatabase0);
      ResultCacheColumnUnique resultCacheColumnUnique0 = new ResultCacheColumnUnique(794, 794);
      RAIDb1_WRR rAIDb1_WRR0 = new RAIDb1_WRR((VirtualDatabase) distributedVirtualDatabase0, (WaitForCompletionPolicy) null);
      RAIDb1DistributedRequestManager rAIDb1DistributedRequestManager0 = new RAIDb1DistributedRequestManager(distributedVirtualDatabase0, (AbstractScheduler) rAIDb1PassThroughScheduler0, (AbstractResultCache) resultCacheColumnUnique0, (AbstractLoadBalancer) rAIDb1_WRR0, (RecoveryLog) null, (long) 794, (long) 794, 803L);
      ExecWriteRequest execWriteRequest0 = new ExecWriteRequest((AbstractWriteRequest) null);
      try { 
        execWriteRequest0.executeScheduledRequest(rAIDb1DistributedRequestManager0);
        fail("Expecting exception: NoMoreBackendException");
      
      } catch(NoMoreBackendException e) {
         //
         // No backend enabled on this controller
         //
         assertThrownBy("org.objectweb.cjdbc.controller.virtualdatabase.protocol.ExecWriteRequest", e);
      }
  }
}
