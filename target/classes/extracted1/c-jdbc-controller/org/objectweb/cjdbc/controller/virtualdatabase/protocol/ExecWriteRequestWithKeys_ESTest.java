/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 19 00:17:35 GMT 2016
 */

package org.objectweb.cjdbc.controller.virtualdatabase.protocol;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.exceptions.NoMoreBackendException;
import org.objectweb.cjdbc.common.sql.AbstractWriteRequest;
import org.objectweb.cjdbc.common.sql.DropRequest;
import org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter;
import org.objectweb.cjdbc.common.sql.filters.Base64Filter;
import org.objectweb.cjdbc.controller.cache.result.AbstractResultCache;
import org.objectweb.cjdbc.controller.cache.result.ResultCacheColumnUnique;
import org.objectweb.cjdbc.controller.core.Controller;
import org.objectweb.cjdbc.controller.loadbalancer.AbstractLoadBalancer;
import org.objectweb.cjdbc.controller.loadbalancer.policies.WaitForCompletionPolicy;
import org.objectweb.cjdbc.controller.loadbalancer.raidb1.RAIDb1_RR;
import org.objectweb.cjdbc.controller.recoverylog.RecoveryLog;
import org.objectweb.cjdbc.controller.requestmanager.distributed.DistributedRequestManager;
import org.objectweb.cjdbc.controller.requestmanager.distributed.RAIDb2DistributedRequestManager;
import org.objectweb.cjdbc.controller.scheduler.AbstractScheduler;
import org.objectweb.cjdbc.controller.scheduler.raidb1.RAIDb1PassThroughScheduler;
import org.objectweb.cjdbc.controller.virtualdatabase.DistributedVirtualDatabase;
import org.objectweb.cjdbc.controller.virtualdatabase.VirtualDatabase;
import org.objectweb.cjdbc.controller.virtualdatabase.protocol.ExecWriteRequestWithKeys;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ExecWriteRequestWithKeys_ESTest extends ExecWriteRequestWithKeys_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.virtualdatabase.protocol.ExecWriteRequestWithKeys.<init>(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.virtualdatabase.protocol.ExecWriteRequestWithKeys.scheduleRequest(Lorg/objectweb/cjdbc/controller/requestmanager/distributed/DistributedRequestManager;)V: I11 Branch 1 IFNE L63 - false
   */

	@Test(timeout=300000)
  public void test0()  throws Throwable  {
      DropRequest dropRequest0 = new DropRequest((String) null, false, 606, (String) null);
      ExecWriteRequestWithKeys execWriteRequestWithKeys0 = new ExecWriteRequestWithKeys((AbstractWriteRequest) dropRequest0);
      Controller controller0 = new Controller((String) null, 606, 606);
      Base64Filter base64Filter0 = new Base64Filter();
      DistributedVirtualDatabase distributedVirtualDatabase0 = new DistributedVirtualDatabase(controller0, (String) null, (String) null, 606, false, 606, 606, (long) 606, 606, (AbstractBlobFilter) base64Filter0);
      RAIDb1PassThroughScheduler rAIDb1PassThroughScheduler0 = new RAIDb1PassThroughScheduler((VirtualDatabase) distributedVirtualDatabase0);
      ResultCacheColumnUnique resultCacheColumnUnique0 = new ResultCacheColumnUnique(606, 606);
      WaitForCompletionPolicy waitForCompletionPolicy0 = new WaitForCompletionPolicy();
      RAIDb1_RR rAIDb1_RR0 = new RAIDb1_RR((VirtualDatabase) distributedVirtualDatabase0, waitForCompletionPolicy0);
      RAIDb2DistributedRequestManager rAIDb2DistributedRequestManager0 = new RAIDb2DistributedRequestManager(distributedVirtualDatabase0, (AbstractScheduler) rAIDb1PassThroughScheduler0, (AbstractResultCache) resultCacheColumnUnique0, (AbstractLoadBalancer) rAIDb1_RR0, (RecoveryLog) null, (long) 606, (long) 606, (long) 606);
      execWriteRequestWithKeys0.scheduleRequest(rAIDb2DistributedRequestManager0);
      assertEquals(281474976710655L, DistributedRequestManager.TRANSACTION_ID_BIT_MASK);
  }

  //Test case number: 1
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.virtualdatabase.protocol.ExecWriteRequestWithKeys.<init>(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.virtualdatabase.protocol.ExecWriteRequestWithKeys.executeScheduledRequest(Lorg/objectweb/cjdbc/controller/requestmanager/distributed/DistributedRequestManager;)Ljava/lang/Object;: I8 Branch 2 IFNE L80 - false
   * Goal 3. org.objectweb.cjdbc.controller.virtualdatabase.protocol.ExecWriteRequestWithKeys.executeScheduledRequest(Lorg/objectweb/cjdbc/controller/requestmanager/distributed/DistributedRequestManager;)Ljava/lang/Object;: I44 Branch 3 IFEQ L91 - true
   * Goal 4. org.objectweb.cjdbc.controller.virtualdatabase.protocol.ExecWriteRequestWithKeys.executeScheduledRequest(Lorg/objectweb/cjdbc/controller/requestmanager/distributed/DistributedRequestManager;)Ljava/lang/Object;: I62 Branch 4 IFNULL L98 - true
   */

	@Test(timeout=300000)
  public void test1()  throws Throwable  {
      DropRequest dropRequest0 = new DropRequest((String) null, false, 606, (String) null);
      ExecWriteRequestWithKeys execWriteRequestWithKeys0 = new ExecWriteRequestWithKeys((AbstractWriteRequest) dropRequest0);
      Controller controller0 = new Controller((String) null, 606, 606);
      Base64Filter base64Filter0 = new Base64Filter();
      DistributedVirtualDatabase distributedVirtualDatabase0 = new DistributedVirtualDatabase(controller0, (String) null, (String) null, 606, false, 606, 606, (long) 606, 606, (AbstractBlobFilter) base64Filter0);
      RAIDb1PassThroughScheduler rAIDb1PassThroughScheduler0 = new RAIDb1PassThroughScheduler((VirtualDatabase) distributedVirtualDatabase0);
      ResultCacheColumnUnique resultCacheColumnUnique0 = new ResultCacheColumnUnique(606, 606);
      WaitForCompletionPolicy waitForCompletionPolicy0 = new WaitForCompletionPolicy();
      RAIDb1_RR rAIDb1_RR0 = new RAIDb1_RR((VirtualDatabase) distributedVirtualDatabase0, waitForCompletionPolicy0);
      RAIDb2DistributedRequestManager rAIDb2DistributedRequestManager0 = new RAIDb2DistributedRequestManager(distributedVirtualDatabase0, (AbstractScheduler) rAIDb1PassThroughScheduler0, (AbstractResultCache) resultCacheColumnUnique0, (AbstractLoadBalancer) rAIDb1_RR0, (RecoveryLog) null, (long) 606, (long) 606, (long) 606);
      try { 
        execWriteRequestWithKeys0.executeScheduledRequest(rAIDb2DistributedRequestManager0);
        fail("Expecting exception: NoMoreBackendException");
      
      } catch(NoMoreBackendException e) {
         //
         // No backend enabled on this controller
         //
         assertThrownBy("org.objectweb.cjdbc.controller.virtualdatabase.protocol.ExecWriteRequestWithKeys", e);
      }
  }
}
