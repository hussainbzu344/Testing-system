/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 19 02:33:11 GMT 2016
 */

package org.objectweb.cjdbc.controller.scheduler.schema;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.DropRequest;
import org.objectweb.cjdbc.common.sql.InsertRequest;
import org.objectweb.cjdbc.common.sql.SelectRequest;
import org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TransactionExclusiveLock_ESTest extends TransactionExclusiveLock_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock$WaitingListElement.<init>(Lorg/objectweb/cjdbc/controller/scheduler/schema/TransactionExclusiveLock;Ljava/lang/Thread;J)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.<init>()V: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.acquire(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Z: I33 Branch 1 IFNE L116 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.acquire(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Z: I33 Branch 1 IFNE L116 - false
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.acquire(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Z: I58 Branch 2 IFNE L124 - true
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.acquire(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Z: I119 Branch 4 IFNE L137 - true
   */

	@Test(timeout=300000)
  public void test0()  throws Throwable  {
      TransactionExclusiveLock transactionExclusiveLock0 = new TransactionExclusiveLock();
      DropRequest dropRequest0 = new DropRequest("aAxymX9AZo0{", false, (-8), "aAxymX9AZo0{");
      dropRequest0.setIsAutoCommit(true);
      InsertRequest insertRequest0 = new InsertRequest("aAxymX9AZo0{", false, (-8), "aAxymX9AZo0{", false);
      transactionExclusiveLock0.acquire(insertRequest0);
      // Undeclared exception!
      try { 
        transactionExclusiveLock0.acquire(dropRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         assertThrownBy("java.lang.Object", e);
      }
  }

  //Test case number: 1
  /*
   * 12 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock$WaitingListElement.<init>(Lorg/objectweb/cjdbc/controller/scheduler/schema/TransactionExclusiveLock;Ljava/lang/Thread;J)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock$WaitingListElement.getTransactionId()J: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock$WaitingListElement.getThread()Ljava/lang/Thread;: root-Branch
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.<init>()V: root-Branch
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.acquire(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Z: I33 Branch 1 IFNE L116 - true
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.acquire(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Z: I33 Branch 1 IFNE L116 - false
   * Goal 7. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.acquire(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Z: I58 Branch 2 IFNE L124 - false
   * Goal 8. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.acquire(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Z: I63 Branch 3 IFNE L124 - true
   * Goal 9. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.acquire(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Z: I119 Branch 4 IFNE L137 - true
   * Goal 10. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.acquire(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Z: I196 Branch 5 IFLE L151 - false
   * Goal 11. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.release()V: I5 Branch 7 IFLE L191 - true
   * Goal 12. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.release()V: I11 Branch 8 IFNE L191 - false
   */

	@Test(timeout=300000)
  public void test1()  throws Throwable  {
      TransactionExclusiveLock transactionExclusiveLock0 = new TransactionExclusiveLock();
      InsertRequest insertRequest0 = new InsertRequest("", true, 1, "", true);
      transactionExclusiveLock0.acquire(insertRequest0);
      insertRequest0.setTransactionId(1);
      transactionExclusiveLock0.acquire(insertRequest0);
      transactionExclusiveLock0.release();
      assertEquals(1L, transactionExclusiveLock0.getLocker());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.isLocked()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test2()  throws Throwable  {
      TransactionExclusiveLock transactionExclusiveLock0 = new TransactionExclusiveLock();
      boolean boolean0 = transactionExclusiveLock0.isLocked();
      assertFalse(boolean0);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.getLocker()J: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test3()  throws Throwable  {
      TransactionExclusiveLock transactionExclusiveLock0 = new TransactionExclusiveLock();
      transactionExclusiveLock0.getLocker();
      assertFalse(transactionExclusiveLock0.isLocked());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.getWaitingList()Ljava/util/ArrayList;: root-Branch
   */

	@Test(timeout=300000)
  public void test4()  throws Throwable  {
      TransactionExclusiveLock transactionExclusiveLock0 = new TransactionExclusiveLock();
      transactionExclusiveLock0.getWaitingList();
      assertFalse(transactionExclusiveLock0.isLocked());
  }

  //Test case number: 5
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.acquire(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Z: I33 Branch 1 IFNE L116 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.acquire(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Z: I33 Branch 1 IFNE L116 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.acquire(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Z: I58 Branch 2 IFNE L124 - false
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.acquire(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Z: I63 Branch 3 IFNE L124 - false
   */

	@Test(timeout=300000)
  public void test5()  throws Throwable  {
      TransactionExclusiveLock transactionExclusiveLock0 = new TransactionExclusiveLock();
      assertFalse(transactionExclusiveLock0.isLocked());
      
      SelectRequest selectRequest0 = new SelectRequest("", false, 1263, "");
      transactionExclusiveLock0.acquire(selectRequest0);
      boolean boolean0 = transactionExclusiveLock0.acquire(selectRequest0);
      assertTrue(transactionExclusiveLock0.isLocked());
      assertTrue(boolean0);
  }

  //Test case number: 6
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.release()V: I5 Branch 7 IFLE L191 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.release()V: I11 Branch 8 IFNE L191 - true
   */

	@Test(timeout=300000)
  public void test6()  throws Throwable  {
      TransactionExclusiveLock transactionExclusiveLock0 = new TransactionExclusiveLock();
      transactionExclusiveLock0.release();
      assertFalse(transactionExclusiveLock0.isLocked());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.schema.TransactionExclusiveLock.isWaiting(J)Z: I13 Branch 9 IF_ICMPGE L249 - true
   */

	@Test(timeout=300000)
  public void test7()  throws Throwable  {
      TransactionExclusiveLock transactionExclusiveLock0 = new TransactionExclusiveLock();
      boolean boolean0 = transactionExclusiveLock0.isWaiting(1);
      assertFalse(transactionExclusiveLock0.isLocked());
      assertFalse(boolean0);
  }
}
