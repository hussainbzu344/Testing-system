/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 18 18:15:37 GMT 2016
 */

package org.objectweb.cjdbc.controller.cache.result;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import org.apache.regexp.RE;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.CreateRequest;
import org.objectweb.cjdbc.common.sql.DeleteRequest;
import org.objectweb.cjdbc.common.sql.schema.DatabaseSchema;
import org.objectweb.cjdbc.controller.cache.result.ResultCacheRule;
import org.objectweb.cjdbc.controller.cache.result.rules.EagerCaching;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ResultCacheRule_ESTest extends ResultCacheRule_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.cache.result.ResultCacheRule.getXml()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.cache.result.ResultCacheRule.<init>(Ljava/lang/String;ZZJ)V: I8 Branch 1 IFNONNULL L44 - false
   */

	@Test(timeout=300000)
  public void test0()  throws Throwable  {
      ResultCacheRule resultCacheRule0 = new ResultCacheRule("", true, true, 1223L);
      // Undeclared exception!
      try { 
        resultCacheRule0.getXml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.cache.result.ResultCacheRule", e);
      }
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.cache.result.ResultCacheRule.getCacheBehavior()Lorg/objectweb/cjdbc/controller/cache/result/CacheBehavior;: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.cache.result.ResultCacheRule.<init>(Ljava/lang/String;ZZJ)V: I8 Branch 1 IFNONNULL L44 - false
   */

	@Test(timeout=300000)
  public void test1()  throws Throwable  {
      ResultCacheRule resultCacheRule0 = new ResultCacheRule("", true, true, (-900L));
      resultCacheRule0.getCacheBehavior();
      assertEquals((-900L), resultCacheRule0.getTimestampResolution());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.cache.result.ResultCacheRule.getTimestampResolution()J: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.cache.result.ResultCacheRule.<init>(Ljava/lang/String;ZZJ)V: I8 Branch 1 IFNONNULL L44 - false
   */

	@Test(timeout=300000)
  public void test2()  throws Throwable  {
      ResultCacheRule resultCacheRule0 = new ResultCacheRule("", false, false, 1L);
      long long0 = resultCacheRule0.getTimestampResolution();
      assertEquals(1L, long0);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.cache.result.ResultCacheRule.setCacheBehavior(Lorg/objectweb/cjdbc/controller/cache/result/CacheBehavior;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.cache.result.ResultCacheRule.<init>(Ljava/lang/String;ZZJ)V: I8 Branch 1 IFNONNULL L44 - false
   */

	@Test(timeout=300000)
  public void test3()  throws Throwable  {
      ResultCacheRule resultCacheRule0 = new ResultCacheRule("", true, true, (-900L));
      EagerCaching eagerCaching0 = new EagerCaching((-900L));
      resultCacheRule0.setCacheBehavior(eagerCaching0);
      assertEquals((-900L), resultCacheRule0.getTimestampResolution());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.cache.result.ResultCacheRule.getQueryPattern()Lorg/apache/regexp/RE;: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.cache.result.ResultCacheRule.<init>(Ljava/lang/String;ZZJ)V: I8 Branch 1 IFNONNULL L44 - false
   */

	@Test(timeout=300000)
  public void test4()  throws Throwable  {
      ResultCacheRule resultCacheRule0 = new ResultCacheRule("i-;", false, false, 0L);
      RE rE0 = resultCacheRule0.getQueryPattern();
      assertEquals(1, RE.MATCH_CASEINDEPENDENT);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.cache.result.ResultCacheRule.<init>(Ljava/lang/String;ZZJ)V: I8 Branch 1 IFNONNULL L44 - true
   * Goal 2. org.objectweb.cjdbc.controller.cache.result.ResultCacheRule.<init>(Ljava/lang/String;ZZJ)V: I8 Branch 1 IFNONNULL L44 - false
   */

	@Test(timeout=300000)
  public void test5()  throws Throwable  {
      ResultCacheRule resultCacheRule0 = new ResultCacheRule("", true, true, (-900L));
      ResultCacheRule resultCacheRule1 = new ResultCacheRule("", true, true, 0L);
      assertFalse(resultCacheRule1.equals((Object)resultCacheRule0));
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.cache.result.ResultCacheRule.<init>(Ljava/lang/String;ZZJ)V: I8 Branch 1 IFNONNULL L44 - false
   * Goal 2. org.objectweb.cjdbc.controller.cache.result.ResultCacheRule.matches(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Lorg/objectweb/cjdbc/controller/cache/result/CacheBehavior;: I7 Branch 2 IFEQ L121 - true
   */

	@Test(timeout=300000)
  public void test6()  throws Throwable  {
      ResultCacheRule resultCacheRule0 = new ResultCacheRule("\" >", true, true, 1000L);
      CreateRequest createRequest0 = new CreateRequest(" = ", true, 0, " = ", (DatabaseSchema) null, 0, false);
      resultCacheRule0.matches(createRequest0);
      assertEquals(1000L, resultCacheRule0.getTimestampResolution());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.cache.result.ResultCacheRule.<init>(Ljava/lang/String;ZZJ)V: I8 Branch 1 IFNONNULL L44 - false
   * Goal 2. org.objectweb.cjdbc.controller.cache.result.ResultCacheRule.matches(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Lorg/objectweb/cjdbc/controller/cache/result/CacheBehavior;: I7 Branch 2 IFEQ L121 - false
   */

	@Test(timeout=300000)
  public void test7()  throws Throwable  {
      ResultCacheRule resultCacheRule0 = new ResultCacheRule("", true, true, (-900L));
      DeleteRequest deleteRequest0 = new DeleteRequest("", false, 0, "");
      resultCacheRule0.matches(deleteRequest0);
      assertEquals((-900L), resultCacheRule0.getTimestampResolution());
  }
}
