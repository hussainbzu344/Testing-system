/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 19 02:44:46 GMT 2016
 */

package org.objectweb.cjdbc.controller.scheduler.raidb2;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.AbstractWriteRequest;
import org.objectweb.cjdbc.common.sql.DeleteRequest;
import org.objectweb.cjdbc.common.sql.SelectRequest;
import org.objectweb.cjdbc.common.sql.StoredProcedure;
import org.objectweb.cjdbc.controller.requestmanager.TransactionMarkerMetaData;
import org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RAIDb2QueryLevelScheduler_ESTest extends RAIDb2QueryLevelScheduler_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.getXmlImpl()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      String string0 = rAIDb2QueryLevelScheduler0.getXmlImpl();
      assertEquals("<RAIDb-2Scheduler level=\"query\"/>\n", string0);
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.commitTransaction(J)V: root-Branch
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      rAIDb2QueryLevelScheduler0.commitTransaction((-3490));
      assertFalse(rAIDb2QueryLevelScheduler0.isSuspendedWrites());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.rollbackTransaction(JLjava/lang/String;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      rAIDb2QueryLevelScheduler0.rollbackTransaction((-317L), "fileExtension");
      assertEquals(2, rAIDb2QueryLevelScheduler0.getRAIDbLevel());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.releaseSavepointTransaction(JLjava/lang/String;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      rAIDb2QueryLevelScheduler0.releaseSavepointTransaction((-1785L), "");
      assertFalse(rAIDb2QueryLevelScheduler0.isSuspendedWrites());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.rollbackTransaction(J)V: root-Branch
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      rAIDb2QueryLevelScheduler0.rollbackTransaction(0);
      assertFalse(rAIDb2QueryLevelScheduler0.isSuspendedWrites());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.setSavepointTransaction(JLjava/lang/String;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      rAIDb2QueryLevelScheduler0.setSavepointTransaction(0L, "");
      assertEquals(0, rAIDb2QueryLevelScheduler0.getPendingWrites());
  }

  //Test case number: 6
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I11 Branch 1 IFNE L99 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I84 Branch 3 IFEQ L115 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I113 Branch 4 IFLE L120 - false
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      SelectRequest selectRequest0 = new SelectRequest("scheduler.commit.timeout.writeSync", true, Integer.MAX_VALUE, "scheduler.commit.timeout.writeSync");
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData((long) Integer.MAX_VALUE, (-2147483648L), "");
      rAIDb2QueryLevelScheduler0.begin(transactionMarkerMetaData0);
      // Undeclared exception!
      try { 
        rAIDb2QueryLevelScheduler0.scheduleReadRequest(selectRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         assertThrownBy("java.lang.Object", e);
      }
  }

  //Test case number: 7
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.readCompletedNotify(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I19 Branch 8 IFEQ L171 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.readCompletedNotify(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I39 Branch 9 IFNE L173 - true
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      SelectRequest selectRequest0 = new SelectRequest("scheduler.commit.timeout.writeSync", true, Integer.MAX_VALUE, "scheduler.commit.timeout.writeSync");
      rAIDb2QueryLevelScheduler0.readCompletedNotify(selectRequest0);
      assertEquals(2147483647, selectRequest0.getTimeout());
  }

  //Test case number: 8
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I11 Branch 1 IFNE L99 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I42 Branch 2 IFEQ L105 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.readCompletedNotify(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I19 Branch 8 IFEQ L171 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.readCompletedNotify(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I39 Branch 9 IFNE L173 - false
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.readCompletedNotify(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I44 Branch 10 IFEQ L175 - true
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      SelectRequest selectRequest0 = new SelectRequest("", true, (-3490), "");
      rAIDb2QueryLevelScheduler0.scheduleReadRequest(selectRequest0);
      rAIDb2QueryLevelScheduler0.readCompletedNotify(selectRequest0);
      assertEquals(0L, selectRequest0.getId());
  }

  //Test case number: 9
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I11 Branch 1 IFNE L99 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I42 Branch 2 IFEQ L105 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I18 Branch 11 IFNE L194 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.waitForReadCompletion(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)V: I11 Branch 22 IFEQ L292 - true
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.waitForReadCompletion(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)V: I40 Branch 23 IFLE L297 - false
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      DeleteRequest deleteRequest0 = new DeleteRequest("Z", false, Integer.MAX_VALUE, "Z");
      SelectRequest selectRequest0 = new SelectRequest("Z", true, (-646), "Z");
      rAIDb2QueryLevelScheduler0.scheduleReadRequest(selectRequest0);
      // Undeclared exception!
      try { 
        rAIDb2QueryLevelScheduler0.scheduleNonSuspendedWriteRequest(deleteRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         assertThrownBy("java.lang.Object", e);
      }
  }

  //Test case number: 10
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I18 Branch 11 IFNE L194 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I34 Branch 12 IFEQ L197 - true
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      DeleteRequest deleteRequest0 = new DeleteRequest("Z", false, Integer.MAX_VALUE, "Z");
      rAIDb2QueryLevelScheduler0.scheduleNonSuspendedWriteRequest(deleteRequest0);
  }

  //Test case number: 11
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I11 Branch 13 IFEQ L218 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I31 Branch 14 IFNE L220 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I36 Branch 15 IFEQ L222 - true
   */

	@Test(timeout=300000)
  public void test11()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      DeleteRequest deleteRequest0 = new DeleteRequest("Z", false, Integer.MAX_VALUE, "Z");
      rAIDb2QueryLevelScheduler0.notifyWriteCompleted(deleteRequest0);
  }

  //Test case number: 12
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I11 Branch 13 IFEQ L218 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I31 Branch 14 IFNE L220 - true
   */

	@Test(timeout=300000)
  public void test12()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      rAIDb2QueryLevelScheduler0.writeCompleted((AbstractWriteRequest) null);
  }

  //Test case number: 13
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I11 Branch 1 IFNE L99 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: I42 Branch 2 IFEQ L105 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.scheduleNonSuspendedStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I18 Branch 16 IFNE L241 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.waitForReadCompletion(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)V: I11 Branch 22 IFEQ L292 - true
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.waitForReadCompletion(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)V: I40 Branch 23 IFLE L297 - false
   */

	@Test(timeout=300000)
  public void test13()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure("Z", false, Integer.MAX_VALUE, "Z", false);
      SelectRequest selectRequest0 = new SelectRequest("Z", true, (-646), "Z");
      rAIDb2QueryLevelScheduler0.scheduleReadRequest(selectRequest0);
      // Undeclared exception!
      try { 
        rAIDb2QueryLevelScheduler0.scheduleNonSuspendedStoredProcedure(storedProcedure0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         assertThrownBy("java.lang.Object", e);
      }
  }

  //Test case number: 14
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.scheduleNonSuspendedStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I18 Branch 16 IFNE L241 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.scheduleNonSuspendedStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I34 Branch 17 IFEQ L244 - true
   */

	@Test(timeout=300000)
  public void test14()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure("Z", false, Integer.MAX_VALUE, "Z", false);
      rAIDb2QueryLevelScheduler0.scheduleNonSuspendedStoredProcedure(storedProcedure0);
  }

  //Test case number: 15
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I11 Branch 19 IFEQ L266 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I36 Branch 20 IFNE L269 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I41 Branch 21 IFEQ L271 - true
   */

	@Test(timeout=300000)
  public void test15()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      rAIDb2QueryLevelScheduler0.notifyStoredProcedureCompleted((StoredProcedure) null);
  }

  //Test case number: 16
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I11 Branch 19 IFEQ L266 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2QueryLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I36 Branch 20 IFNE L269 - true
   */

	@Test(timeout=300000)
  public void test16()  throws Throwable  {
      RAIDb2QueryLevelScheduler rAIDb2QueryLevelScheduler0 = new RAIDb2QueryLevelScheduler();
      rAIDb2QueryLevelScheduler0.rollbackCompleted(0L);
      rAIDb2QueryLevelScheduler0.notifyStoredProcedureCompleted((StoredProcedure) null);
  }
}
