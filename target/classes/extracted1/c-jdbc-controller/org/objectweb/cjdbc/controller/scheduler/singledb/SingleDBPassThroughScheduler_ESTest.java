/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 19 02:15:52 GMT 2016
 */

package org.objectweb.cjdbc.controller.scheduler.singledb;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.DeleteRequest;
import org.objectweb.cjdbc.common.sql.InsertRequest;
import org.objectweb.cjdbc.common.sql.SelectRequest;
import org.objectweb.cjdbc.common.sql.StoredProcedure;
import org.objectweb.cjdbc.common.sql.schema.DatabaseSchema;
import org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SingleDBPassThroughScheduler_ESTest extends SingleDBPassThroughScheduler_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.rollbackTransaction(JLjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      SingleDBPassThroughScheduler singleDBPassThroughScheduler0 = new SingleDBPassThroughScheduler();
      singleDBPassThroughScheduler0.rollbackTransaction(0L, "$");
      assertEquals(-1, singleDBPassThroughScheduler0.getRAIDbLevel());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.readCompletedNotify(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      SingleDBPassThroughScheduler singleDBPassThroughScheduler0 = new SingleDBPassThroughScheduler();
      SelectRequest selectRequest0 = new SelectRequest("INFO", true, 0, "$");
      singleDBPassThroughScheduler0.readCompletedNotify(selectRequest0);
      assertEquals(0, selectRequest0.getMaxRows());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      SingleDBPassThroughScheduler singleDBPassThroughScheduler0 = new SingleDBPassThroughScheduler();
      DeleteRequest deleteRequest0 = new DeleteRequest((String) null, true, 2760, "");
      singleDBPassThroughScheduler0.notifyWriteCompleted(deleteRequest0);
      assertEquals(1, deleteRequest0.getCacheAbility());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.getXmlImpl()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      SingleDBPassThroughScheduler singleDBPassThroughScheduler0 = new SingleDBPassThroughScheduler();
      String string0 = singleDBPassThroughScheduler0.getXmlImpl();
      assertEquals("<SingleDBScheduler level=\"passThrough\"/>", string0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.commitTransaction(J)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      SingleDBPassThroughScheduler singleDBPassThroughScheduler0 = new SingleDBPassThroughScheduler();
      singleDBPassThroughScheduler0.commitTransaction((-704L));
      assertEquals(0, singleDBPassThroughScheduler0.getNumberWrite());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.rollbackTransaction(J)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      SingleDBPassThroughScheduler singleDBPassThroughScheduler0 = new SingleDBPassThroughScheduler();
      singleDBPassThroughScheduler0.rollbackTransaction(3820L);
      assertEquals(-1, singleDBPassThroughScheduler0.getRAIDbLevel());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      SingleDBPassThroughScheduler singleDBPassThroughScheduler0 = new SingleDBPassThroughScheduler();
      SelectRequest selectRequest0 = new SelectRequest("INFO", true, 0, "$");
      singleDBPassThroughScheduler0.scheduleReadRequest(selectRequest0);
      assertEquals(0L, selectRequest0.getId());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.releaseSavepointTransaction(JLjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      SingleDBPassThroughScheduler singleDBPassThroughScheduler0 = new SingleDBPassThroughScheduler();
      singleDBPassThroughScheduler0.releaseSavepointTransaction(609L, "");
      assertEquals(0, singleDBPassThroughScheduler0.getPendingWrites());
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      SingleDBPassThroughScheduler singleDBPassThroughScheduler0 = new SingleDBPassThroughScheduler();
      InsertRequest insertRequest0 = new InsertRequest((String) null, true, 1453, "", (DatabaseSchema) null, 0, true, true);
      singleDBPassThroughScheduler0.scheduleNonSuspendedWriteRequest(insertRequest0);
      assertEquals(0L, insertRequest0.getId());
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.setSavepointTransaction(JLjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      SingleDBPassThroughScheduler singleDBPassThroughScheduler0 = new SingleDBPassThroughScheduler();
      singleDBPassThroughScheduler0.setSavepointTransaction(861L, "?VKLuN9\"oz");
      assertEquals(0, singleDBPassThroughScheduler0.getParsingGranularity());
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      SingleDBPassThroughScheduler singleDBPassThroughScheduler0 = new SingleDBPassThroughScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure((String) null, true, 1453, "e+(p~Z", true);
      singleDBPassThroughScheduler0.notifyStoredProcedureCompleted(storedProcedure0);
      assertTrue(storedProcedure0.needsMacroProcessing());
  }

  //Test case number: 11
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPassThroughScheduler.scheduleNonSuspendedStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test11()  throws Throwable  {
      SingleDBPassThroughScheduler singleDBPassThroughScheduler0 = new SingleDBPassThroughScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure((String) null, true, 1453, "e+(p~Z", true);
      singleDBPassThroughScheduler0.scheduleNonSuspendedStoredProcedure(storedProcedure0);
      assertEquals(0L, storedProcedure0.getId());
  }
}
