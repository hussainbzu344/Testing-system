/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 19 02:55:14 GMT 2016
 */

package org.objectweb.cjdbc.controller.scheduler.raidb2;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.AlterRequest;
import org.objectweb.cjdbc.common.sql.CreateRequest;
import org.objectweb.cjdbc.common.sql.DeleteRequest;
import org.objectweb.cjdbc.common.sql.SelectRequest;
import org.objectweb.cjdbc.common.sql.StoredProcedure;
import org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RAIDb2PessimisticTransactionLevelScheduler_ESTest extends RAIDb2PessimisticTransactionLevelScheduler_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      SelectRequest selectRequest0 = new SelectRequest("", false, 0, "");
      rAIDb2PessimisticTransactionLevelScheduler0.scheduleReadRequest(selectRequest0);
      assertEquals(0, selectRequest0.getTransactionIsolation());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.readCompletedNotify(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      SelectRequest selectRequest0 = new SelectRequest((String) null, true, (-349), (String) null);
      rAIDb2PessimisticTransactionLevelScheduler0.readCompletedNotify(selectRequest0);
      assertEquals(0, selectRequest0.funcType);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.getXmlImpl()Ljava/lang/String;: root-Branch
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      String string0 = rAIDb2PessimisticTransactionLevelScheduler0.getXmlImpl();
      assertEquals("<RAIDb-2Scheduler level=\"pessimisticTransaction\"/>", string0);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.releaseSavepointTransaction(JLjava/lang/String;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      rAIDb2PessimisticTransactionLevelScheduler0.releaseSavepointTransaction(0L, "Kgb[)s8_1t");
      assertEquals(0, rAIDb2PessimisticTransactionLevelScheduler0.getPendingTransactions());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.rollbackTransaction(JLjava/lang/String;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      rAIDb2PessimisticTransactionLevelScheduler0.rollbackTransaction(0, (String) null);
      assertEquals("<RAIDb-2Scheduler level=\"pessimisticTransaction\"/>", rAIDb2PessimisticTransactionLevelScheduler0.getXmlImpl());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.setSavepointTransaction(JLjava/lang/String;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      rAIDb2PessimisticTransactionLevelScheduler0.setSavepointTransaction((-1491L), "");
      assertEquals(0, rAIDb2PessimisticTransactionLevelScheduler0.getPendingWrites());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 1 IFEQ L113 - false
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      CreateRequest createRequest0 = new CreateRequest("jT\"uc[9E_,;5k@", true, (-1431655764), (String) null);
      rAIDb2PessimisticTransactionLevelScheduler0.scheduleNonSuspendedWriteRequest(createRequest0);
      assertEquals(0, createRequest0.getTransactionIsolation());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 5 IFEQ L150 - true
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      AlterRequest alterRequest0 = new AlterRequest("<RAIDb-2Scheduler level=\"pessimisticTransaction\"/>", false, 0, "");
      rAIDb2PessimisticTransactionLevelScheduler0.notifyWriteCompleted(alterRequest0);
      assertEquals(0, rAIDb2PessimisticTransactionLevelScheduler0.getPendingWrites());
  }

  //Test case number: 8
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 5 IFEQ L150 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I7 Branch 6 IFNE L150 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.releaseLock(J)V: I5 Branch 14 IFEQ L251 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.releaseLock(J)V: I48 Branch 17 IFEQ L264 - true
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      DeleteRequest deleteRequest0 = new DeleteRequest("unexpected object type ", true, (-2116360695), "unexpected object type ");
      deleteRequest0.setIsAutoCommit(true);
      rAIDb2PessimisticTransactionLevelScheduler0.notifyWriteCompleted(deleteRequest0);
      assertNull(deleteRequest0.getCursorName());
  }

  //Test case number: 9
  /*
   * 7 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.scheduleNonSuspendedStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I6 Branch 7 IFEQ L160 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.scheduleNonSuspendedStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I41 Branch 8 IFEQ L166 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.commitTransaction(J)V: I5 Branch 12 IFEQ L202 - false
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.releaseLock(J)V: I5 Branch 14 IFEQ L251 - false
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.releaseLock(J)V: I13 Branch 15 IFNE L253 - true
   * Goal 7. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.releaseLock(J)V: I24 Branch 16 IFEQ L259 - true
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure("", true, 2, "", true);
      rAIDb2PessimisticTransactionLevelScheduler0.scheduleNonSuspendedStoredProcedure(storedProcedure0);
      rAIDb2PessimisticTransactionLevelScheduler0.commitTransaction(2);
      assertEquals("<RAIDb-2Scheduler level=\"pessimisticTransaction\"/>", rAIDb2PessimisticTransactionLevelScheduler0.getXmlImpl());
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I4 Branch 10 IFEQ L189 - true
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure("p72-RBN-Y'F=", false, (-4104), "]: column '", false);
      rAIDb2PessimisticTransactionLevelScheduler0.notifyStoredProcedureCompleted(storedProcedure0);
      assertEquals(0, rAIDb2PessimisticTransactionLevelScheduler0.getNumberWrite());
  }

  //Test case number: 11
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I4 Branch 10 IFEQ L189 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I7 Branch 11 IFNE L189 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.releaseLock(J)V: I5 Branch 14 IFEQ L251 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.releaseLock(J)V: I48 Branch 17 IFEQ L264 - true
   */

	@Test(timeout=300000)
  public void test11()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure("cR9jsun", true, (-2756), "cR9jsun", true);
      storedProcedure0.setIsAutoCommit(true);
      rAIDb2PessimisticTransactionLevelScheduler0.notifyStoredProcedureCompleted(storedProcedure0);
      assertEquals(0L, storedProcedure0.getTransactionId());
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.commitTransaction(J)V: I5 Branch 12 IFEQ L202 - true
   */

	@Test(timeout=300000)
  public void test12()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      rAIDb2PessimisticTransactionLevelScheduler0.commitTransaction((-1491L));
      assertFalse(rAIDb2PessimisticTransactionLevelScheduler0.isSuspendedWrites());
  }

  //Test case number: 13
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.rollbackTransaction(J)V: I5 Branch 13 IFEQ L212 - true
   */

	@Test(timeout=300000)
  public void test13()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      rAIDb2PessimisticTransactionLevelScheduler0.rollbackTransaction(0);
      assertEquals(0, rAIDb2PessimisticTransactionLevelScheduler0.getNumberWrite());
  }

  //Test case number: 14
  /*
   * 7 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 1 IFEQ L113 - true
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I44 Branch 2 IFEQ L122 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I79 Branch 3 IFEQ L128 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.rollbackTransaction(J)V: I5 Branch 13 IFEQ L212 - false
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.releaseLock(J)V: I5 Branch 14 IFEQ L251 - false
   * Goal 7. org.objectweb.cjdbc.controller.scheduler.raidb2.RAIDb2PessimisticTransactionLevelScheduler.releaseLock(J)V: I13 Branch 15 IFNE L253 - false
   */

	@Test(timeout=300000)
  public void test14()  throws Throwable  {
      RAIDb2PessimisticTransactionLevelScheduler rAIDb2PessimisticTransactionLevelScheduler0 = new RAIDb2PessimisticTransactionLevelScheduler();
      AlterRequest alterRequest0 = new AlterRequest("<RAIDb-2Scheduler level=\"pessimisticTransaction\"/>", false, 0, "");
      rAIDb2PessimisticTransactionLevelScheduler0.scheduleNonSuspendedWriteRequest(alterRequest0);
      rAIDb2PessimisticTransactionLevelScheduler0.rollbackTransaction(0);
      assertEquals(0, rAIDb2PessimisticTransactionLevelScheduler0.getNumberWrite());
  }
}
