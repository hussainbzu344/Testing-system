/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 19 02:26:29 GMT 2016
 */

package org.objectweb.cjdbc.controller.scheduler.raidb0;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.CreateRequest;
import org.objectweb.cjdbc.common.sql.DeleteRequest;
import org.objectweb.cjdbc.common.sql.DropRequest;
import org.objectweb.cjdbc.common.sql.SelectRequest;
import org.objectweb.cjdbc.common.sql.StoredProcedure;
import org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RAIDb0PessimisticTransactionLevelScheduler_ESTest extends RAIDb0PessimisticTransactionLevelScheduler_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.setSavepointTransaction(JLjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      RAIDb0PessimisticTransactionLevelScheduler rAIDb0PessimisticTransactionLevelScheduler0 = new RAIDb0PessimisticTransactionLevelScheduler();
      rAIDb0PessimisticTransactionLevelScheduler0.setSavepointTransaction(0L, "debug");
      assertEquals(0, rAIDb0PessimisticTransactionLevelScheduler0.getRAIDbLevel());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.readCompletedNotify(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      RAIDb0PessimisticTransactionLevelScheduler rAIDb0PessimisticTransactionLevelScheduler0 = new RAIDb0PessimisticTransactionLevelScheduler();
      rAIDb0PessimisticTransactionLevelScheduler0.readCompletedNotify((SelectRequest) null);
      assertEquals(0, rAIDb0PessimisticTransactionLevelScheduler0.getRAIDbLevel());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.rollbackTransaction(JLjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      RAIDb0PessimisticTransactionLevelScheduler rAIDb0PessimisticTransactionLevelScheduler0 = new RAIDb0PessimisticTransactionLevelScheduler();
      rAIDb0PessimisticTransactionLevelScheduler0.rollbackTransaction(0L, " timed out (");
      assertEquals(0, rAIDb0PessimisticTransactionLevelScheduler0.getNumberWrite());
  }

  //Test case number: 3
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.commitTransaction(J)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.releaseLock(J)V: I5 Branch 12 IFEQ L250 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.releaseLock(J)V: I48 Branch 15 IFEQ L264 - true
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      RAIDb0PessimisticTransactionLevelScheduler rAIDb0PessimisticTransactionLevelScheduler0 = new RAIDb0PessimisticTransactionLevelScheduler();
      rAIDb0PessimisticTransactionLevelScheduler0.commitTransaction((-1L));
      assertFalse(rAIDb0PessimisticTransactionLevelScheduler0.isSuspendedTransactions());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.releaseSavepointTransaction(JLjava/lang/String;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      RAIDb0PessimisticTransactionLevelScheduler rAIDb0PessimisticTransactionLevelScheduler0 = new RAIDb0PessimisticTransactionLevelScheduler();
      rAIDb0PessimisticTransactionLevelScheduler0.releaseSavepointTransaction(0L, "");
      assertEquals(0, rAIDb0PessimisticTransactionLevelScheduler0.getNumberRead());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.getXmlImpl()Ljava/lang/String;: root-Branch
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      RAIDb0PessimisticTransactionLevelScheduler rAIDb0PessimisticTransactionLevelScheduler0 = new RAIDb0PessimisticTransactionLevelScheduler();
      String string0 = rAIDb0PessimisticTransactionLevelScheduler0.getXmlImpl();
      assertEquals("<RAIDb-0Scheduler level=\"pessimisticTransaction\"/>", string0);
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      RAIDb0PessimisticTransactionLevelScheduler rAIDb0PessimisticTransactionLevelScheduler0 = new RAIDb0PessimisticTransactionLevelScheduler();
      SelectRequest selectRequest0 = new SelectRequest("line.separator", true, 0, "('|}W8wZkP*_vF@");
      rAIDb0PessimisticTransactionLevelScheduler0.scheduleReadRequest(selectRequest0);
      assertFalse(selectRequest0.isReadOnly());
  }

  //Test case number: 7
  /*
   * 8 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.rollbackTransaction(J)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 1 IFEQ L115 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I44 Branch 2 IFEQ L124 - false
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I79 Branch 3 IFEQ L130 - true
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.releaseLock(J)V: I5 Branch 12 IFEQ L250 - false
   * Goal 7. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.releaseLock(J)V: I13 Branch 13 IFNE L252 - true
   * Goal 8. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.releaseLock(J)V: I24 Branch 14 IFEQ L259 - true
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      RAIDb0PessimisticTransactionLevelScheduler rAIDb0PessimisticTransactionLevelScheduler0 = new RAIDb0PessimisticTransactionLevelScheduler();
      DropRequest dropRequest0 = new DropRequest("<RAIDb-0Scheduler level=\"pessimisticTransaction\"/>", true, 2865, "<RAIDb-0Scheduler level=\"pessimisticTransaction\"/>");
      rAIDb0PessimisticTransactionLevelScheduler0.scheduleNonSuspendedWriteRequest(dropRequest0);
      rAIDb0PessimisticTransactionLevelScheduler0.rollbackTransaction(2865);
      assertFalse(rAIDb0PessimisticTransactionLevelScheduler0.isSuspendedWrites());
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 1 IFEQ L115 - false
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      RAIDb0PessimisticTransactionLevelScheduler rAIDb0PessimisticTransactionLevelScheduler0 = new RAIDb0PessimisticTransactionLevelScheduler();
      CreateRequest createRequest0 = new CreateRequest(" pending writes)", true, (-1913), " pending writes)");
      rAIDb0PessimisticTransactionLevelScheduler0.scheduleNonSuspendedWriteRequest(createRequest0);
      assertEquals(0L, createRequest0.getTransactionId());
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 5 IFEQ L153 - true
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      RAIDb0PessimisticTransactionLevelScheduler rAIDb0PessimisticTransactionLevelScheduler0 = new RAIDb0PessimisticTransactionLevelScheduler();
      DeleteRequest deleteRequest0 = new DeleteRequest("`G`BF}`:vD\"b", false, (-1608), "`G`BF}`:vD\"b");
      rAIDb0PessimisticTransactionLevelScheduler0.notifyWriteCompleted(deleteRequest0);
      assertFalse(rAIDb0PessimisticTransactionLevelScheduler0.isSuspendedTransactions());
  }

  //Test case number: 10
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 5 IFEQ L153 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I7 Branch 6 IFNE L153 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.releaseLock(J)V: I5 Branch 12 IFEQ L250 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.releaseLock(J)V: I48 Branch 15 IFEQ L264 - true
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      RAIDb0PessimisticTransactionLevelScheduler rAIDb0PessimisticTransactionLevelScheduler0 = new RAIDb0PessimisticTransactionLevelScheduler();
      DropRequest dropRequest0 = new DropRequest("<RAIDb-0Scheduler level=\"pessimisticTransaction\"/>", true, 2865, "<RAIDb-0Scheduler level=\"pessimisticTransaction\"/>");
      dropRequest0.setIsAutoCommit(true);
      rAIDb0PessimisticTransactionLevelScheduler0.notifyWriteCompleted(dropRequest0);
      assertEquals(0, rAIDb0PessimisticTransactionLevelScheduler0.getNumberRead());
  }

  //Test case number: 11
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I4 Branch 10 IFEQ L192 - true
   */

	@Test(timeout=300000)
  public void test11()  throws Throwable  {
      RAIDb0PessimisticTransactionLevelScheduler rAIDb0PessimisticTransactionLevelScheduler0 = new RAIDb0PessimisticTransactionLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure("JQke$&\"-A.6{QAKB/.", true, 1373, "JQke$&\"-A.6{QAKB/.", true);
      rAIDb0PessimisticTransactionLevelScheduler0.notifyStoredProcedureCompleted(storedProcedure0);
      assertEquals(0, rAIDb0PessimisticTransactionLevelScheduler0.getPendingWrites());
  }

  //Test case number: 12
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I4 Branch 10 IFEQ L192 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I7 Branch 11 IFNE L192 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.releaseLock(J)V: I5 Branch 12 IFEQ L250 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.releaseLock(J)V: I48 Branch 15 IFEQ L264 - true
   */

	@Test(timeout=300000)
  public void test12()  throws Throwable  {
      RAIDb0PessimisticTransactionLevelScheduler rAIDb0PessimisticTransactionLevelScheduler0 = new RAIDb0PessimisticTransactionLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure("#~DmpPcoc[]Wr;j^_]", true, 12, "#~DmpPcoc[]Wr;j^_]", true);
      storedProcedure0.setIsAutoCommit(true);
      rAIDb0PessimisticTransactionLevelScheduler0.notifyStoredProcedureCompleted(storedProcedure0);
      assertEquals(0, rAIDb0PessimisticTransactionLevelScheduler0.getParsingGranularity());
  }

  //Test case number: 13
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.rollbackTransaction(J)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.scheduleNonSuspendedStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I6 Branch 7 IFEQ L163 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.scheduleNonSuspendedStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I41 Branch 8 IFEQ L169 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.releaseLock(J)V: I5 Branch 12 IFEQ L250 - false
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.raidb0.RAIDb0PessimisticTransactionLevelScheduler.releaseLock(J)V: I13 Branch 13 IFNE L252 - false
   */

	@Test(timeout=300000)
  public void test13()  throws Throwable  {
      RAIDb0PessimisticTransactionLevelScheduler rAIDb0PessimisticTransactionLevelScheduler0 = new RAIDb0PessimisticTransactionLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure(",|xR{vX?%", false, (-166), "Use this value for the 'false' value when using PreparedStatement.setBoolean method", false);
      rAIDb0PessimisticTransactionLevelScheduler0.scheduleStoredProcedure(storedProcedure0);
      rAIDb0PessimisticTransactionLevelScheduler0.rollbackTransaction(0L);
      assertEquals(0, rAIDb0PessimisticTransactionLevelScheduler0.getParsingGranularity());
  }
}
