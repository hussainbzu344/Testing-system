/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 18 20:57:10 GMT 2016
 */

package org.objectweb.cjdbc.controller.loadbalancer.raidb1;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import java.sql.SQLException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.SelectRequest;
import org.objectweb.cjdbc.common.sql.StoredProcedure;
import org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter;
import org.objectweb.cjdbc.common.sql.filters.NoneBlobFilter;
import org.objectweb.cjdbc.controller.cache.metadata.MetadataCache;
import org.objectweb.cjdbc.controller.core.Controller;
import org.objectweb.cjdbc.controller.loadbalancer.policies.WaitForCompletionPolicy;
import org.objectweb.cjdbc.controller.loadbalancer.raidb1.RAIDb1_LPRF;
import org.objectweb.cjdbc.controller.virtualdatabase.VirtualDatabase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RAIDb1_LPRF_ESTest extends RAIDb1_LPRF_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.raidb1.RAIDb1_LPRF.execReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;Lorg/objectweb/cjdbc/controller/cache/metadata/MetadataCache;)Lorg/objectweb/cjdbc/controller/virtualdatabase/ControllerResultSet;: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.raidb1.RAIDb1_LPRF.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;Lorg/objectweb/cjdbc/controller/loadbalancer/policies/WaitForCompletionPolicy;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.raidb1.RAIDb1_LPRF.executeLPRF(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;ZLjava/lang/String;Lorg/objectweb/cjdbc/controller/cache/metadata/MetadataCache;)Lorg/objectweb/cjdbc/controller/virtualdatabase/ControllerResultSet;: I47 Branch 1 IFNE L159 - false
   */

	@Test(timeout=300000)
  public void test0()  throws Throwable  {
      NoneBlobFilter noneBlobFilter0 = (NoneBlobFilter)AbstractBlobFilter.getBlobFilterInstance("9;U.@98W+");
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "9;U.@98W+", Integer.MAX_VALUE, false, (-2198), 2351, (long) 2351, (-2198), (AbstractBlobFilter) noneBlobFilter0);
      WaitForCompletionPolicy waitForCompletionPolicy0 = new WaitForCompletionPolicy();
      RAIDb1_LPRF rAIDb1_LPRF0 = new RAIDb1_LPRF(virtualDatabase0, waitForCompletionPolicy0);
      SelectRequest selectRequest0 = new SelectRequest("[Iu\"p", true, Integer.MAX_VALUE, "[Iu\"p");
      try { 
        rAIDb1_LPRF0.execReadRequest(selectRequest0, (MetadataCache) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // loadbalancer.execute.no.backend.available
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.raidb1.RAIDb1_LPRF", e);
      }
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.raidb1.RAIDb1_LPRF.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;Lorg/objectweb/cjdbc/controller/loadbalancer/policies/WaitForCompletionPolicy;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.raidb1.RAIDb1_LPRF.execReadOnlyReadStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;Lorg/objectweb/cjdbc/controller/cache/metadata/MetadataCache;)Lorg/objectweb/cjdbc/controller/virtualdatabase/ControllerResultSet;: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.raidb1.RAIDb1_LPRF.executeLPRF(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;ZLjava/lang/String;Lorg/objectweb/cjdbc/controller/cache/metadata/MetadataCache;)Lorg/objectweb/cjdbc/controller/virtualdatabase/ControllerResultSet;: I47 Branch 1 IFNE L159 - false
   */

	@Test(timeout=300000)
  public void test1()  throws Throwable  {
      Controller controller0 = new Controller("Usx]", 1965, 1965);
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "Usx]", 1965, true, 1965, 1965, (long) 1965, 1965, (AbstractBlobFilter) null);
      WaitForCompletionPolicy waitForCompletionPolicy0 = new WaitForCompletionPolicy();
      RAIDb1_LPRF rAIDb1_LPRF0 = new RAIDb1_LPRF(virtualDatabase0, waitForCompletionPolicy0);
      StoredProcedure storedProcedure0 = new StoredProcedure("Usx]", true, 1965, "Usx]", true);
      try { 
        rAIDb1_LPRF0.execReadOnlyReadStoredProcedure(storedProcedure0, (MetadataCache) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // loadbalancer.execute.no.backend.available
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.raidb1.RAIDb1_LPRF", e);
      }
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.raidb1.RAIDb1_LPRF.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;Lorg/objectweb/cjdbc/controller/loadbalancer/policies/WaitForCompletionPolicy;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.raidb1.RAIDb1_LPRF.getRaidb1Xml()Ljava/lang/String;: root-Branch
   */

	@Test(timeout=300000)
  public void test2()  throws Throwable  {
      Controller controller0 = new Controller("", 3, 3);
      NoneBlobFilter noneBlobFilter0 = (NoneBlobFilter)AbstractBlobFilter.getBlobFilterInstance("pdgG+");
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "", 3, true, 3, 3, (long) 3, 3, (AbstractBlobFilter) noneBlobFilter0);
      WaitForCompletionPolicy waitForCompletionPolicy0 = new WaitForCompletionPolicy();
      RAIDb1_LPRF rAIDb1_LPRF0 = new RAIDb1_LPRF(virtualDatabase0, waitForCompletionPolicy0);
      String string0 = rAIDb1_LPRF0.getRaidb1Xml();
      assertEquals("<RAIDb-1-LeastPendingRequestsFirst/>", string0);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.raidb1.RAIDb1_LPRF.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;Lorg/objectweb/cjdbc/controller/loadbalancer/policies/WaitForCompletionPolicy;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.raidb1.RAIDb1_LPRF.getInformation()Ljava/lang/String;: I10 Branch 10 IFNE L250 - false
   */

	@Test(timeout=300000)
  public void test3()  throws Throwable  {
      Controller controller0 = new Controller("Usx]", 1965, 1965);
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "Usx]", 1965, true, 1965, 1965, (long) 1965, 1965, (AbstractBlobFilter) null);
      WaitForCompletionPolicy waitForCompletionPolicy0 = new WaitForCompletionPolicy();
      RAIDb1_LPRF rAIDb1_LPRF0 = new RAIDb1_LPRF(virtualDatabase0, waitForCompletionPolicy0);
      String string0 = rAIDb1_LPRF0.getInformation();
      assertEquals("RAIDb-1 Least Pending Request First load balancer: !!!Warning!!! No backend nodes found\n", string0);
  }
}
