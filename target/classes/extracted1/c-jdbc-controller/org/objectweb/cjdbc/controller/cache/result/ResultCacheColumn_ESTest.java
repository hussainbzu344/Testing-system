/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 18 17:32:24 GMT 2016
 */

package org.objectweb.cjdbc.controller.cache.result;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.CreateRequest;
import org.objectweb.cjdbc.common.sql.SelectRequest;
import org.objectweb.cjdbc.common.sql.UpdateRequest;
import org.objectweb.cjdbc.common.sql.schema.DatabaseSchema;
import org.objectweb.cjdbc.controller.cache.result.AbstractResultCache;
import org.objectweb.cjdbc.controller.cache.result.ResultCacheColumn;
import org.objectweb.cjdbc.controller.cache.result.entries.ResultCacheEntryEager;
import org.objectweb.cjdbc.controller.virtualdatabase.ControllerResultSet;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ResultCacheColumn_ESTest extends ResultCacheColumn_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.cache.result.ResultCacheColumn.isUpdateNecessary(Lorg/objectweb/cjdbc/common/sql/UpdateRequest;)Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.cache.result.ResultCacheColumn.<init>(II)V: root-Branch
   */

	@Test(timeout=300000)
  public void test0()  throws Throwable  {
      ResultCacheColumn resultCacheColumn0 = new ResultCacheColumn(22, (-2141));
      boolean boolean0 = resultCacheColumn0.isUpdateNecessary((UpdateRequest) null);
      assertTrue(boolean0);
      assertEquals(2, resultCacheColumn0.getParsingGranularity());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.cache.result.ResultCacheColumn.getName()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.cache.result.ResultCacheColumn.<init>(II)V: root-Branch
   */

	@Test(timeout=300000)
  public void test1()  throws Throwable  {
      ResultCacheColumn resultCacheColumn0 = new ResultCacheColumn((-6433), (-6433));
      String string0 = resultCacheColumn0.getName();
      assertEquals(2, resultCacheColumn0.getParsingGranularity());
      assertEquals("column", string0);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.cache.result.ResultCacheColumn.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.cache.result.ResultCacheColumn.processAddToCache(Lorg/objectweb/cjdbc/controller/cache/result/entries/AbstractResultCacheEntry;)V: I13 Branch 1 IFNULL L73 - true
   */

	@Test(timeout=300000)
  public void test2()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("", false, (-633), "");
      ResultCacheColumn resultCacheColumn0 = new ResultCacheColumn((-633), (-633));
      ResultCacheEntryEager resultCacheEntryEager0 = new ResultCacheEntryEager((AbstractResultCache) resultCacheColumn0, selectRequest0, (ControllerResultSet) null, (long) 0);
      // Undeclared exception!
      try { 
        resultCacheColumn0.processAddToCache(resultCacheEntryEager0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.cache.result.ResultCacheColumn", e);
      }
  }

  //Test case number: 3
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.cache.result.ResultCacheColumn.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.cache.result.ResultCacheColumn.processWriteNotify(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 9 IFNONNULL L119 - true
   * Goal 3. org.objectweb.cjdbc.controller.cache.result.ResultCacheColumn.processWriteNotify(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I35 Branch 10 IFEQ L126 - true
   * Goal 4. org.objectweb.cjdbc.controller.cache.result.ResultCacheColumn.processWriteNotify(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I56 Branch 11 IFEQ L131 - true
   */

	@Test(timeout=300000)
  public void test3()  throws Throwable  {
      ResultCacheColumn resultCacheColumn0 = new ResultCacheColumn(25, 25);
      CreateRequest createRequest0 = new CreateRequest("No parsing of select Dause found - Fallback to table {ranulariny", true, 25, "15Xq/ x4r", (DatabaseSchema) null, 25, true);
      resultCacheColumn0.processWriteNotify(createRequest0);
      assertEquals(2, resultCacheColumn0.getParsingGranularity());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.cache.result.ResultCacheColumn.<init>(II)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.cache.result.ResultCacheColumn.processWriteNotify(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 9 IFNONNULL L119 - false
   */

	@Test(timeout=300000)
  public void test4()  throws Throwable  {
      ResultCacheColumn resultCacheColumn0 = new ResultCacheColumn((-878), (-878));
      UpdateRequest updateRequest0 = new UpdateRequest("Illegal value for fetch direction", true, (-878), "Clob contains only ");
      // Undeclared exception!
      try { 
        resultCacheColumn0.processWriteNotify(updateRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.cache.result.ResultCacheColumn", e);
      }
  }
}
