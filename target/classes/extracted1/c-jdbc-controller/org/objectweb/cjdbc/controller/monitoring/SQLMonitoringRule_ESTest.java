/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 18 18:16:17 GMT 2016
 */

package org.objectweb.cjdbc.controller.monitoring;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.AlterRequest;
import org.objectweb.cjdbc.common.sql.DeleteRequest;
import org.objectweb.cjdbc.common.sql.UpdateRequest;
import org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SQLMonitoringRule_ESTest extends SQLMonitoringRule_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.getQueryPattern()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.isCaseSentive()Z: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.isApplyToSkeleton()Z: root-Branch
   * Goal 4. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.isMonitoring()Z: root-Branch
   * Goal 5. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.<init>(Ljava/lang/String;ZZZ)V: I55 Branch 1 IFEQ L68 - true
   * Goal 6. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.getXml()Ljava/lang/String;: I40 Branch 6 IFEQ L218 - true
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      SQLMonitoringRule sQLMonitoringRule0 = new SQLMonitoringRule("#OF", false, false, false);
      sQLMonitoringRule0.getXml();
      assertFalse(sQLMonitoringRule0.isApplyToSkeleton());
      assertFalse(sQLMonitoringRule0.isMonitoring());
      assertFalse(sQLMonitoringRule0.isCaseSentive());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.setMonitoring(Z)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.<init>(Ljava/lang/String;ZZZ)V: I55 Branch 1 IFEQ L68 - true
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      SQLMonitoringRule sQLMonitoringRule0 = new SQLMonitoringRule("getSystemFunctions", false, false, false);
      sQLMonitoringRule0.setMonitoring(false);
      assertFalse(sQLMonitoringRule0.isMonitoring());
      assertFalse(sQLMonitoringRule0.isCaseSentive());
      assertFalse(sQLMonitoringRule0.isApplyToSkeleton());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.setApplyToSkeleton(Z)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.<init>(Ljava/lang/String;ZZZ)V: I55 Branch 1 IFEQ L68 - true
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      SQLMonitoringRule sQLMonitoringRule0 = new SQLMonitoringRule("#OF", false, false, false);
      sQLMonitoringRule0.setApplyToSkeleton(false);
      assertFalse(sQLMonitoringRule0.isApplyToSkeleton());
      assertFalse(sQLMonitoringRule0.isMonitoring());
      assertFalse(sQLMonitoringRule0.isCaseSentive());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.setCaseSentive(Z)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.<init>(Ljava/lang/String;ZZZ)V: I55 Branch 1 IFEQ L68 - true
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      SQLMonitoringRule sQLMonitoringRule0 = new SQLMonitoringRule("applyToSkeleton", false, false, false);
      sQLMonitoringRule0.setCaseSentive(false);
      assertFalse(sQLMonitoringRule0.isMonitoring());
      assertFalse(sQLMonitoringRule0.isApplyToSkeleton());
      assertFalse(sQLMonitoringRule0.isCaseSentive());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.setQueryPattern(Ljava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.<init>(Ljava/lang/String;ZZZ)V: I55 Branch 1 IFEQ L68 - true
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      SQLMonitoringRule sQLMonitoringRule0 = new SQLMonitoringRule("akzZWB", false, true, false);
      // Undeclared exception!
      try { 
        sQLMonitoringRule0.setQueryPattern("L[q?StCiL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid regexp in SQL Monitoring rule (org.evosuite.runtime.mock.java.lang.MockThrowable: Syntax error: Unterminated character class)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule", e);
      }
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.<init>(Ljava/lang/String;ZZZ)V: I55 Branch 1 IFEQ L68 - false
   * Goal 2. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.matches(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Ljava/lang/String;: I4 Branch 2 IFEQ L173 - true
   * Goal 3. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.matches(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Ljava/lang/String;: I40 Branch 5 IFEQ L188 - false
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      SQLMonitoringRule sQLMonitoringRule0 = new SQLMonitoringRule("usesLocalFiles", true, false, true);
      UpdateRequest updateRequest0 = new UpdateRequest("usesLocalFiles", true, 0, "usesLocalFiles");
      String string0 = sQLMonitoringRule0.matches(updateRequest0);
      assertTrue(sQLMonitoringRule0.isMonitoring());
      assertTrue(sQLMonitoringRule0.isCaseSentive());
      assertNotNull(string0);
  }

  //Test case number: 6
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.<init>(Ljava/lang/String;ZZZ)V: I55 Branch 1 IFEQ L68 - true
   * Goal 2. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.matches(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Ljava/lang/String;: I4 Branch 2 IFEQ L173 - false
   * Goal 3. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.matches(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Ljava/lang/String;: I13 Branch 3 IFNONNULL L176 - false
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      DeleteRequest deleteRequest0 = new DeleteRequest("applyToSkeleton", true, 1, "applyToSkeleton");
      SQLMonitoringRule sQLMonitoringRule0 = new SQLMonitoringRule("", false, true, false);
      String string0 = sQLMonitoringRule0.matches(deleteRequest0);
      assertNull(string0);
      assertFalse(sQLMonitoringRule0.isMonitoring());
      assertFalse(sQLMonitoringRule0.isCaseSentive());
  }

  //Test case number: 7
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.<init>(Ljava/lang/String;ZZZ)V: I55 Branch 1 IFEQ L68 - true
   * Goal 2. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.matches(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Ljava/lang/String;: I4 Branch 2 IFEQ L173 - false
   * Goal 3. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.matches(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Ljava/lang/String;: I13 Branch 3 IFNONNULL L176 - true
   * Goal 4. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.matches(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Ljava/lang/String;: I24 Branch 4 IFEQ L180 - false
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      DeleteRequest deleteRequest0 = new DeleteRequest("applyToSkeleton", true, 1, "applyToSkeleton");
      deleteRequest0.setSqlSkeleton("V]JJ-k8$)srsP)$'lM9");
      SQLMonitoringRule sQLMonitoringRule0 = new SQLMonitoringRule("", false, true, false);
      String string0 = sQLMonitoringRule0.matches(deleteRequest0);
      assertFalse(sQLMonitoringRule0.isMonitoring());
      assertNotNull(string0);
      assertFalse(sQLMonitoringRule0.isCaseSentive());
      assertEquals("V]JJ-k8$)srsP)$'lM9", string0);
  }

  //Test case number: 8
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.<init>(Ljava/lang/String;ZZZ)V: I55 Branch 1 IFEQ L68 - false
   * Goal 2. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.matches(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Ljava/lang/String;: I4 Branch 2 IFEQ L173 - false
   * Goal 3. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.matches(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Ljava/lang/String;: I13 Branch 3 IFNONNULL L176 - true
   * Goal 4. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.matches(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Ljava/lang/String;: I24 Branch 4 IFEQ L180 - true
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      SQLMonitoringRule sQLMonitoringRule0 = new SQLMonitoringRule("applyToSkeleton", true, true, true);
      DeleteRequest deleteRequest0 = new DeleteRequest("applyToSkeleton", true, 1, "applyToSkeleton");
      deleteRequest0.setSqlSkeleton("V]JJ-k8$)srsP)$'lM9");
      String string0 = sQLMonitoringRule0.matches(deleteRequest0);
      assertTrue(sQLMonitoringRule0.isMonitoring());
      assertNull(string0);
      assertTrue(sQLMonitoringRule0.isCaseSentive());
  }

  //Test case number: 9
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.<init>(Ljava/lang/String;ZZZ)V: I55 Branch 1 IFEQ L68 - true
   * Goal 2. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.matches(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Ljava/lang/String;: I4 Branch 2 IFEQ L173 - true
   * Goal 3. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.matches(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)Ljava/lang/String;: I40 Branch 5 IFEQ L188 - true
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      SQLMonitoringRule sQLMonitoringRule0 = new SQLMonitoringRule("#OF", false, false, false);
      AlterRequest alterRequest0 = new AlterRequest("TgskCA**X", false, 0, "TgskCA**X");
      String string0 = sQLMonitoringRule0.matches(alterRequest0);
      assertFalse(sQLMonitoringRule0.isCaseSentive());
      assertFalse(sQLMonitoringRule0.isApplyToSkeleton());
      assertNull(string0);
      assertFalse(sQLMonitoringRule0.isMonitoring());
  }

  //Test case number: 10
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.getQueryPattern()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.isCaseSentive()Z: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.isApplyToSkeleton()Z: root-Branch
   * Goal 4. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.isMonitoring()Z: root-Branch
   * Goal 5. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.<init>(Ljava/lang/String;ZZZ)V: I55 Branch 1 IFEQ L68 - false
   * Goal 6. org.objectweb.cjdbc.controller.monitoring.SQLMonitoringRule.getXml()Ljava/lang/String;: I40 Branch 6 IFEQ L218 - false
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      SQLMonitoringRule sQLMonitoringRule0 = new SQLMonitoringRule("applyToSkeleton", true, true, true);
      sQLMonitoringRule0.getXml();
      assertTrue(sQLMonitoringRule0.isApplyToSkeleton());
      assertTrue(sQLMonitoringRule0.isCaseSentive());
      assertTrue(sQLMonitoringRule0.isMonitoring());
  }
}
