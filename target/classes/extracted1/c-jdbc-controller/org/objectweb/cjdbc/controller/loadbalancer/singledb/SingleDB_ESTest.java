/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 18 21:31:52 GMT 2016
 */

package org.objectweb.cjdbc.controller.loadbalancer.singledb;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import java.sql.SQLException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.CreateRequest;
import org.objectweb.cjdbc.common.sql.DeleteRequest;
import org.objectweb.cjdbc.common.sql.DropRequest;
import org.objectweb.cjdbc.common.sql.SelectRequest;
import org.objectweb.cjdbc.common.sql.StoredProcedure;
import org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter;
import org.objectweb.cjdbc.common.sql.filters.Base64Filter;
import org.objectweb.cjdbc.common.sql.filters.BlobEscapedFilter;
import org.objectweb.cjdbc.common.sql.filters.HexaBlobFilter;
import org.objectweb.cjdbc.common.sql.filters.NoneBlobFilter;
import org.objectweb.cjdbc.common.sql.schema.DatabaseSchema;
import org.objectweb.cjdbc.controller.backend.DatabaseBackend;
import org.objectweb.cjdbc.controller.cache.metadata.MetadataCache;
import org.objectweb.cjdbc.controller.connection.SimpleConnectionManager;
import org.objectweb.cjdbc.controller.core.Controller;
import org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB;
import org.objectweb.cjdbc.controller.requestmanager.TransactionMarkerMetaData;
import org.objectweb.cjdbc.controller.virtualdatabase.VirtualDatabase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SingleDB_ESTest extends SingleDB_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execReadOnlyReadStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;Lorg/objectweb/cjdbc/controller/cache/metadata/MetadataCache;)Lorg/objectweb/cjdbc/controller/virtualdatabase/ControllerResultSet;: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execReadStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;Lorg/objectweb/cjdbc/controller/cache/metadata/MetadataCache;)Lorg/objectweb/cjdbc/controller/virtualdatabase/ControllerResultSet;: I4 Branch 17 IFNONNULL L453 - false
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      Controller controller0 = new Controller("-cv\"x-*I/uca", 0, 0);
      NoneBlobFilter noneBlobFilter0 = new NoneBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "", 0, false, 0, 260, (long) 0, 0, (AbstractBlobFilter) noneBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      StoredProcedure storedProcedure0 = new StoredProcedure("-cv\"x-*I/uca", true, 260, "", true);
      MetadataCache metadataCache0 = new MetadataCache(1, 0);
      try { 
        singleDB0.execReadOnlyReadStoredProcedure(storedProcedure0, metadataCache0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No available backend to execute stored procedure 0
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.setWeight(Ljava/lang/String;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      Controller controller0 = new Controller("FXZA)JA", 1, 1);
      BlobEscapedFilter blobEscapedFilter0 = new BlobEscapedFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "FXZA)JA", 1, false, (-5062), (-5062), 1024L, 1, (AbstractBlobFilter) blobEscapedFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      try { 
        singleDB0.setWeight("FXZA)JA", (-713));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Weight is not supported with this load balancer
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.getXmlImpl()Ljava/lang/String;: root-Branch
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      Controller controller0 = new Controller("t", 0, 4723);
      NoneBlobFilter noneBlobFilter0 = (NoneBlobFilter)AbstractBlobFilter.getBlobFilterInstance("getTableTypes");
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "", 1651, false, 4723, (-1235), (-1317L), 0, (AbstractBlobFilter) noneBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      String string0 = singleDB0.getXmlImpl();
      assertEquals("<SingleDB/>", string0);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;Lorg/objectweb/cjdbc/controller/cache/metadata/MetadataCache;)Lorg/objectweb/cjdbc/controller/virtualdatabase/ControllerResultSet;: I4 Branch 1 IFNONNULL L113 - false
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      Controller controller0 = new Controller("", 0, 0);
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "", 0, false, 0, 0, (long) 0, 0, (AbstractBlobFilter) null);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      SelectRequest selectRequest0 = new SelectRequest("", false, 0, "", (DatabaseSchema) null, 0, false);
      MetadataCache metadataCache0 = new MetadataCache(0, 0);
      try { 
        singleDB0.execReadRequest(selectRequest0, metadataCache0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // loadbalancer.execute.no.backend.available
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 4
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)I: I4 Branch 6 IFNONNULL L228 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)I: I27 Branch 7 IFEQ L236 - true
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 6. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - true
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loadbalancer.request.failed.on.backend", (-875), true, (-875), (-875), (long) (-875), (-875), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", true, "loadbalancer.request.failed.on.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("loadbalancer.request.failed.on.backend", "found for transaction ", "", "onmXE3_(A2`LtG_J", "found for transaction ", "");
      databaseBackend0.addConnectionManager("loadbalancer.request.failed.on.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, false);
      DropRequest dropRequest0 = new DropRequest("", false, 1, "og.objectweb.cjdbc.common.sql.DeleteRequest");
      // Undeclared exception!
      try { 
        singleDB0.execWriteRequest(dropRequest0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -875
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)I: I4 Branch 6 IFNONNULL L228 - false
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      Controller controller0 = new Controller("i6ZU,xNlN03(%^@F3$p", 1961, 1961);
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "", 1961, false, 1961, 1961, (long) 1961, 1961, (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      CreateRequest createRequest0 = new CreateRequest("", false, 1961, "");
      try { 
        singleDB0.execWriteRequest(createRequest0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // loadbalancer.execute.no.backend.available
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 6
  /*
   * 7 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)I: I4 Branch 6 IFNONNULL L228 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)I: I27 Branch 7 IFEQ L236 - false
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)I: I33 Branch 8 IFEQ L240 - true
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 6. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 7. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - true
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loadbalancer.request.failed.on.backend", (-875), true, (-875), (-875), (long) (-875), (-875), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", true, "loadbalancer.request.failed.on.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("loadbalancer.request.failed.on.backend", "found for transaction ", "", "onmXE3_(A2`LtG_J", "found for transaction ", "");
      databaseBackend0.addConnectionManager("loadbalancer.request.failed.on.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, false);
      DropRequest dropRequest0 = new DropRequest("", false, 1, "og.objectweb.cjdbc.common.sql.DeleteRequest");
      dropRequest0.setIsAutoCommit(true);
      // Undeclared exception!
      try { 
        singleDB0.execWriteRequest(dropRequest0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -875
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  //Test case number: 7
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execWriteRequestWithKeys(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;Lorg/objectweb/cjdbc/controller/cache/metadata/MetadataCache;)Lorg/objectweb/cjdbc/controller/virtualdatabase/ControllerResultSet;: I4 Branch 11 IFNONNULL L330 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execWriteRequestWithKeys(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;Lorg/objectweb/cjdbc/controller/cache/metadata/MetadataCache;)Lorg/objectweb/cjdbc/controller/virtualdatabase/ControllerResultSet;: I21 Branch 12 IFNE L334 - false
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 6. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - false
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loadbalancer.request.failed.on.backend", (-856), true, (-856), (-856), (long) (-856), (-856), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", true, "loadbalancer.request.failed.on.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend");
      databaseBackend0.addConnectionManager("loadbalancer.request.failed.on.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, true);
      CreateRequest createRequest0 = new CreateRequest("loadbalancer.request.failed.on.backend", true, (-856), "1090");
      MetadataCache metadataCache0 = new MetadataCache(0, 0);
      try { 
        singleDB0.execWriteRequestWithKeys(createRequest0, metadataCache0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // loadbalancer.backend.autogeneratedkeys.unsupported
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execWriteRequestWithKeys(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;Lorg/objectweb/cjdbc/controller/cache/metadata/MetadataCache;)Lorg/objectweb/cjdbc/controller/virtualdatabase/ControllerResultSet;: I4 Branch 11 IFNONNULL L330 - false
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      Controller controller0 = new Controller("C5-G/JKspMH;fk", 0, 0);
      NoneBlobFilter noneBlobFilter0 = new NoneBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, (String) null, 0, false, 0, 0, (-1304L), (-1441), (AbstractBlobFilter) noneBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DeleteRequest deleteRequest0 = new DeleteRequest("C5-G/JKspMH;fk", false, 114, "})Gbjp4MYus6-on6Z#");
      MetadataCache metadataCache0 = new MetadataCache(0, 0);
      try { 
        singleDB0.execWriteRequestWithKeys(deleteRequest0, metadataCache0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // loadbalancer.execute.no.backend.available
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 9
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execReadStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;Lorg/objectweb/cjdbc/controller/cache/metadata/MetadataCache;)Lorg/objectweb/cjdbc/controller/virtualdatabase/ControllerResultSet;: I4 Branch 17 IFNONNULL L453 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execReadStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;Lorg/objectweb/cjdbc/controller/cache/metadata/MetadataCache;)Lorg/objectweb/cjdbc/controller/virtualdatabase/ControllerResultSet;: I32 Branch 18 IFEQ L461 - true
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 6. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - false
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loadbalancer.request.failed.on.backend", (-856), true, (-856), (-856), (long) (-856), (-856), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", true, "loadbalancer.request.failed.on.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend");
      databaseBackend0.addConnectionManager("loadbalancer.request.failed.on.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, true);
      StoredProcedure storedProcedure0 = new StoredProcedure("loadbalancer.request.failed.on.backend", true, (-856), "loadbalancer.request.failed.on.backend", true);
      MetadataCache metadataCache0 = new MetadataCache(0, 273);
      // Undeclared exception!
      try { 
        singleDB0.execReadStoredProcedure(storedProcedure0, metadataCache0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -856
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  //Test case number: 10
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execReadStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;Lorg/objectweb/cjdbc/controller/cache/metadata/MetadataCache;)Lorg/objectweb/cjdbc/controller/virtualdatabase/ControllerResultSet;: I4 Branch 17 IFNONNULL L453 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execReadStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;Lorg/objectweb/cjdbc/controller/cache/metadata/MetadataCache;)Lorg/objectweb/cjdbc/controller/virtualdatabase/ControllerResultSet;: I32 Branch 18 IFEQ L461 - false
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 6. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - false
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loadbalancer.request.failed.on.backend", (-856), true, (-856), (-856), (long) (-856), (-856), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", true, "loadbalancer.request.failed.on.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend");
      databaseBackend0.addConnectionManager("loadbalancer.request.failed.on.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, true);
      StoredProcedure storedProcedure0 = new StoredProcedure("loadbalancer.request.failed.on.backend", true, (-856), "loadbalancer.request.failed.on.backend", true);
      storedProcedure0.setIsAutoCommit(true);
      MetadataCache metadataCache0 = new MetadataCache(0, 273);
      // Undeclared exception!
      try { 
        singleDB0.execReadStoredProcedure(storedProcedure0, metadataCache0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -856
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  //Test case number: 11
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execWriteStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)I: I4 Branch 21 IFNONNULL L545 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execWriteStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)I: I32 Branch 22 IFEQ L553 - true
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 6. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - true
   */

	@Test(timeout=300000)
  public void test11()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loadbalancer.request.failed.on.backend", (-856), true, (-856), (-856), (long) (-856), (-856), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", false, "loadbalancer.request.failed.on.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("loadbalancer.request.failed.on.backend", "", "9C5An/\"x'", "onmXE3_(A2`LtG_J", "", "9C5An/\"x'");
      databaseBackend0.addConnectionManager("loadbalancer.request.failed.on.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, false);
      StoredProcedure storedProcedure0 = new StoredProcedure("org.objectweb.cjdbc.common.sql.DeleteRequest", false, 0, "org.objectweb.cjdbc.common.sql.DeleteRequest", false);
      // Undeclared exception!
      try { 
        singleDB0.execWriteStoredProcedure(storedProcedure0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -856
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execWriteStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)I: I4 Branch 21 IFNONNULL L545 - false
   */

	@Test(timeout=300000)
  public void test12()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loadbalancer.request.failed.on.backend", 9, true, 9, 9, (long) 9, 9, (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      StoredProcedure storedProcedure0 = new StoredProcedure("loadbalancer.request.failed.on.backend", true, 9, "loadbalancer.request.failed.on.backend", true);
      try { 
        singleDB0.execWriteStoredProcedure(storedProcedure0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No available backend to execute stored procedure 0
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 13
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execWriteStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)I: I4 Branch 21 IFNONNULL L545 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.execWriteStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)I: I32 Branch 22 IFEQ L553 - false
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 6. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - false
   */

	@Test(timeout=300000)
  public void test13()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loadbalancer.request.failed.on.backend", (-856), true, (-856), (-856), (long) (-856), (-856), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", true, "loadbalancer.request.failed.on.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend");
      databaseBackend0.addConnectionManager("loadbalancer.request.failed.on.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, true);
      StoredProcedure storedProcedure0 = new StoredProcedure("loadbalancer.request.failed.on.backend", true, (-856), "loadbalancer.request.failed.on.backend", true);
      storedProcedure0.setIsAutoCommit(true);
      // Undeclared exception!
      try { 
        singleDB0.execWriteStoredProcedure(storedProcedure0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -856
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  //Test case number: 14
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.begin(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)V: I4 Branch 25 IFNONNULL L644 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.begin(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)V: I25 Branch 26 IFEQ L649 - true
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 6. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - true
   */

	@Test(timeout=300000)
  public void test14()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loadbalancer.request.failed.on.backend", (-849), false, (-849), (-849), (long) (-849), (-849), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", false, "loadbalancer.request.failed.on.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend");
      databaseBackend0.addConnectionManager("loadbalancer.request.failed.on.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, false);
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData((long) (-849), (long) (-849), "loadbalancer.request.failed.on.backend");
      try { 
        singleDB0.begin(transactionMarkerMetaData0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Begin of transaction -849 failed on backend loadbalancer.request.failed.on.backend (org.evosuite.runtime.mock.java.lang.MockThrowable)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 15
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.begin(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)V: I4 Branch 25 IFNONNULL L644 - false
   */

	@Test(timeout=300000)
  public void test15()  throws Throwable  {
      Controller controller0 = new Controller("", (-194), (-194));
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData((long) 0, (long) 0, "boE1'*");
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "", 0, false, (-655), 724, (long) 0, (-655), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      try { 
        singleDB0.begin(transactionMarkerMetaData0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No available backend to begin transaction 0
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 16
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.commit(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)V: I4 Branch 28 IFNONNULL L680 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.commit(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)V: I38 Branch 29 IFNONNULL L690 - false
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 6. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - false
   */

	@Test(timeout=300000)
  public void test16()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loagblancer.requestfailednon.backend", (-875), true, (-875), (-875), (long) (-875), (-875), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("loagblancer.requestfailednon.backend", "loagblancer.requestfailednon.backend", "loagblancer.requestfailednon.backend", "loagblancer.requestfailednon.backend", "loagblancer.requestfailednon.backend", true, "loagblancer.requestfailednon.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("loagblancer.requestfailednon.backend", "loagblancer.requestfailednon.backend", "loagblancer.requestfailednon.backend", "loagblancer.requestfailednon.backend", "loagblancer.requestfailednon.backend", "loagblancer.requestfailednon.backend");
      databaseBackend0.addConnectionManager("loagblancer.requestfailednon.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, true);
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData((long) (-875), (long) (-875), "loagblancer.requestfailednon.backend");
      try { 
        singleDB0.commit(transactionMarkerMetaData0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No connection found for transaction -875
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.commit(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)V: I4 Branch 28 IFNONNULL L680 - false
   */

	@Test(timeout=300000)
  public void test17()  throws Throwable  {
      Controller controller0 = new Controller("", (-194), (-194));
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "", 0, false, 0, 0, 1L, (-194), (AbstractBlobFilter) null);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData((long) 0, (long) 0, "boE1'*");
      try { 
        singleDB0.commit(transactionMarkerMetaData0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No available backend to commit transaction 0
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 18
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.rollback(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)V: I4 Branch 30 IFNONNULL L728 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.rollback(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)V: I38 Branch 31 IFNONNULL L738 - false
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 6. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - false
   */

	@Test(timeout=300000)
  public void test18()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loadbalancer.request.failed.on.backend", (-856), true, (-856), (-856), (long) (-856), (-856), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", true, "loadbalancer.request.failed.on.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend");
      databaseBackend0.addConnectionManager("loadbalancer.request.failed.on.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, true);
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData((long) (-856), (long) (-856), "loadbalancer.request.failed.on.backend");
      try { 
        singleDB0.rollback(transactionMarkerMetaData0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No connection found for transaction -856
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 19
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.rollback(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;)V: I4 Branch 30 IFNONNULL L728 - false
   */

	@Test(timeout=300000)
  public void test19()  throws Throwable  {
      Controller controller0 = new Controller("i6ZU,xNlN03(%^@F3$p", 1961, (-741));
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "|2ap]Mk+", (-1206), false, 1961, (-1206), 0L, 0, (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData((-1L), (long) (-741), "i6ZU,xNlN03(%^@F3$p");
      try { 
        singleDB0.rollback(transactionMarkerMetaData0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No available backend to rollback transaction -1
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 20
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.rollback(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I4 Branch 32 IFNONNULL L778 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.rollback(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I38 Branch 33 IFNONNULL L788 - false
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 6. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - false
   */

	@Test(timeout=300000)
  public void test20()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loadbalancer.request.failed.on.backend", (-856), true, (-856), (-856), (long) (-856), (-856), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", true, "loadbalancer.request.failed.on.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend");
      databaseBackend0.addConnectionManager("loadbalancer.request.failed.on.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, true);
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData((long) (-856), (long) (-856), "loadbalancer.request.failed.on.backend");
      try { 
        singleDB0.rollback(transactionMarkerMetaData0, "");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No connection found for transaction -856
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 21
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.rollback(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I4 Branch 32 IFNONNULL L778 - false
   */

	@Test(timeout=300000)
  public void test21()  throws Throwable  {
      Controller controller0 = new Controller("b#~i/YZ", 146, 146);
      NoneBlobFilter noneBlobFilter0 = new NoneBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "b#~i/YZ", 146, false, 146, 146, (long) 146, 146, (AbstractBlobFilter) noneBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData((long) 146, (long) 146, "b#~i/YZ");
      try { 
        singleDB0.rollback(transactionMarkerMetaData0, "b#~i/YZ");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No available backend to rollback transaction 146
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 22
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.releaseSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I4 Branch 35 IFNONNULL L831 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.releaseSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I38 Branch 36 IFNONNULL L841 - false
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 6. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - false
   */

	@Test(timeout=300000)
  public void test22()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "lozdbalancer.requewt.failed.on.backend", (-3264), true, (-3264), (-3264), (long) (-3264), (-3264), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("lozdbalancer.requewt.failed.on.backend", "lozdbalancer.requewt.failed.on.backend", "lozdbalancer.requewt.failed.on.backend", "lozdbalancer.requewt.failed.on.backend", "lozdbalancer.requewt.failed.on.backend", true, "lozdbalancer.requewt.failed.on.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("lozdbalancer.requewt.failed.on.backend", "lozdbalancer.requewt.failed.on.backend", "lozdbalancer.requewt.failed.on.backend", "lozdbalancer.requewt.failed.on.backend", "lozdbalancer.requewt.failed.on.backend", "lozdbalancer.requewt.failed.on.backend");
      databaseBackend0.addConnectionManager("lozdbalancer.requewt.failed.on.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, true);
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData((long) (-3264), (long) (-3264), "lozdbalancer.requewt.failed.on.backend");
      try { 
        singleDB0.releaseSavepoint(transactionMarkerMetaData0, "lozdbalancer.requewt.failed.on.backend");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No connection found for transaction -3264
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 23
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.releaseSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I4 Branch 35 IFNONNULL L831 - false
   */

	@Test(timeout=300000)
  public void test23()  throws Throwable  {
      Controller controller0 = new Controller((String) null, 0, 0);
      NoneBlobFilter noneBlobFilter0 = (NoneBlobFilter)AbstractBlobFilter.getBlobFilterInstance("supportsLikeEscapeClause");
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "supportsLikeEscapeClause", 0, true, 0, 2, 0L, (-1558), (AbstractBlobFilter) noneBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData(0L, 0L, "supportsLikeEscapeClause");
      try { 
        singleDB0.releaseSavepoint(transactionMarkerMetaData0, "supportsLikeEscapeClause");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No available backend to release savepoint from  transaction 0
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 24
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.setSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I4 Branch 38 IFNONNULL L890 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.setSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I38 Branch 39 IFNONNULL L900 - false
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 6. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - false
   */

	@Test(timeout=300000)
  public void test24()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loadbalancer.request.failed.on.backend", (-856), true, (-856), (-856), (long) (-856), (-856), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", true, "loadbalancer.request.failed.on.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend");
      databaseBackend0.addConnectionManager("loadbalancer.request.failed.on.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, true);
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData((long) (-856), (long) (-856), "loadbalancer.request.failed.on.backend");
      try { 
        singleDB0.setSavepoint(transactionMarkerMetaData0, "loadbalancer.request.failed.on.backend");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No connection found for transaction -856
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 25
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.setSavepoint(Lorg/objectweb/cjdbc/controller/requestmanager/TransactionMarkerMetaData;Ljava/lang/String;)V: I4 Branch 38 IFNONNULL L890 - false
   */

	@Test(timeout=300000)
  public void test25()  throws Throwable  {
      Controller controller0 = new Controller("", 0, 0);
      Base64Filter base64Filter0 = new Base64Filter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "", 692, true, 335, 0, (long) 335, 2, (AbstractBlobFilter) base64Filter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      TransactionMarkerMetaData transactionMarkerMetaData0 = new TransactionMarkerMetaData((-811L), (long) 335, "");
      try { 
        singleDB0.setSavepoint(transactionMarkerMetaData0, "&{?Cv9Ya)HC");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // No available backend to set savepoint to  transaction -811
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 26
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - false
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I10 Branch 44 IFEQ L949 - false
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 6. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - true
   */

	@Test(timeout=300000)
  public void test26()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loadbalancer.request.failed.on.backend", (-880), false, (-880), (-880), (long) (-880), (-880), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", false, "loadbalancer.request.failed.on.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend");
      databaseBackend0.addConnectionManager("loadbalancer.request.failed.on.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, false);
      try { 
        singleDB0.enableBackend(databaseBackend0, false);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // SingleDB load balancer accepts only one backend and loadbalancer.request.failed.on.backend is already enabled. Skipping loadbalancer.request.failed.on.backend initialization.
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 27
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - true
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - true
   */

	@Test(timeout=300000)
  public void test27()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loadbalancer.request.failed.on.backend", (-856), false, (-856), (-856), (long) (-856), (-856), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", false, "loadbalancer.request.failed.on.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("loadbalancer.request.failed.on.backend", "", "9C5An/\"x'", "onmXE3_(A2`LtG_J", "", "9C5An/\"x'");
      simpleConnectionManager0.initializeConnections();
      databaseBackend0.addConnectionManager("loadbalancer.request.failed.on.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, false);
      assertEquals(0, databaseBackend0.getStateValue());
      assertFalse(databaseBackend0.isWriteEnabled());
  }

  //Test case number: 28
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - true
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.disableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;)V: I6 Branch 47 IFEQ L973 - true
   */

	@Test(timeout=300000)
  public void test28()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "", (-856), false, (-856), (-856), (long) (-856), (-856), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("", "", "", "", "", false, "");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("", "", "9C5An/\"x'", "9C5An/\"x'", "", "9C5An/\"x'");
      databaseBackend0.addConnectionManager("", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, false);
      // Undeclared exception!
      try { 
        singleDB0.disableBackend((DatabaseBackend) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB", e);
      }
  }

  //Test case number: 29
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - true
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.disableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;)V: I6 Branch 47 IFEQ L973 - false
   * Goal 6. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.disableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;)V: I25 Branch 48 IFEQ L978 - false
   */

	@Test(timeout=300000)
  public void test29()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loadbalancer.request.failed.on.backend", (-845), false, (-845), (-845), (long) (-845), (-845), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", false, "loadbalancer.request.failed.on.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend");
      databaseBackend0.addConnectionManager("loadbalancer.request.failed.on.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, false);
      singleDB0.disableBackend(databaseBackend0);
      assertEquals("loadbalancer.request.failed.on.backend", databaseBackend0.getVirtualDatabaseName());
  }

  //Test case number: 30
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - true
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.disableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;)V: I6 Branch 47 IFEQ L973 - false
   * Goal 6. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.disableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;)V: I25 Branch 48 IFEQ L978 - true
   */

	@Test(timeout=300000)
  public void test30()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loadbalancer.request.failed.on.backend", (-845), false, (-845), (-845), (long) (-845), (-845), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", false, "loadbalancer.request.failed.on.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend");
      databaseBackend0.addConnectionManager("loadbalancer.request.failed.on.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, false);
      databaseBackend0.finalizeConnections();
      singleDB0.disableBackend(databaseBackend0);
      assertEquals("<SingleDB/>", singleDB0.getXmlImpl());
  }

  //Test case number: 31
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - false
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.getNumberOfEnabledBackends()I: I4 Branch 49 IFNONNULL L1004 - true
   */

	@Test(timeout=300000)
  public void test31()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loadbalancer.request.failed.on.backend", (-856), false, (-856), (-856), (long) (-856), (-856), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", false, "loadbalancer.request.failed.on.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("loadbalancer.request.failed.on.backend", "", "9C5An/\"x'", "onmXE3_(A2`LtG_J", "", "9C5An/\"x'");
      databaseBackend0.addConnectionManager("loadbalancer.request.failed.on.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, true);
      int int0 = singleDB0.getNumberOfEnabledBackends();
      assertEquals(1, int0);
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.getNumberOfEnabledBackends()I: I4 Branch 49 IFNONNULL L1004 - false
   */

	@Test(timeout=300000)
  public void test32()  throws Throwable  {
      Controller controller0 = new Controller("i6ZU,xNlN03(%^@F3$p", 1961, 1961);
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "", 1961, false, 1961, 1961, (long) 1961, 1961, (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      int int0 = singleDB0.getNumberOfEnabledBackends();
      assertEquals(0, int0);
  }

  //Test case number: 33
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I4 Branch 43 IFNULL L947 - true
   * Goal 3. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I52 Branch 45 IFNE L957 - false
   * Goal 4. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.enableBackend(Lorg/objectweb/cjdbc/controller/backend/DatabaseBackend;Z)V: I66 Branch 46 IFEQ L960 - true
   * Goal 5. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.getInformation()Ljava/lang/String;: I4 Branch 50 IFNONNULL L1021 - true
   */

	@Test(timeout=300000)
  public void test33()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = new HexaBlobFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase((Controller) null, "loadbalancer.request.failed.on.backend", (-856), false, (-856), (-856), (long) (-856), (-856), (AbstractBlobFilter) hexaBlobFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      DatabaseBackend databaseBackend0 = new DatabaseBackend("loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", "loadbalancer.request.failed.on.backend", false, "loadbalancer.request.failed.on.backend");
      SimpleConnectionManager simpleConnectionManager0 = new SimpleConnectionManager("loadbalancer.request.failed.on.backend", "", "loadbalancer.request.failed.on.backend", "onmXE3_(A2`LtG_J", "", "}Ut9Nu)(B");
      databaseBackend0.addConnectionManager("loadbalancer.request.failed.on.backend", simpleConnectionManager0);
      singleDB0.enableBackend(databaseBackend0, false);
      assertEquals(0, databaseBackend0.getStateValue());
      
      String string0 = singleDB0.getInformation();
      assertEquals("SingleDB Request load balancer using loadbalancer.request.failed.on.backend\n", string0);
  }

  //Test case number: 34
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.<init>(Lorg/objectweb/cjdbc/controller/virtualdatabase/VirtualDatabase;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.loadbalancer.singledb.SingleDB.getInformation()Ljava/lang/String;: I4 Branch 50 IFNONNULL L1021 - false
   */

	@Test(timeout=300000)
  public void test34()  throws Throwable  {
      Controller controller0 = new Controller("bJF7OX", 1909, 1909);
      BlobEscapedFilter blobEscapedFilter0 = new BlobEscapedFilter();
      VirtualDatabase virtualDatabase0 = new VirtualDatabase(controller0, "bJF7OX", 1909, true, 1909, 1909, (long) 1909, 1909, (AbstractBlobFilter) blobEscapedFilter0);
      SingleDB singleDB0 = new SingleDB(virtualDatabase0);
      String string0 = singleDB0.getInformation();
      assertEquals("SingleDB Request load balancer: !!!Warning!!! No enabled backend node found\n", string0);
  }
}
