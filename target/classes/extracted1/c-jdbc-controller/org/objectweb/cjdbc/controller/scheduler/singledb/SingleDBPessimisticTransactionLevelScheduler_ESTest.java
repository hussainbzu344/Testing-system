/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 19 02:21:11 GMT 2016
 */

package org.objectweb.cjdbc.controller.scheduler.singledb;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.CreateRequest;
import org.objectweb.cjdbc.common.sql.SelectRequest;
import org.objectweb.cjdbc.common.sql.StoredProcedure;
import org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SingleDBPessimisticTransactionLevelScheduler_ESTest extends SingleDBPessimisticTransactionLevelScheduler_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.getXmlImpl()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      String string0 = singleDBPessimisticTransactionLevelScheduler0.getXmlImpl();
      assertEquals("<SingleDBScheduler level=\"pessimisticTransaction\"/>", string0);
  }

  //Test case number: 1
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.rollbackTransaction(J)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.releaseLock(J)V: I5 Branch 10 IFEQ L234 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.releaseLock(J)V: I48 Branch 13 IFEQ L248 - true
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      singleDBPessimisticTransactionLevelScheduler0.rollbackTransaction(0L);
      assertFalse(singleDBPessimisticTransactionLevelScheduler0.isSuspendedWrites());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.setSavepointTransaction(JLjava/lang/String;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      singleDBPessimisticTransactionLevelScheduler0.setSavepointTransaction(20L, " wants to release the lock held by transaction ");
      assertFalse(singleDBPessimisticTransactionLevelScheduler0.isSuspendedWrites());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.scheduleReadRequest(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      SelectRequest selectRequest0 = new SelectRequest(" pending writes)", true, 120, " pending writes)");
      singleDBPessimisticTransactionLevelScheduler0.scheduleReadRequest(selectRequest0);
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getPendingWrites());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.rollbackTransaction(JLjava/lang/String;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      singleDBPessimisticTransactionLevelScheduler0.rollbackTransaction((-1L), "");
      assertFalse(singleDBPessimisticTransactionLevelScheduler0.isSuspendedWrites());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.readCompletedNotify(Lorg/objectweb/cjdbc/common/sql/SelectRequest;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      singleDBPessimisticTransactionLevelScheduler0.readCompletedNotify((SelectRequest) null);
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getParsingGranularity());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.releaseSavepointTransaction(JLjava/lang/String;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      singleDBPessimisticTransactionLevelScheduler0.releaseSavepointTransaction(2101L, "");
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getPendingTransactions());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 4 IFEQ L137 - true
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      CreateRequest createRequest0 = new CreateRequest("Y{ru]", true, (-102), "Y{ru]");
      singleDBPessimisticTransactionLevelScheduler0.notifyWriteCompleted(createRequest0);
      assertEquals(1, createRequest0.getCacheAbility());
  }

  //Test case number: 8
  /*
   * 7 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.commitTransaction(J)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.scheduleNonSuspendedStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I6 Branch 5 IFEQ L147 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.scheduleNonSuspendedStoredProcedure(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I41 Branch 6 IFEQ L153 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.releaseLock(J)V: I5 Branch 10 IFEQ L234 - false
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.releaseLock(J)V: I13 Branch 11 IFNE L236 - true
   * Goal 7. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.releaseLock(J)V: I24 Branch 12 IFEQ L243 - true
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure("insertRow cannot be called when the cu/sor is not on the insert rw", false, 2146856645, "insertRow cannot be called when the cu/sor is not on the insert rw", false);
      singleDBPessimisticTransactionLevelScheduler0.scheduleNonSuspendedStoredProcedure(storedProcedure0);
      singleDBPessimisticTransactionLevelScheduler0.commitTransaction(2146856645);
      assertFalse(singleDBPessimisticTransactionLevelScheduler0.isSuspendedTransactions());
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I4 Branch 8 IFEQ L176 - true
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure("", false, (-99), "", false);
      singleDBPessimisticTransactionLevelScheduler0.notifyStoredProcedureCompleted(storedProcedure0);
      assertTrue(storedProcedure0.isDriverProcessed());
  }

  //Test case number: 10
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I4 Branch 8 IFEQ L176 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.notifyStoredProcedureCompleted(Lorg/objectweb/cjdbc/common/sql/StoredProcedure;)V: I7 Branch 9 IFNE L176 - false
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.releaseLock(J)V: I5 Branch 10 IFEQ L234 - true
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.releaseLock(J)V: I48 Branch 13 IFEQ L248 - true
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      StoredProcedure storedProcedure0 = new StoredProcedure("Y{ru]", true, (-120), "Y{ru]", true);
      storedProcedure0.setIsAutoCommit(true);
      singleDBPessimisticTransactionLevelScheduler0.notifyStoredProcedureCompleted(storedProcedure0);
      assertEquals(0, singleDBPessimisticTransactionLevelScheduler0.getPendingTransactions());
  }

  //Test case number: 11
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I6 Branch 1 IFEQ L109 - false
   * Goal 3. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.scheduleNonSuspendedWriteRequest(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I41 Branch 2 IFEQ L115 - true
   * Goal 4. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.notifyWriteCompleted(Lorg/objectweb/cjdbc/common/sql/AbstractWriteRequest;)V: I4 Branch 4 IFEQ L137 - false
   * Goal 5. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.releaseLock(J)V: I5 Branch 10 IFEQ L234 - false
   * Goal 6. org.objectweb.cjdbc.controller.scheduler.singledb.SingleDBPessimisticTransactionLevelScheduler.releaseLock(J)V: I13 Branch 11 IFNE L236 - false
   */

	@Test(timeout=300000)
  public void test11()  throws Throwable  {
      SingleDBPessimisticTransactionLevelScheduler singleDBPessimisticTransactionLevelScheduler0 = new SingleDBPessimisticTransactionLevelScheduler();
      CreateRequest createRequest0 = new CreateRequest("o=a#a.y4}:zLp>zS4&m", true, 4740, "Stored procedure ");
      createRequest0.setIsAutoCommit(true);
      singleDBPessimisticTransactionLevelScheduler0.scheduleNonSuspendedWriteRequest(createRequest0);
      singleDBPessimisticTransactionLevelScheduler0.notifyWriteCompleted(createRequest0);
      assertEquals(-1, singleDBPessimisticTransactionLevelScheduler0.getRAIDbLevel());
  }
}
