/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 18 07:59:14 GMT 2016
 */

package org.objectweb.cjdbc.console.text.commands;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.console.jmx.RmiJmxClient;
import org.objectweb.cjdbc.console.text.Console;
import org.objectweb.cjdbc.console.text.commands.Native;
import org.objectweb.cjdbc.console.text.module.AbstractConsoleModule;
import org.objectweb.cjdbc.console.text.module.MonitorConsole;
import org.objectweb.cjdbc.console.text.module.VirtualDatabaseConsole;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Native_ESTest extends Native_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.console.text.commands.Native.<init>(Lorg/objectweb/cjdbc/console/text/module/AbstractConsoleModule;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.console.text.commands.Native.getCommandDescription()Ljava/lang/String;: root-Branch
   */

	@Test(timeout=300000)
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          PipedInputStream pipedInputStream0 = new PipedInputStream();
          Console console0 = new Console((RmiJmxClient) null, (InputStream) pipedInputStream0, false, true);
          VirtualDatabaseConsole virtualDatabaseConsole0 = new VirtualDatabaseConsole(console0);
          Native native0 = new Native((AbstractConsoleModule) virtualDatabaseConsole0);
          String string0 = native0.getCommandDescription();
          assertEquals("console.command.native", string0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.console.text.commands.Native.<init>(Lorg/objectweb/cjdbc/console/text/module/AbstractConsoleModule;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.console.text.commands.Native.getCommandName()Ljava/lang/String;: root-Branch
   */

	@Test(timeout=300000)
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 892);
          Console console0 = new Console((RmiJmxClient) null, (InputStream) bufferedInputStream0, false, true);
          MonitorConsole monitorConsole0 = console0.getMonitorModule();
          Native native0 = new Native((AbstractConsoleModule) monitorConsole0);
          String string0 = native0.getCommandName();
          assertEquals("native", string0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.console.text.commands.Native.<init>(Lorg/objectweb/cjdbc/console/text/module/AbstractConsoleModule;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.console.text.commands.Native.parse(Ljava/lang/String;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 892);
          Console console0 = new Console((RmiJmxClient) null, (InputStream) bufferedInputStream0, false, true);
          MonitorConsole monitorConsole0 = console0.getMonitorModule();
          Native native0 = new Native((AbstractConsoleModule) monitorConsole0);
          native0.parse("");
          assertEquals("", native0.getCommandParameters());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
