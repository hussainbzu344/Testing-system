/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 18 06:25:56 GMT 2016
 */

package org.objectweb.cjdbc.console.text.commands.dbadmin;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.console.jmx.RmiJmxClient;
import org.objectweb.cjdbc.console.text.Console;
import org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite;
import org.objectweb.cjdbc.console.text.module.VirtualDatabaseAdmin;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DisableWrite_ESTest extends DisableWrite_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.getCommandDescription()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.<init>(Lorg/objectweb/cjdbc/console/text/module/VirtualDatabaseAdmin;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          PipedInputStream pipedInputStream0 = new PipedInputStream();
          Console console0 = new Console((RmiJmxClient) null, (InputStream) pipedInputStream0, false, false);
          VirtualDatabaseAdmin virtualDatabaseAdmin0 = new VirtualDatabaseAdmin(console0);
          DisableWrite disableWrite0 = new DisableWrite(virtualDatabaseAdmin0);
          String string0 = disableWrite0.getCommandDescription();
          assertEquals("admin.command.disable.write", string0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.getCommandParameters()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.<init>(Lorg/objectweb/cjdbc/console/text/module/VirtualDatabaseAdmin;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          byte[] byteArray0 = new byte[0];
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
          BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) byteArrayInputStream0, 1973);
          Console console0 = new Console((RmiJmxClient) null, (InputStream) bufferedInputStream0, true, true);
          VirtualDatabaseAdmin virtualDatabaseAdmin0 = new VirtualDatabaseAdmin(console0);
          DisableWrite disableWrite0 = new DisableWrite(virtualDatabaseAdmin0);
          String string0 = disableWrite0.getCommandParameters();
          assertEquals("<backendName> [<checkpoint>]", string0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.getCommandName()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.<init>(Lorg/objectweb/cjdbc/console/text/module/VirtualDatabaseAdmin;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
          PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
          Console console0 = new Console((RmiJmxClient) null, (InputStream) pipedInputStream0, true, true);
          VirtualDatabaseAdmin virtualDatabaseAdmin0 = console0.getAdminModule();
          DisableWrite disableWrite0 = new DisableWrite(virtualDatabaseAdmin0);
          String string0 = disableWrite0.getCommandName();
          assertEquals("disableWrite", string0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.<init>(Lorg/objectweb/cjdbc/console/text/module/VirtualDatabaseAdmin;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.parse(Ljava/lang/String;)V: I12 Branch 1 IF_ICMPLT L59 - true
   */

	@Test(timeout=300000)
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[0];
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
          BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) byteArrayInputStream0, 1973);
          Console console0 = new Console((RmiJmxClient) null, (InputStream) bufferedInputStream0, false, true);
          VirtualDatabaseAdmin virtualDatabaseAdmin0 = new VirtualDatabaseAdmin(console0);
          DisableWrite disableWrite0 = new DisableWrite(virtualDatabaseAdmin0);
          try { 
            disableWrite0.parse("");
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // console.error.invalid.comment.argument
             //
             assertThrownBy("org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  //Test case number: 4
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.<init>(Lorg/objectweb/cjdbc/console/text/module/VirtualDatabaseAdmin;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.parse(Ljava/lang/String;)V: I12 Branch 1 IF_ICMPLT L59 - false
   * Goal 3. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.parse(Ljava/lang/String;)V: I16 Branch 2 IF_ICMPLE L59 - true
   * Goal 4. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.parse(Ljava/lang/String;)V: I38 Branch 3 IFEQ L64 - false
   */

	@Test(timeout=300000)
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[0];
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
          BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) byteArrayInputStream0, 1973);
          Console console0 = new Console((RmiJmxClient) null, (InputStream) bufferedInputStream0, true, true);
          VirtualDatabaseAdmin virtualDatabaseAdmin0 = new VirtualDatabaseAdmin(console0);
          DisableWrite disableWrite0 = new DisableWrite(virtualDatabaseAdmin0);
          try { 
            disableWrite0.parse("<backendName> [<checkpoint>]");
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             assertThrownBy("org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.<init>(Lorg/objectweb/cjdbc/console/text/module/VirtualDatabaseAdmin;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.parse(Ljava/lang/String;)V: I12 Branch 1 IF_ICMPLT L59 - false
   * Goal 3. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.parse(Ljava/lang/String;)V: I16 Branch 2 IF_ICMPLE L59 - false
   */

	@Test(timeout=300000)
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[5];
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte) (-71), 1);
          BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) byteArrayInputStream0);
          Console console0 = new Console((RmiJmxClient) null, (InputStream) bufferedInputStream0, false, false);
          VirtualDatabaseAdmin virtualDatabaseAdmin0 = console0.getAdminModule();
          DisableWrite disableWrite0 = new DisableWrite(virtualDatabaseAdmin0);
          try { 
            disableWrite0.parse("Class name cannot be null or empty");
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // console.error.invalid.comment.argument
             //
             assertThrownBy("org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  //Test case number: 6
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.<init>(Lorg/objectweb/cjdbc/console/text/module/VirtualDatabaseAdmin;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.parse(Ljava/lang/String;)V: I12 Branch 1 IF_ICMPLT L59 - false
   * Goal 3. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.parse(Ljava/lang/String;)V: I16 Branch 2 IF_ICMPLE L59 - true
   * Goal 4. org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite.parse(Ljava/lang/String;)V: I38 Branch 3 IFEQ L64 - true
   */

	@Test(timeout=300000)
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Console console0 = new Console((RmiJmxClient) null, (InputStream) null, false, false);
          VirtualDatabaseAdmin virtualDatabaseAdmin0 = new VirtualDatabaseAdmin(console0);
          DisableWrite disableWrite0 = new DisableWrite(virtualDatabaseAdmin0);
          try { 
            disableWrite0.parse("C");
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             assertThrownBy("org.objectweb.cjdbc.console.text.commands.dbadmin.DisableWrite", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
