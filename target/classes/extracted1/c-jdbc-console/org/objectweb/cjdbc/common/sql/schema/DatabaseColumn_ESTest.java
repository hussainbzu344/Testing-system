/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 18 14:59:20 GMT 2016
 */

package org.objectweb.cjdbc.common.sql.schema;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.schema.DatabaseColumn;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DatabaseColumn_ESTest extends DatabaseColumn_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 10 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.getName()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.isUnique()Z: root-Branch
   * Goal 3. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.getType()I: root-Branch
   * Goal 4. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;Z)V: root-Branch
   * Goal 5. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;ZI)V: I7 Branch 1 IFNONNULL L81 - true
   * Goal 6. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I3 Branch 2 IFNULL L144 - false
   * Goal 7. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I6 Branch 3 IFNE L144 - true
   * Goal 8. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I22 Branch 4 IF_ICMPNE L148 - false
   * Goal 9. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I28 Branch 5 IFLE L148 - false
   * Goal 10. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I33 Branch 6 IF_ICMPNE L148 - false
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      DatabaseColumn databaseColumn0 = new DatabaseColumn("", true);
      boolean boolean0 = databaseColumn0.equals(databaseColumn0);
      assertEquals(0, databaseColumn0.getType());
      assertTrue(databaseColumn0.isUnique());
      assertTrue(boolean0);
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;Z)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.getXml()Ljava/lang/String;: root-Branch
   * Goal 3. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;ZI)V: I7 Branch 1 IFNONNULL L81 - true
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      DatabaseColumn databaseColumn0 = new DatabaseColumn("", true);
      String string0 = databaseColumn0.getXml();
      assertEquals(0, databaseColumn0.getType());
      assertEquals("<DatabaseColumn columnName=\"\" isUnique=\"true\"></DatabaseColumn>", string0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;ZI)V: I7 Branch 1 IFNONNULL L81 - false
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      DatabaseColumn databaseColumn0 = null;
      try {
        databaseColumn0 = new DatabaseColumn((String) null, false, 418);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal null column name in DatabaseColumn constructor
         //
         assertThrownBy("org.objectweb.cjdbc.common.sql.schema.DatabaseColumn", e);
      }
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;ZI)V: I7 Branch 1 IFNONNULL L81 - true
   * Goal 2. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I3 Branch 2 IFNULL L144 - true
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      DatabaseColumn databaseColumn0 = new DatabaseColumn("", true, (-2715));
      boolean boolean0 = databaseColumn0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(databaseColumn0.isUnique());
      assertEquals(-2715, databaseColumn0.getType());
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;ZI)V: I7 Branch 1 IFNONNULL L81 - true
   * Goal 2. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I3 Branch 2 IFNULL L144 - false
   * Goal 3. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I6 Branch 3 IFNE L144 - false
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      DatabaseColumn databaseColumn0 = new DatabaseColumn("", false, 0);
      boolean boolean0 = databaseColumn0.equals("<DatabaseColumn columnName=\"\" isUnique=\"false\"></DatabaseColumn>");
      assertFalse(boolean0);
      assertFalse(databaseColumn0.isUnique());
      assertEquals(0, databaseColumn0.getType());
  }

  //Test case number: 5
  /*
   * 7 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.setIsUnique(Z)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.isUnique()Z: root-Branch
   * Goal 3. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;Z)V: root-Branch
   * Goal 4. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;ZI)V: I7 Branch 1 IFNONNULL L81 - true
   * Goal 5. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I3 Branch 2 IFNULL L144 - false
   * Goal 6. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I6 Branch 3 IFNE L144 - true
   * Goal 7. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I22 Branch 4 IF_ICMPNE L148 - true
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      DatabaseColumn databaseColumn0 = new DatabaseColumn("", false);
      DatabaseColumn databaseColumn1 = new DatabaseColumn("", false, (-2502));
      databaseColumn1.setIsUnique(true);
      boolean boolean0 = databaseColumn1.equals(databaseColumn0);
      assertFalse(databaseColumn0.isUnique());
      assertTrue(databaseColumn1.isUnique());
      assertFalse(boolean0);
  }

  //Test case number: 6
  /*
   * 8 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.getName()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.isUnique()Z: root-Branch
   * Goal 3. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;Z)V: root-Branch
   * Goal 4. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;ZI)V: I7 Branch 1 IFNONNULL L81 - true
   * Goal 5. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I3 Branch 2 IFNULL L144 - false
   * Goal 6. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I6 Branch 3 IFNE L144 - true
   * Goal 7. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I22 Branch 4 IF_ICMPNE L148 - false
   * Goal 8. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I28 Branch 5 IFLE L148 - true
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      DatabaseColumn databaseColumn0 = new DatabaseColumn("", true);
      DatabaseColumn databaseColumn1 = new DatabaseColumn("at+3<T'ObYX<> )q 2L", true);
      boolean boolean0 = databaseColumn0.equals(databaseColumn1);
      assertTrue(databaseColumn1.isUnique());
      assertFalse(boolean0);
      assertEquals(0, databaseColumn1.getType());
  }

  //Test case number: 7
  /*
   * 9 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.getName()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.isUnique()Z: root-Branch
   * Goal 3. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.getType()I: root-Branch
   * Goal 4. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;ZI)V: I7 Branch 1 IFNONNULL L81 - true
   * Goal 5. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I3 Branch 2 IFNULL L144 - false
   * Goal 6. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I6 Branch 3 IFNE L144 - true
   * Goal 7. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I22 Branch 4 IF_ICMPNE L148 - false
   * Goal 8. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I28 Branch 5 IFLE L148 - false
   * Goal 9. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equals(Ljava/lang/Object;)Z: I33 Branch 6 IF_ICMPNE L148 - true
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      DatabaseColumn databaseColumn0 = new DatabaseColumn("", false, 0);
      DatabaseColumn databaseColumn1 = new DatabaseColumn("", false, (-1649));
      boolean boolean0 = databaseColumn1.equals(databaseColumn0);
      assertFalse(databaseColumn1.isUnique());
      assertFalse(boolean0);
      assertEquals(-1649, databaseColumn1.getType());
      assertFalse(databaseColumn0.equals((Object)databaseColumn1));
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;ZI)V: I7 Branch 1 IFNONNULL L81 - true
   * Goal 2. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equalsIgnoreType(Ljava/lang/Object;)Z: I3 Branch 7 IFNULL L161 - true
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      DatabaseColumn databaseColumn0 = new DatabaseColumn("s", false, 3462);
      boolean boolean0 = databaseColumn0.equalsIgnoreType((Object) null);
      assertEquals(3462, databaseColumn0.getType());
      assertFalse(boolean0);
      assertFalse(databaseColumn0.isUnique());
  }

  //Test case number: 9
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;ZI)V: I7 Branch 1 IFNONNULL L81 - true
   * Goal 2. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equalsIgnoreType(Ljava/lang/Object;)Z: I3 Branch 7 IFNULL L161 - false
   * Goal 3. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equalsIgnoreType(Ljava/lang/Object;)Z: I6 Branch 8 IFNE L161 - false
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      DatabaseColumn databaseColumn0 = new DatabaseColumn("", false, 0);
      boolean boolean0 = databaseColumn0.equalsIgnoreType("<DatabaseColumn columnName=\"\" isUnique=\"false\"></DatabaseColumn>");
      assertEquals(0, databaseColumn0.getType());
      assertFalse(boolean0);
      assertFalse(databaseColumn0.isUnique());
  }

  //Test case number: 10
  /*
   * 8 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.getName()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.isUnique()Z: root-Branch
   * Goal 3. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;Z)V: root-Branch
   * Goal 4. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;ZI)V: I7 Branch 1 IFNONNULL L81 - true
   * Goal 5. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equalsIgnoreType(Ljava/lang/Object;)Z: I3 Branch 7 IFNULL L161 - false
   * Goal 6. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equalsIgnoreType(Ljava/lang/Object;)Z: I6 Branch 8 IFNE L161 - true
   * Goal 7. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equalsIgnoreType(Ljava/lang/Object;)Z: I22 Branch 9 IF_ICMPNE L165 - false
   * Goal 8. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equalsIgnoreType(Ljava/lang/Object;)Z: I28 Branch 10 IFLE L165 - false
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      DatabaseColumn databaseColumn0 = new DatabaseColumn("", false);
      boolean boolean0 = databaseColumn0.equalsIgnoreType(databaseColumn0);
      assertEquals(0, databaseColumn0.getType());
      assertTrue(boolean0);
      assertFalse(databaseColumn0.isUnique());
  }

  //Test case number: 11
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.isUnique()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;Z)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;ZI)V: I7 Branch 1 IFNONNULL L81 - true
   * Goal 4. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equalsIgnoreType(Ljava/lang/Object;)Z: I3 Branch 7 IFNULL L161 - false
   * Goal 5. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equalsIgnoreType(Ljava/lang/Object;)Z: I6 Branch 8 IFNE L161 - true
   * Goal 6. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equalsIgnoreType(Ljava/lang/Object;)Z: I22 Branch 9 IF_ICMPNE L165 - true
   */

	@Test(timeout=300000)
  public void test11()  throws Throwable  {
      DatabaseColumn databaseColumn0 = new DatabaseColumn("", true, (-758));
      DatabaseColumn databaseColumn1 = new DatabaseColumn("</DatabaseColumn>", false);
      boolean boolean0 = databaseColumn0.equalsIgnoreType(databaseColumn1);
      assertFalse(boolean0);
      assertFalse(databaseColumn1.isUnique());
      assertEquals(-758, databaseColumn0.getType());
  }

  //Test case number: 12
  /*
   * 8 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.getName()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.isUnique()Z: root-Branch
   * Goal 3. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;Z)V: root-Branch
   * Goal 4. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.<init>(Ljava/lang/String;ZI)V: I7 Branch 1 IFNONNULL L81 - true
   * Goal 5. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equalsIgnoreType(Ljava/lang/Object;)Z: I3 Branch 7 IFNULL L161 - false
   * Goal 6. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equalsIgnoreType(Ljava/lang/Object;)Z: I6 Branch 8 IFNE L161 - true
   * Goal 7. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equalsIgnoreType(Ljava/lang/Object;)Z: I22 Branch 9 IF_ICMPNE L165 - false
   * Goal 8. org.objectweb.cjdbc.common.sql.schema.DatabaseColumn.equalsIgnoreType(Ljava/lang/Object;)Z: I28 Branch 10 IFLE L165 - true
   */

	@Test(timeout=300000)
  public void test12()  throws Throwable  {
      DatabaseColumn databaseColumn0 = new DatabaseColumn("", true, (-758));
      DatabaseColumn databaseColumn1 = new DatabaseColumn("</DatabaseColumn>", true);
      boolean boolean0 = databaseColumn0.equalsIgnoreType(databaseColumn1);
      assertEquals(-758, databaseColumn0.getType());
      assertTrue(databaseColumn1.isUnique());
      assertFalse(boolean0);
  }
}
