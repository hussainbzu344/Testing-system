/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 18 14:32:07 GMT 2016
 */

package org.objectweb.cjdbc.common.sql.filters;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter;
import org.objectweb.cjdbc.common.sql.filters.Base64Filter;
import org.objectweb.cjdbc.common.sql.filters.BlobEscapedFilter;
import org.objectweb.cjdbc.common.sql.filters.HexaBlobFilter;
import org.objectweb.cjdbc.common.sql.filters.NoneBlobFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractBlobFilter_ESTest extends AbstractBlobFilter_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter.getBlobFilterInstance(Ljava/lang/String;)Lorg/objectweb/cjdbc/common/sql/filters/AbstractBlobFilter;: I5 Branch 1 IFLE L57 - true
   * Goal 3. org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter.getBlobFilterInstance(Ljava/lang/String;)Lorg/objectweb/cjdbc/common/sql/filters/AbstractBlobFilter;: I17 Branch 2 IFLE L59 - false
   */

	@Test(timeout=300000)
  public void test0()  throws Throwable  {
      BlobEscapedFilter blobEscapedFilter0 = (BlobEscapedFilter)AbstractBlobFilter.getBlobFilterInstance("escaped");
      assertEquals("escaped", blobEscapedFilter0.getXml());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter.getBlobFilterInstance(Ljava/lang/String;)Lorg/objectweb/cjdbc/common/sql/filters/AbstractBlobFilter;: I5 Branch 1 IFLE L57 - false
   */

	@Test(timeout=300000)
  public void test1()  throws Throwable  {
      HexaBlobFilter hexaBlobFilter0 = (HexaBlobFilter)AbstractBlobFilter.getBlobFilterInstance("hexa");
      assertEquals("hexa", hexaBlobFilter0.getXml());
  }

  //Test case number: 2
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter.getBlobFilterInstance(Ljava/lang/String;)Lorg/objectweb/cjdbc/common/sql/filters/AbstractBlobFilter;: I5 Branch 1 IFLE L57 - true
   * Goal 3. org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter.getBlobFilterInstance(Ljava/lang/String;)Lorg/objectweb/cjdbc/common/sql/filters/AbstractBlobFilter;: I17 Branch 2 IFLE L59 - true
   * Goal 4. org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter.getBlobFilterInstance(Ljava/lang/String;)Lorg/objectweb/cjdbc/common/sql/filters/AbstractBlobFilter;: I29 Branch 3 IFLE L61 - true
   */

	@Test(timeout=300000)
  public void test2()  throws Throwable  {
      NoneBlobFilter noneBlobFilter0 = (NoneBlobFilter)AbstractBlobFilter.getBlobFilterInstance("");
      assertEquals("none", noneBlobFilter0.getXml());
  }

  //Test case number: 3
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter.<init>()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter.getBlobFilterInstance(Ljava/lang/String;)Lorg/objectweb/cjdbc/common/sql/filters/AbstractBlobFilter;: I5 Branch 1 IFLE L57 - true
   * Goal 3. org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter.getBlobFilterInstance(Ljava/lang/String;)Lorg/objectweb/cjdbc/common/sql/filters/AbstractBlobFilter;: I17 Branch 2 IFLE L59 - true
   * Goal 4. org.objectweb.cjdbc.common.sql.filters.AbstractBlobFilter.getBlobFilterInstance(Ljava/lang/String;)Lorg/objectweb/cjdbc/common/sql/filters/AbstractBlobFilter;: I29 Branch 3 IFLE L61 - false
   */

	@Test(timeout=300000)
  public void test3()  throws Throwable  {
      Base64Filter base64Filter0 = (Base64Filter)AbstractBlobFilter.getBlobFilterInstance("base64");
      assertEquals("base64", base64Filter0.getXml());
  }
}
