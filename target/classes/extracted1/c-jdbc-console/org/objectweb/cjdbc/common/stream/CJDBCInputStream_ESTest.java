/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 18 16:15:28 GMT 2016
 */

package org.objectweb.cjdbc.common.stream;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.net.Socket;
import java.net.SocketException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.stream.CJDBCInputStream;
import org.objectweb.cjdbc.driver.Blob;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CJDBCInputStream_ESTest extends CJDBCInputStream_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.stream.CJDBCInputStream.readFully([B)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.stream.CJDBCInputStream.<init>(Ljava/io/InputStream;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Blob blob0 = new Blob(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = (ByteArrayInputStream)blob0.getBinaryStream();
      CJDBCInputStream cJDBCInputStream0 = new CJDBCInputStream((InputStream) byteArrayInputStream0);
      cJDBCInputStream0.readFully(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.stream.CJDBCInputStream.readBoolean()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.stream.CJDBCInputStream.<init>(Ljava/io/InputStream;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CJDBCInputStream cJDBCInputStream0 = new CJDBCInputStream((InputStream) pipedInputStream0);
      try { 
        cJDBCInputStream0.readBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         assertThrownBy("java.io.PipedInputStream", e);
      }
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.stream.CJDBCInputStream.readDouble()D: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.stream.CJDBCInputStream.<init>(Ljava/io/InputStream;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      CJDBCInputStream cJDBCInputStream0 = new CJDBCInputStream((InputStream) null);
      try { 
        cJDBCInputStream0.readDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         assertThrownBy("java.io.BufferedInputStream", e);
      }
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.stream.CJDBCInputStream.<init>(Ljava/io/InputStream;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.stream.CJDBCInputStream.readFloat()D: root-Branch
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      CJDBCInputStream cJDBCInputStream0 = new CJDBCInputStream((InputStream) null);
      try { 
        cJDBCInputStream0.readFloat();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         assertThrownBy("java.io.BufferedInputStream", e);
      }
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.stream.CJDBCInputStream.<init>(Ljava/io/InputStream;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.stream.CJDBCInputStream.getDateCreated()J: root-Branch
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      CJDBCInputStream cJDBCInputStream0 = new CJDBCInputStream((InputStream) bufferedInputStream0);
      long long0 = cJDBCInputStream0.getDateCreated();
      assertEquals(0L, long0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. org.objectweb.cjdbc.common.stream.CJDBCInputStream.<init>(Ljava/net/Socket;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      CJDBCInputStream cJDBCInputStream0 = null;
      try {
        cJDBCInputStream0 = new CJDBCInputStream((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         assertThrownBy("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.stream.CJDBCInputStream.<init>(Ljava/io/InputStream;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.stream.CJDBCInputStream.close()V: root-Branch
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((InputStream) pipedInputStream0, (InputStream) pipedInputStream0);
      CJDBCInputStream cJDBCInputStream0 = new CJDBCInputStream((InputStream) sequenceInputStream0);
      cJDBCInputStream0.close();
      assertEquals(0L, cJDBCInputStream0.getDateCreated());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.stream.CJDBCInputStream.<init>(Ljava/io/InputStream;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.stream.CJDBCInputStream.readLong()J: root-Branch
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      CJDBCInputStream cJDBCInputStream0 = new CJDBCInputStream((InputStream) null);
      try { 
        cJDBCInputStream0.readLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         assertThrownBy("java.io.BufferedInputStream", e);
      }
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.stream.CJDBCInputStream.<init>(Ljava/io/InputStream;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.stream.CJDBCInputStream.available()I: root-Branch
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CJDBCInputStream cJDBCInputStream0 = new CJDBCInputStream((InputStream) pipedInputStream0);
      int int0 = cJDBCInputStream0.available();
      assertEquals(0, int0);
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.stream.CJDBCInputStream.<init>(Ljava/io/InputStream;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.stream.CJDBCInputStream.readInt()I: root-Branch
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((InputStream) pipedInputStream0, (InputStream) pipedInputStream0);
      CJDBCInputStream cJDBCInputStream0 = new CJDBCInputStream((InputStream) sequenceInputStream0);
      try { 
        cJDBCInputStream0.readInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         assertThrownBy("java.io.PipedInputStream", e);
      }
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.stream.CJDBCInputStream.<init>(Ljava/io/InputStream;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.stream.CJDBCInputStream.getSocket()Ljava/net/Socket;: root-Branch
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) pipedInputStream0);
      CJDBCInputStream cJDBCInputStream0 = new CJDBCInputStream((InputStream) bufferedInputStream0);
      Socket socket0 = cJDBCInputStream0.getSocket();
      assertNull(socket0);
  }

  //Test case number: 11
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.stream.CJDBCInputStream.<init>(Ljava/io/InputStream;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.stream.CJDBCInputStream.readUTF()Ljava/lang/String;: I5 Branch 1 IFNE L149 - true
   * Goal 3. org.objectweb.cjdbc.common.stream.CJDBCInputStream.readUTF()Ljava/lang/String;: I34 Branch 2 IF_ICMPGE L159 - true
   */

	@Test(timeout=300000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      Blob blob0 = new Blob(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = (ByteArrayInputStream)blob0.getBinaryStream();
      CJDBCInputStream cJDBCInputStream0 = new CJDBCInputStream((InputStream) byteArrayInputStream0);
      String string0 = cJDBCInputStream0.readUTF();
      assertEquals("", string0);
  }

  //Test case number: 12
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.stream.CJDBCInputStream.<init>(Ljava/io/InputStream;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.stream.CJDBCInputStream.readUTF()Ljava/lang/String;: I5 Branch 1 IFNE L149 - true
   * Goal 3. org.objectweb.cjdbc.common.stream.CJDBCInputStream.readUTF()Ljava/lang/String;: I5 Branch 1 IFNE L149 - false
   * Goal 4. org.objectweb.cjdbc.common.stream.CJDBCInputStream.readUTF()Ljava/lang/String;: I34 Branch 2 IF_ICMPGE L159 - false
   */

	@Test(timeout=300000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)49;
      byteArray0[3] = (byte) (-112);
      Blob blob0 = new Blob(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = (ByteArrayInputStream)blob0.getBinaryStream();
      CJDBCInputStream cJDBCInputStream0 = new CJDBCInputStream((InputStream) byteArrayInputStream0);
      cJDBCInputStream0.readUTF();
      try { 
        cJDBCInputStream0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.io.DataInputStream", e);
      }
  }
}
