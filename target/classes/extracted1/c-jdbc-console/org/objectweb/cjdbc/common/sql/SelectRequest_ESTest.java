/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 18 14:53:38 GMT 2016
 */

package org.objectweb.cjdbc.common.sql;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import java.io.OutputStream;
import java.sql.SQLException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.SelectRequest;
import org.objectweb.cjdbc.common.sql.UpdateRequest;
import org.objectweb.cjdbc.common.sql.schema.DatabaseSchema;
import org.objectweb.cjdbc.common.stream.CJDBCInputStream;
import org.objectweb.cjdbc.common.stream.CJDBCOutputStream;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SelectRequest_ESTest extends SelectRequest_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.SelectRequest.getOrderBy()Ljava/util/ArrayList;: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Ljava/lang/String;ZILjava/lang/String;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest((String) null, true, 212, "");
      selectRequest0.getOrderBy();
      assertEquals(0, selectRequest0.funcType);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Lorg/objectweb/cjdbc/common/stream/CJDBCInputStream;)V: root-Branch
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      SelectRequest selectRequest0 = null;
      try {
        selectRequest0 = new SelectRequest((CJDBCInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.objectweb.cjdbc.common.sql.AbstractRequest", e);
      }
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Ljava/lang/String;ZILjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.SelectRequest.getAliasedFrom()Ljava/util/ArrayList;: root-Branch
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest((String) null, true, 212, "");
      selectRequest0.getAliasedFrom();
      assertEquals(0, selectRequest0.funcType);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Ljava/lang/String;ZILjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.SelectRequest.needsMacroProcessing()Z: root-Branch
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("", true, 56, "");
      boolean boolean0 = selectRequest0.needsMacroProcessing();
      assertEquals(0, selectRequest0.funcType);
      assertFalse(boolean0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Ljava/lang/String;ZILjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.SelectRequest.returnsResultSet()Z: root-Branch
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("*S(d", false, 983, "SpreadsheetDate: Invalid day.");
      boolean boolean0 = selectRequest0.returnsResultSet();
      assertEquals(0, selectRequest0.funcType);
      assertTrue(boolean0);
  }

  //Test case number: 5
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Ljava/lang/String;ZILjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Ljava/lang/String;ZILjava/lang/String;Lorg/objectweb/cjdbc/common/sql/schema/DatabaseSchema;IZ)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.common.sql.SelectRequest.setPkValue(Ljava/lang/String;)V: root-Branch
   * Goal 4. org.objectweb.cjdbc.common.sql.SelectRequest.parse(Lorg/objectweb/cjdbc/common/sql/schema/DatabaseSchema;IZ)V: I3 Branch 1 IFNE L198 - false
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest(".", true, 0, "", (DatabaseSchema) null, 0, true);
      selectRequest0.setPkValue(".");
      assertEquals(0, selectRequest0.getCacheAbility());
      assertEquals(0, selectRequest0.funcType);
      assertTrue(selectRequest0.isParsed());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Ljava/lang/String;ZILjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.SelectRequest.sendToStream(Lorg/objectweb/cjdbc/common/stream/CJDBCOutputStream;Z)V: root-Branch
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("count(", true, (-3049), "");
      CJDBCOutputStream cJDBCOutputStream0 = new CJDBCOutputStream((OutputStream) null);
      selectRequest0.sendToStream(cJDBCOutputStream0, true);
      assertEquals(0, selectRequest0.funcType);
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Ljava/lang/String;ZILjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.SelectRequest.getSelect()Ljava/util/ArrayList;: root-Branch
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest((String) null, false, (-1260), (String) null);
      selectRequest0.getSelect();
      assertEquals(0, selectRequest0.funcType);
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Ljava/lang/String;ZILjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.SelectRequest.getWhereValues()Ljava/util/Hashtable;: root-Branch
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("supportsOrderByUnrelated", false, 2032, "supportsOrderByUnrelated");
      selectRequest0.getWhereValues();
      assertEquals(0, selectRequest0.funcType);
  }

  //Test case number: 9
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Ljava/lang/String;ZILjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Ljava/lang/String;ZILjava/lang/String;Lorg/objectweb/cjdbc/common/sql/schema/DatabaseSchema;IZ)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.common.sql.SelectRequest.getWhere()Ljava/util/ArrayList;: root-Branch
   * Goal 4. org.objectweb.cjdbc.common.sql.SelectRequest.parse(Lorg/objectweb/cjdbc/common/sql/schema/DatabaseSchema;IZ)V: I3 Branch 1 IFNE L198 - false
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("9Y", true, 0, "9Y", (DatabaseSchema) null, 0, true);
      selectRequest0.getWhere();
      assertEquals(0, selectRequest0.funcType);
      assertTrue(selectRequest0.isParsed());
      assertEquals(0, selectRequest0.getCacheAbility());
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Ljava/lang/String;ZILjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.SelectRequest.getPkValue()Ljava/lang/String;: root-Branch
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("h|_^j>&Kp", true, (-2157), "h|_^j>&Kp");
      String string0 = selectRequest0.getPkValue();
      assertEquals(0, selectRequest0.funcType);
      assertNull(string0);
  }

  //Test case number: 11
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Ljava/lang/String;ZILjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.SelectRequest.getFrom()Ljava/util/ArrayList;: root-Branch
   */

	@Test(timeout=300000)
  public void test11()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("supportsLikeEscapeClause", false, 0, "y[00N{kjdQRP3");
      selectRequest0.getFrom();
      assertEquals(0, selectRequest0.funcType);
  }

  //Test case number: 12
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Ljava/lang/String;ZILjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Ljava/lang/String;ZILjava/lang/String;Lorg/objectweb/cjdbc/common/sql/schema/DatabaseSchema;IZ)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.common.sql.SelectRequest.parse(Lorg/objectweb/cjdbc/common/sql/schema/DatabaseSchema;IZ)V: I3 Branch 1 IFNE L198 - true
   * Goal 4. org.objectweb.cjdbc.common.sql.SelectRequest.parse(Lorg/objectweb/cjdbc/common/sql/schema/DatabaseSchema;IZ)V: I20 Branch 2 IFNONNULL L206 - false
   */

	@Test(timeout=300000)
  public void test12()  throws Throwable  {
      SelectRequest selectRequest0 = null;
      try {
        selectRequest0 = new SelectRequest("Selected columns:", true, (-34), "Selected columns:", (DatabaseSchema) null, 33, true);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Unable to parse request with an undefined database schema
         //
         assertThrownBy("org.objectweb.cjdbc.common.sql.SelectRequest", e);
      }
  }

  //Test case number: 13
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Ljava/lang/String;ZILjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.SelectRequest.cloneParsing(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)V: I4 Branch 33 IFNE L369 - true
   */

	@Test(timeout=300000)
  public void test13()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("", false, 2, "y3t((`w");
      UpdateRequest updateRequest0 = new UpdateRequest("SpreadsheetDate: Year must be in range 1900 to 9999.", false, 0, "k", (DatabaseSchema) null, 0, false);
      // Undeclared exception!
      try { 
        selectRequest0.cloneParsing(updateRequest0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.objectweb.cjdbc.common.sql.UpdateRequest cannot be cast to org.objectweb.cjdbc.common.sql.SelectRequest
         //
         assertThrownBy("org.objectweb.cjdbc.common.sql.SelectRequest", e);
      }
  }

  //Test case number: 14
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Ljava/lang/String;ZILjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.SelectRequest.cloneParsing(Lorg/objectweb/cjdbc/common/sql/AbstractRequest;)V: I4 Branch 33 IFNE L369 - false
   */

	@Test(timeout=300000)
  public void test14()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("su$portsTlt:TableWithAddColumn", false, 1159, "su$portsTlt:TableWithAddColumn");
      selectRequest0.cloneParsing(selectRequest0);
      assertFalse(selectRequest0.isParsed());
      assertEquals(0, selectRequest0.funcType);
  }

  //Test case number: 15
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.SelectRequest.<init>(Ljava/lang/String;ZILjava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.SelectRequest.debug()V: I8 Branch 148 IFNULL L1075 - true
   * Goal 3. org.objectweb.cjdbc.common.sql.SelectRequest.debug()V: I56 Branch 150 IFNULL L1085 - true
   * Goal 4. org.objectweb.cjdbc.common.sql.SelectRequest.debug()V: I117 Branch 152 IFNONNULL L1097 - false
   */

	@Test(timeout=300000)
  public void test15()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("su$portsTlt:TableWithAddColumn", false, 1159, "su$portsTlt:TableWithAddColumn");
      selectRequest0.debug();
      assertEquals(0, selectRequest0.funcType);
  }
}
