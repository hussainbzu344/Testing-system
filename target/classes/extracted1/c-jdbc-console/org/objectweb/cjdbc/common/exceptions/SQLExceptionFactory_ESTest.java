/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 18 15:43:58 GMT 2016
 */

package org.objectweb.cjdbc.common.exceptions;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;
import java.sql.SQLException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SQLExceptionFactory_ESTest extends SQLExceptionFactory_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.getSQLException(Ljava/sql/SQLException;Ljava/lang/String;)Ljava/sql/SQLException;: root-Branch
   */

	@Test(timeout=300000)
  public void test0()  throws Throwable  {
      SQLException sQLException0 = new SQLException((String) null);
      SQLException sQLException1 = SQLExceptionFactory.getSQLException(sQLException0, (String) null);
      assertNotSame(sQLException1, sQLException0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.<init>()V: root-Branch
   */

	@Test(timeout=300000)
  public void test1()  throws Throwable  {
      SQLExceptionFactory sQLExceptionFactory0 = new SQLExceptionFactory();
  }

  //Test case number: 2
  /*
   * 8 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.getSQLException(Ljava/util/List;Ljava/lang/String;)Ljava/sql/SQLException;: I16 Branch 1 IF_ICMPGE L74 - true
   * Goal 2. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.getSQLException(Ljava/util/List;Ljava/lang/String;)Ljava/sql/SQLException;: I16 Branch 1 IF_ICMPGE L74 - false
   * Goal 3. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.getSQLException(Ljava/util/List;Ljava/lang/String;)Ljava/sql/SQLException;: I41 Branch 2 IFNE L78 - true
   * Goal 4. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.getSQLException(Ljava/util/List;Ljava/lang/String;)Ljava/sql/SQLException;: I41 Branch 2 IFNE L78 - false
   * Goal 5. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.getSQLException(Ljava/util/List;Ljava/lang/String;)Ljava/sql/SQLException;: I56 Branch 3 IFNULL L87 - true
   * Goal 6. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.getSQLException(Ljava/util/List;Ljava/lang/String;)Ljava/sql/SQLException;: I71 Branch 5 IF_ICMPEQ L90 - true
   * Goal 7. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.getSQLException(Ljava/util/List;Ljava/lang/String;)Ljava/sql/SQLException;: I98 Branch 6 IFEQ L99 - true
   * Goal 8. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.getSQLException(Ljava/util/List;Ljava/lang/String;)Ljava/sql/SQLException;: I98 Branch 6 IFEQ L99 - false
   */

	@Test(timeout=300000)
  public void test2()  throws Throwable  {
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      SQLException sQLException0 = new SQLException((String) null);
      linkedList0.add(sQLException0);
      LinkedList<SQLException> linkedList1 = new LinkedList<SQLException>();
      linkedList1.add(sQLException0);
      linkedList0.addAll((Collection<? extends SQLException>) linkedList1);
      SQLException sQLException1 = SQLExceptionFactory.getSQLException((List) linkedList0, "");
      assertEquals(0, sQLException1.getErrorCode());
      assertEquals("java.sql.SQLException: null\nnull\n", sQLException1.toString());
  }

  //Test case number: 3
  /*
   * 9 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.getSQLException(Ljava/util/List;Ljava/lang/String;)Ljava/sql/SQLException;: I16 Branch 1 IF_ICMPGE L74 - true
   * Goal 2. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.getSQLException(Ljava/util/List;Ljava/lang/String;)Ljava/sql/SQLException;: I16 Branch 1 IF_ICMPGE L74 - false
   * Goal 3. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.getSQLException(Ljava/util/List;Ljava/lang/String;)Ljava/sql/SQLException;: I41 Branch 2 IFNE L78 - true
   * Goal 4. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.getSQLException(Ljava/util/List;Ljava/lang/String;)Ljava/sql/SQLException;: I41 Branch 2 IFNE L78 - false
   * Goal 5. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.getSQLException(Ljava/util/List;Ljava/lang/String;)Ljava/sql/SQLException;: I56 Branch 3 IFNULL L87 - false
   * Goal 6. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.getSQLException(Ljava/util/List;Ljava/lang/String;)Ljava/sql/SQLException;: I61 Branch 4 IFGT L87 - true
   * Goal 7. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.getSQLException(Ljava/util/List;Ljava/lang/String;)Ljava/sql/SQLException;: I71 Branch 5 IF_ICMPEQ L90 - true
   * Goal 8. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.getSQLException(Ljava/util/List;Ljava/lang/String;)Ljava/sql/SQLException;: I98 Branch 6 IFEQ L99 - true
   * Goal 9. org.objectweb.cjdbc.common.exceptions.SQLExceptionFactory.getSQLException(Ljava/util/List;Ljava/lang/String;)Ljava/sql/SQLException;: I98 Branch 6 IFEQ L99 - false
   */

	@Test(timeout=300000)
  public void test3()  throws Throwable  {
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      SQLException sQLException0 = new SQLException((String) null, "");
      linkedList0.add(sQLException0);
      linkedList0.addAll((Collection<? extends SQLException>) linkedList0);
      SQLException sQLException1 = SQLExceptionFactory.getSQLException((List) linkedList0, "");
      assertEquals(0, sQLException1.getErrorCode());
      assertEquals("", sQLException1.getSQLState());
      assertEquals("null\nnull\n", sQLException1.getMessage());
  }
}
