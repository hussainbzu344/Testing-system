/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 18 14:11:06 GMT 2016
 */

package org.objectweb.cjdbc.common.sql;

import org.junit.Test;
import static xcorpus.AssertionAdapter.*;

import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.SQLException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;
import org.objectweb.cjdbc.common.sql.AlterRequest;
import org.objectweb.cjdbc.common.sql.CreateRequest;
import org.objectweb.cjdbc.common.sql.DeleteRequest;
import org.objectweb.cjdbc.common.sql.DropRequest;
import org.objectweb.cjdbc.common.sql.InsertRequest;
import org.objectweb.cjdbc.common.sql.SelectRequest;
import org.objectweb.cjdbc.common.sql.StoredProcedure;
import org.objectweb.cjdbc.common.sql.UnknownRequest;
import org.objectweb.cjdbc.common.sql.UpdateRequest;
import org.objectweb.cjdbc.common.sql.schema.DatabaseSchema;
import org.objectweb.cjdbc.common.stream.CJDBCInputStream;
import org.objectweb.cjdbc.common.stream.CJDBCOutputStream;
import org.objectweb.cjdbc.driver.Blob;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractRequest_ESTest extends AbstractRequest_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.setIsAutoCommit(Z)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test00()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("", true, 33, "");
      selectRequest0.setIsAutoCommit(true);
      assertTrue(selectRequest0.isAutoCommit());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.isCreate()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test01()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("org.objectweb.cjdbc.common.sql.AbstractRequest", true, 749, "");
      selectRequest0.isCreate();
      assertTrue(selectRequest0.getEscapeProcessing());
      assertEquals("org.objectweb.cjdbc.common.sql.AbstractRequest", selectRequest0.getSQL());
      assertTrue(selectRequest0.isDriverProcessed());
      assertFalse(selectRequest0.isParsed());
      assertEquals(1, selectRequest0.getCacheAbility());
      assertEquals(749, selectRequest0.getTimeout());
      assertFalse(selectRequest0.isReadOnly());
      assertEquals("", selectRequest0.getLineSeparator());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.setFetchSize(I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test02()  throws Throwable  {
      DropRequest dropRequest0 = new DropRequest("%$j]0s;K)3", false, 0, "alter");
      dropRequest0.setFetchSize(1);
      assertEquals(1, dropRequest0.getFetchSize());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.isInsert()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test03()  throws Throwable  {
      DropRequest dropRequest0 = new DropRequest("Cor~KMM,f&+", true, 0, "Cor~KMM,f&+");
      dropRequest0.isInsert();
      assertTrue(dropRequest0.isDriverProcessed());
      assertFalse(dropRequest0.isParsed());
      assertEquals(0, dropRequest0.getTimeout());
      assertEquals(1, dropRequest0.getCacheAbility());
      assertTrue(dropRequest0.getEscapeProcessing());
      assertFalse(dropRequest0.isReadOnly());
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.getCacheAbility()I: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test04()  throws Throwable  {
      InsertRequest insertRequest0 = new InsertRequest(")Qg^s8Fn=qNA=i*g[I", true, 1064, (String) null, true);
      DropRequest dropRequest0 = new DropRequest("", false, (-1961), ")Qg^s8Fn=qNA=i*g[I");
      insertRequest0.cloneTableNameAndColumns(dropRequest0);
      assertEquals(-1961, dropRequest0.getTimeout());
      assertTrue(dropRequest0.isDriverProcessed());
      assertFalse(dropRequest0.isParsed());
      assertFalse(dropRequest0.getEscapeProcessing());
      assertFalse(dropRequest0.isReadOnly());
      assertEquals(")Qg^s8Fn=qNA=i*g[I", dropRequest0.getLineSeparator());
      assertTrue(insertRequest0.getEscapeProcessing());
      assertEquals("", dropRequest0.getSQL());
      assertEquals(1, dropRequest0.getCacheAbility());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.isDelete()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test05()  throws Throwable  {
      DropRequest dropRequest0 = new DropRequest("xEj\">MuAPQi", false, 0, "xEj\">MuAPQi", (DatabaseSchema) null, 0, true);
      boolean boolean0 = dropRequest0.isDelete();
      assertTrue(dropRequest0.isDriverProcessed());
      assertFalse(dropRequest0.getEscapeProcessing());
      assertEquals(1, dropRequest0.getCacheAbility());
      assertFalse(boolean0);
      assertFalse(dropRequest0.isReadOnly());
      assertEquals(0, dropRequest0.getTimeout());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.isDML()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test06()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("", true, 33, "");
      boolean boolean0 = selectRequest0.isDML();
      assertTrue(selectRequest0.isDriverProcessed());
      assertFalse(selectRequest0.isParsed());
      assertFalse(selectRequest0.isReadOnly());
      assertTrue(boolean0);
      assertEquals(1, selectRequest0.getCacheAbility());
      assertEquals(33, selectRequest0.getTimeout());
      assertTrue(selectRequest0.getEscapeProcessing());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.setMaxRows(I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test07()  throws Throwable  {
      CreateRequest createRequest0 = new CreateRequest("", false, 1859, "");
      createRequest0.setMaxRows(1859);
      assertEquals(1859, createRequest0.getMaxRows());
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.isReadOnly()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test08()  throws Throwable  {
      AlterRequest alterRequest0 = new AlterRequest("%$j]0s;K)3", true, 0, "", (DatabaseSchema) null, 0, false);
      boolean boolean0 = alterRequest0.isReadOnly();
      assertFalse(boolean0);
      assertEquals(1, alterRequest0.getCacheAbility());
      assertTrue(alterRequest0.getEscapeProcessing());
      assertEquals(0, alterRequest0.getTimeout());
      assertEquals("", alterRequest0.getLineSeparator());
      assertTrue(alterRequest0.isDriverProcessed());
      assertEquals("%$j]0s;K)3", alterRequest0.getSQL());
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.setTransactionIsolation(I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test09()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("org.objectweb.cjdbc.common.sql.AbstractRequest", true, 749, "");
      selectRequest0.setTransactionIsolation((-2291));
      assertEquals(-2291, selectRequest0.getTransactionIsolation());
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.isSelect()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test10()  throws Throwable  {
      DropRequest dropRequest0 = new DropRequest("Cor~KMM,f&+", true, 0, "Cor~KMM,f&+");
      dropRequest0.isSelect();
      assertEquals(0, dropRequest0.getTimeout());
      assertFalse(dropRequest0.isParsed());
      assertFalse(dropRequest0.isReadOnly());
      assertTrue(dropRequest0.isDriverProcessed());
      assertTrue(dropRequest0.getEscapeProcessing());
      assertEquals(1, dropRequest0.getCacheAbility());
  }

  //Test case number: 11
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.setTimeout(I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test11()  throws Throwable  {
      AlterRequest alterRequest0 = new AlterRequest("%$j]0s;K)3", true, 0, "", (DatabaseSchema) null, 0, false);
      alterRequest0.setTimeout(119);
      assertEquals(119, alterRequest0.getTimeout());
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.setSQL(Ljava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test12()  throws Throwable  {
      AlterRequest alterRequest0 = new AlterRequest("Request: ", false, 0, (String) null, (DatabaseSchema) null, 0, false);
      alterRequest0.setSQL("Request: ");
      assertEquals(1, alterRequest0.getCacheAbility());
      assertFalse(alterRequest0.getEscapeProcessing());
      assertTrue(alterRequest0.isDriverProcessed());
      assertFalse(alterRequest0.isReadOnly());
      assertEquals(0, alterRequest0.getTimeout());
  }

  //Test case number: 13
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.setTransactionId(J)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test13()  throws Throwable  {
      DropRequest dropRequest0 = new DropRequest("", false, (-1961), ")Qg^s8Fn=qNA=i*g[I");
      dropRequest0.setTransactionId((-1));
      assertEquals((-1L), dropRequest0.getTransactionId());
  }

  //Test case number: 14
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.isParsed()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test14()  throws Throwable  {
      UnknownRequest unknownRequest0 = new UnknownRequest("", false, (-1), "");
      CreateRequest createRequest0 = new CreateRequest("", false, 1859, "");
      assertFalse(createRequest0.isParsed());
      
      createRequest0.cloneParsing(unknownRequest0);
      assertEquals(1, createRequest0.getCacheAbility());
      assertEquals(1859, createRequest0.getTimeout());
      assertTrue(createRequest0.isDriverProcessed());
      assertFalse(createRequest0.isReadOnly());
      assertFalse(createRequest0.getEscapeProcessing());
  }

  //Test case number: 15
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.isDDL()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test15()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("UR{.1qsg<>e<", true, 2230, "r!SeW>6y");
      boolean boolean0 = selectRequest0.isDDL();
      assertFalse(boolean0);
      assertEquals(1, selectRequest0.getCacheAbility());
      assertEquals(2230, selectRequest0.getTimeout());
      assertFalse(selectRequest0.isReadOnly());
      assertTrue(selectRequest0.getEscapeProcessing());
      assertEquals("UR{.1qsg<>e<", selectRequest0.getSQL());
      assertEquals("r!SeW>6y", selectRequest0.getLineSeparator());
      assertTrue(selectRequest0.isDriverProcessed());
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.getId()J: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.common.sql.AbstractRequest.equals(Ljava/lang/Object;)Z: I3 Branch 9 IFNULL L659 - false
   * Goal 4. org.objectweb.cjdbc.common.sql.AbstractRequest.equals(Ljava/lang/Object;)Z: I6 Branch 10 IFNE L659 - true
   * Goal 5. org.objectweb.cjdbc.common.sql.AbstractRequest.equals(Ljava/lang/Object;)Z: I23 Branch 11 IFNE L663 - false
   */

	@Test(timeout=300000)
  public void test16()  throws Throwable  {
      DropRequest dropRequest0 = new DropRequest("Cor~KMM,f&+", true, 0, "Cor~KMM,f&+");
      boolean boolean0 = dropRequest0.equals(dropRequest0);
      assertEquals(1, dropRequest0.getCacheAbility());
      assertTrue(dropRequest0.isDriverProcessed());
      assertTrue(dropRequest0.getEscapeProcessing());
      assertEquals(0, dropRequest0.getTimeout());
      assertFalse(dropRequest0.isReadOnly());
      assertTrue(boolean0);
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.getMaxRows()I: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test17()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("", true, 33, "");
      int int0 = selectRequest0.getMaxRows();
      assertEquals(0, int0);
      assertEquals(33, selectRequest0.getTimeout());
      assertFalse(selectRequest0.isReadOnly());
      assertTrue(selectRequest0.getEscapeProcessing());
      assertTrue(selectRequest0.isDriverProcessed());
      assertEquals(1, selectRequest0.getCacheAbility());
  }

  //Test case number: 18
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.isAutoCommit()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test18()  throws Throwable  {
      CreateRequest createRequest0 = new CreateRequest("r<b:UnfiO}~W", true, (-4113), "r<b:UnfiO}~W");
      boolean boolean0 = createRequest0.isAutoCommit();
      assertEquals(-4113, createRequest0.getTimeout());
      assertTrue(createRequest0.getEscapeProcessing());
      assertFalse(boolean0);
      assertFalse(createRequest0.isReadOnly());
      assertTrue(createRequest0.isDriverProcessed());
      assertEquals(1, createRequest0.getCacheAbility());
  }

  //Test case number: 19
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.getSqlSkeleton()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test19()  throws Throwable  {
      UpdateRequest updateRequest0 = new UpdateRequest(";_/,!K#_NSgD~", true, (-1285), ";_/,!K#_NSgD~");
      String string0 = updateRequest0.getSqlSkeleton();
      assertEquals(1, updateRequest0.getCacheAbility());
      assertEquals(-1285, updateRequest0.getTimeout());
      assertFalse(updateRequest0.isReadOnly());
      assertNull(string0);
      assertTrue(updateRequest0.getEscapeProcessing());
      assertTrue(updateRequest0.isDriverProcessed());
  }

  //Test case number: 20
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.getFetchSize()I: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test20()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("UR{.1qsg<>e<", true, 2230, "r!SeW>6y");
      int int0 = selectRequest0.getFetchSize();
      assertTrue(selectRequest0.isDriverProcessed());
      assertEquals("r!SeW>6y", selectRequest0.getLineSeparator());
      assertEquals("UR{.1qsg<>e<", selectRequest0.getSQL());
      assertFalse(selectRequest0.isReadOnly());
      assertTrue(selectRequest0.getEscapeProcessing());
      assertEquals(1, selectRequest0.getCacheAbility());
      assertEquals(0, int0);
      assertEquals(2230, selectRequest0.getTimeout());
  }

  //Test case number: 21
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.setLogin(Ljava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test21()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("xEj\">MuAPQi", true, 156, "+%");
      selectRequest0.setLogin("xEj\">MuAPQi");
      assertTrue(selectRequest0.getEscapeProcessing());
      assertEquals("+%", selectRequest0.getLineSeparator());
      assertEquals(156, selectRequest0.getTimeout());
      assertFalse(selectRequest0.isReadOnly());
      assertEquals(1, selectRequest0.getCacheAbility());
      assertEquals("xEj\">MuAPQi", selectRequest0.getSQL());
      assertTrue(selectRequest0.isDriverProcessed());
  }

  //Test case number: 22
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.debug()V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test22()  throws Throwable  {
      DropRequest dropRequest0 = new DropRequest("Cor~KMM,f&+", true, 0, "Cor~KMM,f&+");
      dropRequest0.debug();
      assertTrue(dropRequest0.isDriverProcessed());
      assertEquals(0, dropRequest0.getTimeout());
      assertEquals(1, dropRequest0.getCacheAbility());
      assertTrue(dropRequest0.getEscapeProcessing());
      assertFalse(dropRequest0.isReadOnly());
  }

  //Test case number: 23
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.setSqlSkeleton(Ljava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test23()  throws Throwable  {
      AlterRequest alterRequest0 = new AlterRequest("Request: ", false, 0, (String) null, (DatabaseSchema) null, 0, false);
      alterRequest0.setSqlSkeleton((String) null);
      assertEquals(0, alterRequest0.getTimeout());
      assertFalse(alterRequest0.getEscapeProcessing());
      assertTrue(alterRequest0.isDriverProcessed());
      assertEquals(1, alterRequest0.getCacheAbility());
      assertFalse(alterRequest0.isReadOnly());
  }

  //Test case number: 24
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.getTransactionId()J: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test24()  throws Throwable  {
      AlterRequest alterRequest0 = new AlterRequest("Request: ", false, 0, (String) null, (DatabaseSchema) null, 0, false);
      alterRequest0.getTransactionId();
      assertEquals(1, alterRequest0.getCacheAbility());
      assertTrue(alterRequest0.isDriverProcessed());
      assertEquals(0, alterRequest0.getTimeout());
      assertFalse(alterRequest0.getEscapeProcessing());
      assertFalse(alterRequest0.isReadOnly());
  }

  //Test case number: 25
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.getLineSeparator()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test25()  throws Throwable  {
      CreateRequest createRequest0 = new CreateRequest("", false, 1859, "");
      String string0 = createRequest0.getLineSeparator();
      assertFalse(createRequest0.isReadOnly());
      assertEquals(1859, createRequest0.getTimeout());
      assertEquals(1, createRequest0.getCacheAbility());
      assertNotNull(string0);
      assertTrue(createRequest0.isDriverProcessed());
      assertFalse(createRequest0.getEscapeProcessing());
  }

  //Test case number: 26
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.getSQL()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test26()  throws Throwable  {
      CreateRequest createRequest0 = new CreateRequest("*M(}Qstxg4G", false, 0, "org.objectweb.cjdbc.common.sql.AbstractRequest");
      String string0 = createRequest0.getSQL();
      assertTrue(createRequest0.isDriverProcessed());
      assertFalse(createRequest0.getEscapeProcessing());
      assertNotNull(string0);
      assertFalse(createRequest0.isReadOnly());
      assertEquals("org.objectweb.cjdbc.common.sql.AbstractRequest", createRequest0.getLineSeparator());
      assertEquals("*M(}Qstxg4G", string0);
      assertEquals(0, createRequest0.getTimeout());
      assertEquals(1, createRequest0.getCacheAbility());
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.getTransactionIsolation()I: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test27()  throws Throwable  {
      DeleteRequest deleteRequest0 = new DeleteRequest("5_B+b NIF", false, 167, "5_B+b NIF");
      int int0 = deleteRequest0.getTransactionIsolation();
      assertEquals(0, int0);
      assertEquals(167, deleteRequest0.getTimeout());
      assertFalse(deleteRequest0.isReadOnly());
      assertTrue(deleteRequest0.isDriverProcessed());
      assertFalse(deleteRequest0.getEscapeProcessing());
      assertEquals(1, deleteRequest0.getCacheAbility());
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.setId(J)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test28()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("", true, 2583, "`:u|-})Gpzzzpj|", (DatabaseSchema) null, 0, true);
      selectRequest0.setId(0);
      assertEquals(2583, selectRequest0.getTimeout());
      assertTrue(selectRequest0.getEscapeProcessing());
      assertFalse(selectRequest0.isReadOnly());
      assertEquals("`:u|-})Gpzzzpj|", selectRequest0.getLineSeparator());
      assertEquals("", selectRequest0.getSQL());
      assertTrue(selectRequest0.isDriverProcessed());
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.isAlter()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test29()  throws Throwable  {
      InsertRequest insertRequest0 = new InsertRequest("[+Z", true, 0, "[+Z", true);
      insertRequest0.isAlter();
      assertTrue(insertRequest0.isDriverProcessed());
      assertFalse(insertRequest0.isReadOnly());
      assertEquals(1, insertRequest0.getCacheAbility());
      assertTrue(insertRequest0.getEscapeProcessing());
      assertEquals(0, insertRequest0.getTimeout());
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.getTimeout()I: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test30()  throws Throwable  {
      DropRequest dropRequest0 = new DropRequest("%$j]0s;K)3", false, 0, "alter");
      int int0 = dropRequest0.getTimeout();
      assertFalse(dropRequest0.getEscapeProcessing());
      assertEquals(0, int0);
      assertEquals("%$j]0s;K)3", dropRequest0.getSQL());
      assertTrue(dropRequest0.isDriverProcessed());
      assertEquals(1, dropRequest0.getCacheAbility());
      assertFalse(dropRequest0.isReadOnly());
      assertEquals("alter", dropRequest0.getLineSeparator());
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.getCursorName()Ljava/lang/String;: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test31()  throws Throwable  {
      CreateRequest createRequest0 = new CreateRequest("h26+V$c[4~iD3cJS{k", true, (-1), "h26+V$c[4~iD3cJS{k");
      String string0 = createRequest0.getCursorName();
      assertTrue(createRequest0.isDriverProcessed());
      assertNull(string0);
      assertFalse(createRequest0.isReadOnly());
      assertEquals(1, createRequest0.getCacheAbility());
      assertTrue(createRequest0.getEscapeProcessing());
      assertEquals(-1, createRequest0.getTimeout());
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.getEscapeProcessing()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test32()  throws Throwable  {
      CreateRequest createRequest0 = new CreateRequest("h26+V$c[4~iD3cJS{k", true, (-1), "h26+V$c[4~iD3cJS{k");
      boolean boolean0 = createRequest0.getEscapeProcessing();
      assertTrue(boolean0);
      assertEquals(-1, createRequest0.getTimeout());
      assertFalse(createRequest0.isReadOnly());
      assertEquals(1, createRequest0.getCacheAbility());
      assertTrue(createRequest0.isDriverProcessed());
  }

  //Test case number: 33
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.setCacheAbility(I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   */

	@Test(timeout=300000)
  public void test33()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("UR{.1qsg<>e<", true, 2230, "r!SeW>6y");
      selectRequest0.setCacheAbility((-95));
      assertEquals(-95, selectRequest0.getCacheAbility());
  }

  //Test case number: 34
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.isDrop()Z: root-Branch
   */

	@Test(timeout=300000)
  public void test34()  throws Throwable  {
      StoredProcedure storedProcedure0 = new StoredProcedure("oGN`fFoU", true, 1432, "oGN`fFoU", true);
      storedProcedure0.isDrop();
      assertTrue(storedProcedure0.getEscapeProcessing());
      assertFalse(storedProcedure0.isReadOnly());
      assertEquals(1, storedProcedure0.getCacheAbility());
      assertTrue(storedProcedure0.isDriverProcessed());
      assertEquals(1432, storedProcedure0.getTimeout());
  }

  //Test case number: 35
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.getLogin()Ljava/lang/String;: root-Branch
   */

	@Test(timeout=300000)
  public void test35()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("UR{.1qsg<>e<", true, 2230, "r!SeW>6y");
      String string0 = selectRequest0.getLogin();
      assertTrue(selectRequest0.isDriverProcessed());
      assertEquals("r!SeW>6y", selectRequest0.getLineSeparator());
      assertEquals(2230, selectRequest0.getTimeout());
      assertTrue(selectRequest0.getEscapeProcessing());
      assertEquals(1, selectRequest0.getCacheAbility());
      assertEquals("UR{.1qsg<>e<", selectRequest0.getSQL());
      assertFalse(selectRequest0.isReadOnly());
      assertNull(string0);
  }

  //Test case number: 36
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.setIsReadOnly(Z)V: root-Branch
   */

	@Test(timeout=300000)
  public void test36()  throws Throwable  {
      StoredProcedure storedProcedure0 = new StoredProcedure("", false, 1098, "+sVKF<L>l'-<Pcw", false);
      storedProcedure0.setIsReadOnly(false);
      assertEquals("", storedProcedure0.getSQL());
      assertEquals(1098, storedProcedure0.getTimeout());
      assertTrue(storedProcedure0.isDriverProcessed());
      assertFalse(storedProcedure0.getEscapeProcessing());
      assertEquals(1, storedProcedure0.getCacheAbility());
      assertEquals("+sVKF<L>l'-<Pcw", storedProcedure0.getLineSeparator());
      assertFalse(storedProcedure0.isReadOnly());
  }

  //Test case number: 37
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.isUpdate()Z: root-Branch
   */

	@Test(timeout=300000)
  public void test37()  throws Throwable  {
      AlterRequest alterRequest0 = new AlterRequest("h|3v%R", false, 0, "h|3v%R");
      alterRequest0.isUpdate();
      assertTrue(alterRequest0.isDriverProcessed());
      assertFalse(alterRequest0.isReadOnly());
      assertEquals(0, alterRequest0.getTimeout());
      assertEquals(1, alterRequest0.getCacheAbility());
      assertFalse(alterRequest0.getEscapeProcessing());
  }

  //Test case number: 38
  /*
   * 7 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.isDriverProcessed()Z: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   * Goal 3. org.objectweb.cjdbc.common.sql.AbstractRequest.setDriverProcessed(Z)V: root-Branch
   * Goal 4. org.objectweb.cjdbc.common.sql.AbstractRequest.sendToStream(Lorg/objectweb/cjdbc/common/stream/CJDBCOutputStream;Z)V: I39 Branch 2 IFNE L236 - false
   * Goal 5. org.objectweb.cjdbc.common.sql.AbstractRequest.sendToStream(Lorg/objectweb/cjdbc/common/stream/CJDBCOutputStream;Z)V: I42 Branch 3 IFNE L236 - false
   * Goal 6. org.objectweb.cjdbc.common.sql.AbstractRequest.sendToStream(Lorg/objectweb/cjdbc/common/stream/CJDBCOutputStream;Z)V: I46 Branch 4 IFNULL L236 - true
   * Goal 7. org.objectweb.cjdbc.common.sql.AbstractRequest.sendResultSetParams(Lorg/objectweb/cjdbc/common/stream/CJDBCOutputStream;)V: I16 Branch 6 IFNULL L275 - true
   */

	@Test(timeout=300000)
  public void test38()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("Y", false, (-422), "Y");
      assertTrue(selectRequest0.isDriverProcessed());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) dataOutputStream0);
      selectRequest0.setDriverProcessed(false);
      CJDBCOutputStream cJDBCOutputStream0 = new CJDBCOutputStream((OutputStream) mockPrintStream0);
      selectRequest0.sendToStream(cJDBCOutputStream0, false);
      assertFalse(selectRequest0.isDriverProcessed());
  }

  //Test case number: 39
  /*
   * 4 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.sendToStream(Lorg/objectweb/cjdbc/common/stream/CJDBCOutputStream;Z)V: I39 Branch 2 IFNE L236 - true
   * Goal 3. org.objectweb.cjdbc.common.sql.AbstractRequest.sendToStream(Lorg/objectweb/cjdbc/common/stream/CJDBCOutputStream;Z)V: I46 Branch 4 IFNULL L236 - false
   * Goal 4. org.objectweb.cjdbc.common.sql.AbstractRequest.sendResultSetParams(Lorg/objectweb/cjdbc/common/stream/CJDBCOutputStream;)V: I16 Branch 6 IFNULL L275 - true
   */

	@Test(timeout=300000)
  public void test39()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("`:u|-})Gpzzzpj|", true, (-443), "");
      selectRequest0.sqlSkeleton = "Request: ";
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) dataOutputStream0);
      CJDBCOutputStream cJDBCOutputStream0 = new CJDBCOutputStream((OutputStream) mockPrintStream0);
      selectRequest0.sendToStream(cJDBCOutputStream0, true);
      assertFalse(selectRequest0.isReadOnly());
      assertTrue(selectRequest0.getEscapeProcessing());
      assertEquals(1, selectRequest0.getCacheAbility());
      assertEquals(-443, selectRequest0.getTimeout());
      assertEquals("`:u|-})Gpzzzpj|", selectRequest0.getSQL());
      assertTrue(selectRequest0.isDriverProcessed());
      assertEquals("", selectRequest0.getLineSeparator());
  }

  //Test case number: 40
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.receiveResultSetParams(Lorg/objectweb/cjdbc/common/stream/CJDBCInputStream;)V: I16 Branch 5 IFEQ L259 - true
   */

	@Test(timeout=300000)
  public void test40()  throws Throwable  {
      StoredProcedure storedProcedure0 = new StoredProcedure("", false, 1098, "+sVKF<L>l'-<Pcw", false);
      byte[] byteArray0 = new byte[9];
      Blob blob0 = new Blob(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = (ByteArrayInputStream)blob0.getBinaryStream();
      CJDBCInputStream cJDBCInputStream0 = new CJDBCInputStream((InputStream) byteArrayInputStream0);
      storedProcedure0.receiveResultSetParams(cJDBCInputStream0);
      assertEquals(1098, storedProcedure0.getTimeout());
      assertEquals("", storedProcedure0.getSQL());
      assertFalse(storedProcedure0.isReadOnly());
      assertTrue(storedProcedure0.isDriverProcessed());
      assertFalse(storedProcedure0.getEscapeProcessing());
      assertEquals(1, storedProcedure0.getCacheAbility());
      assertEquals("+sVKF<L>l'-<Pcw", storedProcedure0.getLineSeparator());
  }

  //Test case number: 41
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.receiveResultSetParams(Lorg/objectweb/cjdbc/common/stream/CJDBCInputStream;)V: I16 Branch 5 IFEQ L259 - false
   */

	@Test(timeout=300000)
  public void test41()  throws Throwable  {
      StoredProcedure storedProcedure0 = new StoredProcedure("", false, 1098, "+sVKF<L>l'-<Pcw", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte) (-16);
      Blob blob0 = new Blob(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = (ByteArrayInputStream)blob0.getBinaryStream();
      CJDBCInputStream cJDBCInputStream0 = new CJDBCInputStream((InputStream) byteArrayInputStream0);
      try { 
        storedProcedure0.receiveResultSetParams(cJDBCInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.io.DataInputStream", e);
      }
  }

  //Test case number: 42
  /*
   * 6 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.setCursorName(Ljava/lang/String;)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.isDriverProcessed()Z: root-Branch
   * Goal 3. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   * Goal 4. org.objectweb.cjdbc.common.sql.AbstractRequest.sendToStream(Lorg/objectweb/cjdbc/common/stream/CJDBCOutputStream;Z)V: I39 Branch 2 IFNE L236 - false
   * Goal 5. org.objectweb.cjdbc.common.sql.AbstractRequest.sendToStream(Lorg/objectweb/cjdbc/common/stream/CJDBCOutputStream;Z)V: I42 Branch 3 IFNE L236 - true
   * Goal 6. org.objectweb.cjdbc.common.sql.AbstractRequest.sendResultSetParams(Lorg/objectweb/cjdbc/common/stream/CJDBCOutputStream;)V: I16 Branch 6 IFNULL L275 - false
   */

	@Test(timeout=300000)
  public void test42()  throws Throwable  {
      SelectRequest selectRequest0 = new SelectRequest("", true, 2583, "`:u|-})Gpzzzpj|", (DatabaseSchema) null, 0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) dataOutputStream0);
      CJDBCOutputStream cJDBCOutputStream0 = new CJDBCOutputStream((OutputStream) mockPrintStream0);
      selectRequest0.setCursorName("");
      selectRequest0.sendToStream(cJDBCOutputStream0, false);
      assertEquals("`:u|-})Gpzzzpj|", selectRequest0.getLineSeparator());
      assertTrue(selectRequest0.getEscapeProcessing());
      assertFalse(selectRequest0.isReadOnly());
      assertTrue(selectRequest0.isDriverProcessed());
      assertEquals(2583, selectRequest0.getTimeout());
      assertEquals("", selectRequest0.getSQL());
  }

  //Test case number: 43
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.getSQLShortForm(I)Ljava/lang/String;: I3 Branch 7 IFEQ L567 - true
   */

	@Test(timeout=300000)
  public void test43()  throws Throwable  {
      InsertRequest insertRequest0 = new InsertRequest("[+Z", true, 0, "[+Z", true);
      String string0 = insertRequest0.getSQLShortForm(0);
      assertTrue(insertRequest0.isDriverProcessed());
      assertEquals(0, insertRequest0.getTimeout());
      assertEquals("[+Z", string0);
      assertEquals(1, insertRequest0.getCacheAbility());
      assertTrue(insertRequest0.getEscapeProcessing());
      assertNotNull(string0);
      assertFalse(insertRequest0.isReadOnly());
  }

  //Test case number: 44
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.getSQLShortForm(I)Ljava/lang/String;: I3 Branch 7 IFEQ L567 - false
   * Goal 3. org.objectweb.cjdbc.common.sql.AbstractRequest.getSQLShortForm(I)Ljava/lang/String;: I8 Branch 8 IF_ICMPGE L567 - false
   */

	@Test(timeout=300000)
  public void test44()  throws Throwable  {
      InsertRequest insertRequest0 = new InsertRequest("D", false, 18, "D", false);
      String string0 = insertRequest0.getSQLShortForm(18);
      assertFalse(insertRequest0.getEscapeProcessing());
      assertEquals(1, insertRequest0.getCacheAbility());
      assertFalse(insertRequest0.isReadOnly());
      assertTrue(insertRequest0.isDriverProcessed());
      assertEquals(18, insertRequest0.getTimeout());
      assertNotNull(string0);
  }

  //Test case number: 45
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.getSQLShortForm(I)Ljava/lang/String;: I3 Branch 7 IFEQ L567 - false
   * Goal 3. org.objectweb.cjdbc.common.sql.AbstractRequest.getSQLShortForm(I)Ljava/lang/String;: I8 Branch 8 IF_ICMPGE L567 - true
   */

	@Test(timeout=300000)
  public void test45()  throws Throwable  {
      UnknownRequest unknownRequest0 = new UnknownRequest("B(w}:nJ", true, (-332), "B(w}:nJ");
      // Undeclared exception!
      try { 
        unknownRequest0.getSQLShortForm((-4));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -4
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  //Test case number: 46
  /*
   * 2 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.equals(Ljava/lang/Object;)Z: I3 Branch 9 IFNULL L659 - true
   */

	@Test(timeout=300000)
  public void test46()  throws Throwable  {
      UnknownRequest unknownRequest0 = new UnknownRequest("", false, (-1), "");
      boolean boolean0 = unknownRequest0.equals((Object) null);
      assertFalse(unknownRequest0.getEscapeProcessing());
      assertTrue(unknownRequest0.isDriverProcessed());
      assertFalse(unknownRequest0.isReadOnly());
      assertEquals(1, unknownRequest0.getCacheAbility());
      assertEquals(-1, unknownRequest0.getTimeout());
      assertFalse(boolean0);
  }

  //Test case number: 47
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.equals(Ljava/lang/Object;)Z: I3 Branch 9 IFNULL L659 - false
   * Goal 3. org.objectweb.cjdbc.common.sql.AbstractRequest.equals(Ljava/lang/Object;)Z: I6 Branch 10 IFNE L659 - false
   */

	@Test(timeout=300000)
  public void test47()  throws Throwable  {
      DropRequest dropRequest0 = new DropRequest("Cor~KMM,f&+", true, 0, "Cor~KMM,f&+");
      boolean boolean0 = dropRequest0.equals("Cor~KMM,f&+");
      assertFalse(dropRequest0.isReadOnly());
      assertTrue(dropRequest0.getEscapeProcessing());
      assertTrue(dropRequest0.isDriverProcessed());
      assertFalse(boolean0);
      assertEquals(1, dropRequest0.getCacheAbility());
      assertEquals(0, dropRequest0.getTimeout());
  }

  //Test case number: 48
  /*
   * 7 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.trimCarriageReturnAndTabs()Ljava/lang/String;: I4 Branch 12 IFNULL L703 - true
   * Goal 3. org.objectweb.cjdbc.common.sql.AbstractRequest.replaceStringWithSpace(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I15 Branch 13 IF_ICMPNE L723 - true
   * Goal 4. org.objectweb.cjdbc.common.sql.AbstractRequest.replaceStringWithSpace(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I15 Branch 13 IF_ICMPNE L723 - false
   * Goal 5. org.objectweb.cjdbc.common.sql.AbstractRequest.replaceStringWithSpace(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I23 Branch 14 IFNE L727 - true
   * Goal 6. org.objectweb.cjdbc.common.sql.AbstractRequest.replaceStringWithSpace(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I40 Branch 15 IF_ICMPNE L730 - true
   * Goal 7. org.objectweb.cjdbc.common.sql.AbstractRequest.replaceStringWithSpace(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I40 Branch 15 IF_ICMPNE L730 - false
   */

	@Test(timeout=300000)
  public void test48()  throws Throwable  {
      CreateRequest createRequest0 = null;
      try {
        createRequest0 = new CreateRequest("Cacheable status: ", false, 52, " ", (DatabaseSchema) null, 18, false);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Unsupported CREATE statement: 'Cacheable status: '
         //
         assertThrownBy("org.objectweb.cjdbc.common.sql.CreateRequest", e);
      }
  }

  //Test case number: 49
  /*
   * 3 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.trimCarriageReturnAndTabs()Ljava/lang/String;: I4 Branch 12 IFNULL L703 - false
   * Goal 3. org.objectweb.cjdbc.common.sql.AbstractRequest.replaceStringWithSpace(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I15 Branch 13 IF_ICMPNE L723 - false
   */

	@Test(timeout=300000)
  public void test49()  throws Throwable  {
      DropRequest dropRequest0 = new DropRequest("%$j]0s;K)3", false, 0, "alter");
      dropRequest0.sqlSkeleton = "%$j]0s;K)3";
      String string0 = dropRequest0.trimCarriageReturnAndTabs();
      assertFalse(dropRequest0.isReadOnly());
      assertEquals(1, dropRequest0.getCacheAbility());
      assertEquals(0, dropRequest0.getTimeout());
      assertTrue(dropRequest0.isDriverProcessed());
      assertEquals("%$j]0s;K)3", string0);
      assertEquals("%$j]0s;K)3", dropRequest0.getSQL());
      assertFalse(dropRequest0.getEscapeProcessing());
  }

  //Test case number: 50
  /*
   * 5 covered goals:
   * Goal 1. org.objectweb.cjdbc.common.sql.AbstractRequest.<init>(Ljava/lang/String;ZILjava/lang/String;I)V: root-Branch
   * Goal 2. org.objectweb.cjdbc.common.sql.AbstractRequest.trimCarriageReturnAndTabs()Ljava/lang/String;: I4 Branch 12 IFNULL L703 - true
   * Goal 3. org.objectweb.cjdbc.common.sql.AbstractRequest.replaceStringWithSpace(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I15 Branch 13 IF_ICMPNE L723 - true
   * Goal 4. org.objectweb.cjdbc.common.sql.AbstractRequest.replaceStringWithSpace(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I15 Branch 13 IF_ICMPNE L723 - false
   * Goal 5. org.objectweb.cjdbc.common.sql.AbstractRequest.replaceStringWithSpace(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I23 Branch 14 IFNE L727 - false
   */

	@Test(timeout=300000)
  public void test50()  throws Throwable  {
      DropRequest dropRequest0 = new DropRequest("Cor~KMM,f&+", true, 0, "Cor~KMM,f&+");
      String string0 = dropRequest0.trimCarriageReturnAndTabs();
      assertEquals("", string0);
      assertTrue(dropRequest0.isDriverProcessed());
      assertFalse(dropRequest0.isReadOnly());
      assertEquals(1, dropRequest0.getCacheAbility());
      assertTrue(dropRequest0.getEscapeProcessing());
      assertEquals(0, dropRequest0.getTimeout());
  }
}
